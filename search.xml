<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ABC230G - GCD Permutation</title>
    <url>/2022/01/07/ABC230G/</url>
    <content><![CDATA[<p><a href="https://atcoder.jp/contests/abc230/tasks/abc230_g">题目链接</a></p>
<p>给定$1\sim n$的排列$p_1,\cdots,p_n$,求$\sum\limits_{i=1}^n\sum\limits_{j=i}^n[\gcd(i,j)\neq1]\cdot[\gcd(p_i,p_j)\neq1].(n\leq2\times10^5)$</p>
<span id="more"></span>
<p>第一个$\gcd$直接上套路，容斥枚举因数:</p>
<p>$\sum\limits_{i=1}^n\sum\limits_{j=i}^n\sum\limits_{d=2}^n[\gcd(i,j)==d]\cdot[\gcd(p_i,p_j)\neq1]=\sum\limits_{d=2}^n\mu(d)\sum\limits_{i=1}^{\lfloor \frac{n}{d}\rfloor}\sum\limits_{j=i}^{\lfloor \frac{n}{d}\rfloor}\cdot[\gcd(p_{id},p_{jd})\neq1].$</p>
<p>对于某个$d$,当$\mu(d)$不为0的时候才会对答案有贡献，此时考虑$1\sim n$内所有$d$的倍数构成的集合$p_{kd}$.计算其$\gcd$不为1的对数，可以再来一波莫比乌斯反演，枚举集合中的因数$x$：</p>
<p>$\sum\limits_{i=1}^{\lfloor \frac{n}{d}\rfloor}\sum\limits_{j=i}^{\lfloor \frac{n}{d}\rfloor}[\gcd(p_{id},p_{jd})\neq1]=\sum\limits_{x=2}^{200000}\mu(x)\sum\limits_{i=1}^{\lfloor \frac{n}{d}\rfloor}\sum\limits_{j=i}^{\lfloor \frac{n}{d}\rfloor}[x|p_{id}][x|p_{jd}]$.</p>
<p>上式第二项即拿出来的集合中，含有因子$x$的所有$p$之间的对的个数。可以开一个map来存当前集合中含有因数$x$的$p$的个数，记为$cnt$,则对的个数为$\frac{cnt(cnt+1)}{2}$.</p>
<p>总复杂度计算：当$\mu(d)\neq0$时，$d$质因数分解后幂次最多取1，而1到200000内$2\times3\times5\times7\times11\times13\times17=510510&gt;200000,$说明质因数分解最多只能有6个质因子。这样的数的个数最多有$2^6-1$.而其中$d=1$时集合大小最大，为$1\sim n$,其因子总数为$\sum\limits_{i=1}^n\frac{n}{i}\approx n\ln n.$</p>
<p>总复杂度为$O(63n\ln n),$实际常数偏小，可以通过。</p>
<p>AC代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 200010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> a[MAXN], mu[MAXN], pri[MAXN], vis[MAXN], tot, n;</span><br><span class="line"> vector&lt;<span class="keyword">int</span>&gt;d[MAXN], tmp;</span><br><span class="line">map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;mp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i])</span><br><span class="line">            mu[i] = <span class="number">-1</span>, pri[++tot] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot &amp;&amp; i * pri[j] &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i * pri[j]] = <span class="number">1</span>; <span class="comment">//minf[i * pri[j]] = pri[j];</span></span><br><span class="line">            <span class="keyword">if</span> (i % pri[j] == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> mu[i * pri[j]] = -mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mu[i])</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j += i)d[j].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//题解里说的2*3*5*7*11*13*17是因为mu[b]!=0所以分解之后次幂最多取1.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mp.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += x)<span class="comment">//固定x,p的因数统统扔进map</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it : d[a[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            mp[it]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : mp)</span><br><span class="line">    &#123;</span><br><span class="line">        res += <span class="number">1LL</span> * mu[it.first] * it.second * (it.second + <span class="number">1</span>) / <span class="number">2</span>;<span class="comment">//再反演</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n); <span class="built_in">init</span>(n+<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)<span class="comment">//枚举外层因数i</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mu[i])</span><br><span class="line">        ans += <span class="number">1LL</span>*mu[i] * <span class="built_in">calc</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>; <span class="comment">///scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);<span class="comment">//fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title>ABC221E LEQ</title>
    <url>/2022/01/11/ABC221E/</url>
    <content><![CDATA[<p><a href="https://atcoder.jp/contests/abc221/tasks/abc221_e">题目链接</a></p>
<p>求长度至少为2且满足首元素小于等于尾元素的子序列个数，对998244353取模。($n\le3\times10^5$)</p>
<span id="more"></span>
<p>固定首元素为$a[i]$，尾元素为$a[j]$,且满足$a[i]\le a[j]$.则中间的数有$2^{j-i-1}$种选择。直接枚举i,j明显会T。加入a[j]后，答案相当于加上了$2^{j-1}\sum\limits_{i&lt;j且a[i]\le a[i]}^{j-1}\frac{1}{2^i}$，容易联想到树状数组可以快速查询序列中比元素小的前缀和，单点加值的时候乘上$2^{-i}$（用逆元），维护这个东西。</p>
<p>还有记得离散化。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 300010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> a[MAXN],aa[MAXN];</span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x, ll n = MOD - <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x %= MOD; ll res = <span class="number">1</span>; <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)res *= x;</span><br><span class="line">        res %= MOD; x *= x; x %= MOD; n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> maxn = MAXN * <span class="number">2</span> - <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> b[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll x, ll k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= maxn; i += i &amp; (-i))</span><br><span class="line">            b[i] += k, b[i] %= MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i -= i &amp; (-i))</span><br><span class="line">            res += b[i], res %= MOD;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;t;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;aa[i]); a[i] = aa[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(aa + <span class="number">1</span>, aa + n + <span class="number">1</span>);<span class="keyword">int</span> nn = <span class="built_in">unique</span>(aa + <span class="number">1</span>, aa + n + <span class="number">1</span>) - aa - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        a[i] = <span class="built_in">lower_bound</span>(aa + <span class="number">1</span>, aa + nn + <span class="number">1</span>, a[i]) - aa;</span><br><span class="line">    ll ans = <span class="number">0</span>; ll inv = <span class="built_in">ksm</span>(<span class="number">2</span>, MOD - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans += t.<span class="built_in">sum</span>(a[i]) * <span class="built_in">ksm</span>(<span class="number">2</span>, i - <span class="number">1</span>); ans %= MOD;</span><br><span class="line">        t.<span class="built_in">add</span>(a[i], <span class="built_in">ksm</span>(inv, i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>; <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);<span class="comment">//fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>ABC235D,E</title>
    <url>/2022/01/16/ABC235-D,E/</url>
    <content><![CDATA[<p><a href="https://atcoder.jp/contests/abc235/tasks">题目链接</a></p>
<span id="more"></span>
<p>（最近打Atcoder越来越铸币了）</p>
<p><strong>D - Multiply and Rotate</strong></p>
<p>题意：给定$a,n,2\le a\le 10^6,1\le n\le 10^6$,可以对一个数$x$进行以下操作：</p>
<p>1.用$x\cdot a$替换$x$;</p>
<p>2.将$x$的十进制表示转化为字符，如果最后一位不是0，将其循环右移一位。</p>
<p>问：从1开始，至少经过多少次操作能把数变成$n$.如果不能，输出<code>-1</code>.</p>
<p>分析：如果从1出发BFS，如果答案不存在会做很多无用功，所以考虑逆着找，考虑把$n$变为1的最少次数，这样除法只有当$x$被$n$整除时才能继续搜；循环右移要变成循环左移，什么时候可以循环左移呢，次高位不为0的时候。（因为这个WA了好多次）</p>
<p>比赛时写的丑陋代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1e9</span>;</span><br><span class="line">ll a, n;</span><br><span class="line"><span class="keyword">int</span> dp[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shiftr</span><span class="params">(<span class="keyword">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll tmp = now, pw = <span class="number">0</span>; ll ttt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tmp)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp /= <span class="number">10</span>; pw++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> r = now % <span class="number">10</span>;</span><br><span class="line">    now /= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (r == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> now + r * ttt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shiftl</span><span class="params">(<span class="keyword">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll tmp = now, pw = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (tmp&gt;=<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp /= <span class="number">10</span>; pw++;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ttt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= pw; i++)ttt *= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> l = now % ttt; ll tmp2 = l;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; pw; i++)</span><br><span class="line">        tmp2 /= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (tmp == <span class="number">0</span>||tmp2==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> l*<span class="number">10</span>+tmp;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;pa&gt;q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">mapa</span>(<span class="number">0</span>,n));</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        pa pp = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        val = pp.second;</span><br><span class="line">        <span class="comment">//dp[val] = pp.first;</span></span><br><span class="line">        ll tmp = val, pw = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (tmp)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp /= <span class="number">10</span>; pw++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//printf(&quot;%d %d\n&quot;, pp.first, pp.second);</span></span><br><span class="line">        <span class="keyword">if</span> (pp.second == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res = <span class="built_in">min</span>(res, pp.first);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= pw; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (val % a == <span class="number">0</span>&amp;&amp;dp[val/a]&gt;pp.first+<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">mapa</span>(pp.first + i, val / a));</span><br><span class="line">                dp[val / a] = pp.first + <span class="number">1</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">if</span> (pp.first + i &lt; dp[val])</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">mapa</span>(pp.first + i, val));</span><br><span class="line">                dp[val] = pp.first + i;</span><br><span class="line">            &#125;</span><br><span class="line">            val = <span class="built_in">shiftl</span>(val);</span><br><span class="line">            <span class="keyword">if</span> (val == <span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;a, &amp;n);</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x3f3f3f3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dp));</span><br><span class="line">    res=<span class="built_in">bfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//printf(&quot;%d\n&quot;, shiftr(1024));</span></span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">1e9</span>)res = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;<span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);<span class="comment">//fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>E - MST + 1</strong></p>
<p>题意：给n个点，m条有权边$c_i$，q个独立询问，$(n,m,q\le 2\times10^5)$,每个询问给出一条边$(u_i,v_i,w_i)$,问在原图中加入新边后得到的图的最小生成树是否包含这条边，每个$w_i,c_i$都互不相同。</p>
<p>自己的巨大多复杂想法：</p>
<p>先求原图的最小生成树（贪心+并查集做法），此时若继续加边则会成环，由贪心可证新图的最小生成树要么不变，要么只会变一条边，也易知新图的最小生成树就是环中删掉一条最大边。用LCA判断$u_i$到$lca$和$v_i$到$lca$的路径上最大的边是否比$w_i$大，如果大就说明答案是<code>Yes</code>,否则是<code>No</code>.类似维护区间$max$，类似st表做法树上倍增求即可，询问时取区间并，但是右区间的左端点不能由lca直接减得到，还是得用求lca时的倍增往上跳。复杂度大概是$O(n\log^2n+q\log n+m\log m)$.</p>
<p>（当时脑抽想成$min$，改过来后st表询问取min忘记改成max了，WA了7发）</p>
<p>正解：考虑原图和所有询问的边，按Kruscal做法，当处理到询问时：如果这条边不是最小生成树的边，答案就是<code>No</code>;如果这条边是最小生成树的边，答案就是<code>Yes</code>，但不更新最小生成树。复杂度$O((m+q)\log(m+q)).$</p>
<p>代码1：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;unordered_map&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;random&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 200010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> n, m, q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v; ll w;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edege</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt, to; ll w;</span><br><span class="line">&#125;ee[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAXN &lt;&lt; <span class="number">1</span>], ecnt, vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> fa[MAXN][<span class="number">22</span>], ma[MAXN][<span class="number">22</span>], dep[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ee[++ecnt].nxt = head[from];</span><br><span class="line">    ee[ecnt].to = to;</span><br><span class="line">    ee[ecnt].w = w;</span><br><span class="line">    head[from] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//printf(&quot;%d %d\n&quot;, u, f);</span></span><br><span class="line">    fa[u][<span class="number">0</span>] = f; ma[u][<span class="number">0</span>] = w;</span><br><span class="line">    dep[u] = dep[f] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">        ma[u][i] = <span class="built_in">max</span>(ma[u][i - <span class="number">1</span>], ma[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = ee[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> go = ee[i].to;</span><br><span class="line">        <span class="keyword">if</span> (go != f)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">dfs2</span>(go, u, ee[i].w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> ed)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (st == ed)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> t = dep[st] - dep[ed];</span><br><span class="line">    <span class="keyword">int</span> log = <span class="built_in">log2</span>(t);</span><br><span class="line">    t -= (<span class="number">1</span> &lt;&lt; log); <span class="keyword">int</span> tmp = st;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="number">1</span> &lt;&lt; i) &amp; t)</span><br><span class="line">            tmp = fa[tmp][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(fa[tmp][log]==ed)</span><br><span class="line">    <span class="keyword">return</span>  <span class="built_in">max</span>(ma[st][log], ma[tmp][log]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[u] &gt; dep[v])</span><br><span class="line">        <span class="built_in">swap</span>(u, v);</span><br><span class="line">    <span class="keyword">int</span> t = dep[v] - dep[u];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="number">1</span> &lt;&lt; i) &amp; t)</span><br><span class="line">            v = fa[v][i];</span><br><span class="line">    &#125;<span class="comment">//走到同一深度</span></span><br><span class="line">    <span class="keyword">if</span> (u == v)</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (fa[u][i] != fa[v][i])</span><br><span class="line">            u = fa[u][i], v = fa[v][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node <span class="keyword">const</span>&amp; a, Node <span class="keyword">const</span>&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == fa[x][<span class="number">0</span>] ? x : fa[x][<span class="number">0</span>] = <span class="built_in">find</span>(fa[x][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>, &amp;e[i].u, &amp;e[i].v, &amp;e[i].w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//memset(ma, 0x3f3f3f3f, sizeof(ma));</span></span><br><span class="line">    <span class="built_in">sort</span>(e + <span class="number">1</span>, e + m + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)fa[i][<span class="number">0</span>] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m &amp;&amp; cnt &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = e[i].u, v = e[i].v;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(u) != <span class="built_in">find</span>(v))</span><br><span class="line">        &#123;</span><br><span class="line">            fa[<span class="built_in">find</span>(u)][<span class="number">0</span>] = <span class="built_in">find</span>(v);</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="built_in">add</span>(u, v, e[i].w);</span><br><span class="line">            <span class="built_in">add</span>(v, u, e[i].w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v; ll w; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">        <span class="keyword">int</span> lc = <span class="built_in">lca</span>(u, v);</span><br><span class="line">        <span class="keyword">if</span> ((u == v) || (<span class="built_in">query</span>(u, lc) &lt;= w &amp;&amp; <span class="built_in">query</span>(v, lc) &lt;= w))</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;<span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);<span class="comment">//fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码2：</p>
<p>不想写了,开摆</p>
]]></content>
      <categories>
        <category>图论</category>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>生成树</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1114F Please, another Queries on Array?</title>
    <url>/2022/02/25/CF1114F/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1114/problem/F">题目链接</a></p>
<p>给定初始数组a[1…n]，q组询问，方式有两种：1.给$[l,r]$的数乘上$x$;2.询问$\varphi(\prod\limits_{i=l}^r a_i) \mod 10^9+7$.</p>
<p>$n\le 4\times10^5,q\le2\times10^5,1\le a[i],x\le300$</p>
<span id="more"></span>
<p>欧拉函数是积性函数，$\varphi(p^k)=p^k(1-\frac{1}{p})$.$\varphi(\prod p_i^{k_i})=\prod p_i^{k_i}(1-\frac{1}{p_i})=\prod p_i^{k_i}\prod(1-\frac{1}{p_i}).$因此用线段树维护区间积和区间包含的质因数即可，状态用一个64位的longlong数来状压表示。</p>
<p>刚开始做的时候以为开了62个线段树维护质因数幂合并就行，然后就MLE了。。。改了之后debug到吐发现<code>|=</code>少打<code>|</code>。。。。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 400110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> a[MAXN];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">310</span>], p[<span class="number">70</span>], pid[<span class="number">300</span>], inv[<span class="number">70</span>], minf[<span class="number">310</span>], tot;</span><br><span class="line">ll pf[<span class="number">310</span>];<span class="comment">//每个数的质因子分解</span></span><br><span class="line"><span class="comment">//小心数组开小内存溢出</span></span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x, ll n = MOD - <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x %= MOD;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)res *= x; res %= MOD;</span><br><span class="line">        x *= x; x %= MOD; n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getp</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">149</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i++; i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i] = <span class="number">1</span>; p[++tot] = i; minf[i] = i;</span><br><span class="line">            pid[i] = tot;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot &amp;&amp; i * p[j] &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i * p[j]] = <span class="number">1</span>; minf[i * p[j]] = p[j];</span><br><span class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> now = i;</span><br><span class="line">        <span class="keyword">while</span> (now != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pf[i] |= <span class="number">1LL</span> &lt;&lt; pid[minf[now]]; now /= minf[now];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//for (int j = 63; j &gt;= 1; j--)printf(&quot;%d&quot;, (pf[i] &gt;&gt; j) &amp; 1);</span></span><br><span class="line">        <span class="comment">//printf(&quot; %d\n&quot;,i);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">62</span>; i++)inv[i] = <span class="built_in">ksm</span>(p[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r; ll prod, lazy = <span class="number">1</span>;</span><br><span class="line">    ll state, lazystate;</span><br><span class="line">&#125;tr[<span class="number">1048600</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[o].prod = tr[o &lt;&lt; <span class="number">1</span>].prod * tr[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].prod % MOD;</span><br><span class="line">    tr[o].state = tr[o &lt;&lt; <span class="number">1</span>].state | tr[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].state;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> o, ll val,ll st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[o].lazy *= val; tr[o].lazy %= MOD;</span><br><span class="line">    tr[o].lazystate |= st;</span><br><span class="line">    tr[o].prod *= <span class="built_in">ksm</span>(val, <span class="number">1LL</span> * (tr[o].r - tr[o].l + <span class="number">1</span>));</span><br><span class="line">    tr[o].prod %= MOD;</span><br><span class="line">    tr[o].state |= st;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//printf(&quot;%d %d\n&quot;, l, r);</span></span><br><span class="line">    tr[o].l = l, tr[o].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[o].prod = a[l];</span><br><span class="line">        tr[o].state = pf[a[l]];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(o &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">mul</span>(o &lt;&lt; <span class="number">1</span>, tr[o].lazy, tr[o].lazystate);</span><br><span class="line">    <span class="built_in">mul</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, tr[o].lazy, tr[o].lazystate);</span><br><span class="line">    <span class="comment">//tr[o].state |= tr[o].lazystate;</span></span><br><span class="line">    tr[o &lt;&lt; <span class="number">1</span>].state |= tr[o].lazystate;</span><br><span class="line">    tr[o &lt;&lt; <span class="number">1</span>].lazystate |= tr[o].lazystate;<span class="comment">//捏吗少打一竖</span></span><br><span class="line">    tr[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].state |= tr[o].lazystate;</span><br><span class="line">    tr[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lazystate |= tr[o].lazystate;</span><br><span class="line">    tr[o].lazy = <span class="number">1</span>; tr[o].lazystate = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, ll val)</span><span class="comment">//区间乘法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll st = pf[val];</span><br><span class="line">    <span class="keyword">if</span> (tr[o].l == l &amp;&amp; tr[o].r == r)<span class="built_in">mul</span>(o, val, pf[val]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(o);</span><br><span class="line">        <span class="keyword">int</span> mid = (tr[o].l + tr[o].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (r &lt;= mid)<span class="built_in">update</span>(o &lt;&lt; <span class="number">1</span>, l, r, val);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid)<span class="built_in">update</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, val);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">update</span>(o &lt;&lt; <span class="number">1</span>, l, mid, val);</span><br><span class="line">            <span class="built_in">update</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushup</span>(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qry</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[o].l == l &amp;&amp; tr[o].r == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tr[o].prod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(o);</span><br><span class="line">    <span class="keyword">int</span> mid = (tr[o].l + tr[o].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">qry</span>(o &lt;&lt; <span class="number">1</span>, l, r) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">qry</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">return</span></span> (<span class="built_in">qry</span>(o &lt;&lt; <span class="number">1</span>, l, mid) * <span class="built_in">qry</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r)) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qrystate</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[o].l == l &amp;&amp; tr[o].r == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tr[o].state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//pushdown(o);</span></span><br><span class="line">    <span class="keyword">int</span> mid = (tr[o].l + tr[o].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">qrystate</span>(o &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">qrystate</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">return</span></span> (<span class="built_in">qrystate</span>(o &lt;&lt; <span class="number">1</span>, l, mid) | <span class="built_in">qrystate</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> tmp[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">getp</span>(<span class="number">300</span>);</span><br><span class="line">    <span class="keyword">int</span> n, q; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, a + i);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%d%d&quot;</span>, tmp, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span> (tmp[<span class="number">0</span>] == <span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            <span class="built_in">update</span>(<span class="number">1</span>, l, r, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ll ans = <span class="built_in">qry</span>(<span class="number">1</span>, l, r); ll st = <span class="built_in">qrystate</span>(<span class="number">1</span>, l, r);</span><br><span class="line">            <span class="comment">//char tmpp[100]=&quot;&quot;; ltoa(st, tmpp, 2); printf(&quot;%s\n&quot;, tmpp);</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">63</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (st &amp; (<span class="number">1LL</span> &lt;&lt; i))</span><br><span class="line">                &#123;</span><br><span class="line">                    ans *= (MOD - inv[i] + <span class="number">1</span>);</span><br><span class="line">                    ans %= MOD;</span><br><span class="line">                    <span class="comment">//printf(&quot;1&quot;);</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//else printf(&quot;0&quot;);</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数论</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 742 Div2 vp A-D补E</title>
    <url>/2022/02/28/CF-383-Div2/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/742">题目链接</a></p>
<p>比较水的一场，希望能每日vp1次Div2或ABC()</p>
<p>井号打不出来什么毛病。。。。。</p>
<span id="more"></span>
<p>A.求$1378^n$,分类讨论即可，注意n=0特判。</p>
<p>B.给定a[1…n]和$x$,求$(i,j)$满足$1\le i&lt;j\le n,a_i \oplus a_j=x$.维护一个桶即可。</p>
<p>C.给定p[1…n],求最小正整数t，使得对于任意$1\le i\le n$,都有$\underbrace{p(…p(p(i)))}_{2*t个}=i$.或说明无解。</p>
<p>若p[1…n]不是$1,…,n$的一个排列则存在一个数迭代后回不到自身，无解；否则路径为若干个互不相交的环。如果只存在长度为奇数的环则答案为所有环长度的lcm；如果还存在长度为偶数的环，则答案为lcm/2.</p>
<p>D.有一堆物品，重量$w[i]$美丽值$b[i]$，m对物品$(x_i,y_i)$互为friends. friends具有传递性。现要求选出一些物品，使其美丽值之和最大，并且重量不超过W。而且满足对于一个friends分量要么全选，要么至多选择其中一个物品。</p>
<p>分组背包+并查集套就完了。</p>
<p>E.有n对情侣坐在大小为2n的环上，有两种食物1和2，一对情侣不能吃相同食物，相邻三个人中要有两人的食物不同，求构造方式或说明无解。</p>
<p>二分图方面还是比较好想到的，邻居的构造是没想到。。。</p>
<p>每对情侣之间连边，然后邻居两两连边,即$2i$和$2i-1$连。这样得到的图一定是二分图并且环的大小一定是偶数，因为从一对情侣出发，其两端各延伸至邻居，大小一次改变了2.通过此构造保证一个点相邻两点一定有一个不同的。</p>
<p>E</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 500110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;G[MAXN]; <span class="keyword">int</span> val[MAXN];</span><br><span class="line"><span class="keyword">int</span> a[MAXN], b[MAXN];</span><br><span class="line"><span class="keyword">int</span> n, cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : G[st])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!val[it])</span><br><span class="line">        &#123;</span><br><span class="line">            val[it] = cnt % <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            cnt ^= <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(it);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        a[i] = u; b[i] = v;</span><br><span class="line">        G[u].<span class="built_in">push_back</span>(v); G[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        G[<span class="number">2</span> * i].<span class="built_in">push_back</span>(<span class="number">2</span> * i - <span class="number">1</span>);</span><br><span class="line">        G[<span class="number">2</span> * i - <span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">2</span> * i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!val[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, val[a[i]], val[b[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vp</category>
      </categories>
      <tags>
        <tag>背包</tag>
        <tag>二分图染色</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1119D Frets On Fire</title>
    <url>/2022/01/28/CF1119D/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/problemset/problem/1119/D">题目链接</a></p>
<p>有n行$10^{18}+1$列，每行第0个数为$a[1],\cdots,a[n]$，第i行的第j个元素=$a[i]+j$.有$q$个询问，第i个询问询问列$[l_i,r_i]$中，值不同的数有多少个。$(n,q\leq10^5,1\leq l\leq r\leq10^{18})$</p>
<span id="more"></span>
<p>排序不影响结果，先按a从小到大排序。而且答案和具体的$l,r$无关，只和区间长度$len$有关，也就等效于可以都从第一列开始数。</p>
<p>把a的起始值都画在数轴上，可以发现当区间长度变长后相邻两条线段可能会有相交。</p>
<p>分别考虑第$i$条线段对答案的贡献，贡献为$min(a[i+1]-a[i],len)$.其中$a[n+1]=+\infty$,记$d[i]=a[i+1]-a[i]$,最终答案为$\sum\limits_{i=1}^nmin(d[i],len)$.</p>
<p>如果想快速求的话还得处理一下d数组，$\sum\limits_{i=1}^nmin(d[i],len)=\sum\limits_{d[i]\leq len}d[i]+len*cnt,cnt$是大于len的d的个数。因此再对d排序，对于小于len的部分，我们维护d的前缀和，并在d中二分找到分界。</p>
<p><s>公式min的大括号不知道为什么会被吃，用小括号好碍眼</s></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 200010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;ll,ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x, ll n = MOD - <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">            res *= x, res %= MOD; x = x * x; x %= MOD; n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n; ll a[MAXN], d[MAXN], s[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        d[i] = a[i+<span class="number">1</span>] - a[i];<span class="comment">//第i个数的贡献</span></span><br><span class="line">    &#125;</span><br><span class="line">    d[n] = <span class="number">4e18</span>;</span><br><span class="line">    <span class="built_in">sort</span>(d + <span class="number">1</span>, d + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        s[i] = s[i - <span class="number">1</span>] + d[i];</span><br><span class="line">    <span class="comment">///int nn = unique(a + 1, a + n + 1) - a - 1;</span></span><br><span class="line">    <span class="keyword">int</span> q; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll l, r; <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        ll len = r - l + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//ans=sigma min(d[i],len);</span></span><br><span class="line">        <span class="keyword">int</span> leq = <span class="built_in">upper_bound</span>(d + <span class="number">1</span>, d + n + <span class="number">1</span>, len) - d - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> strg = n - leq;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, s[leq] + <span class="number">1LL</span> * len * strg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>; <span class="comment">//scanf(&quot;%d&quot;, &amp;_);//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//printf(&quot;\n&quot;); //fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>前缀和</tag>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1567E Non-Decreasing Dilemma</title>
    <url>/2022/02/15/CF1567E/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1567/problem/E">题目链接</a></p>
<p>2022.2.27改正了一些地方</p>
<hr>
<p>给定数组$a$，长度为$n$，有两种操作：</p>
<p><code>1 x y</code>：把$a[x]$改为$y$;</p>
<p><code>2 l r</code>：求区间$[l,r]$内有多少对$(p,q)$满足$l\le p\le q\le r$且$a[p]\le a[p+1]\le \cdots\le a[q].$</p>
<span id="more"></span>
<p>就是线段树。。。。单点修改区间查询。</p>
<p>考虑pushup合并左右儿子的过程。记$o$为合并后的区间对应的节点，$ls$为左儿子，$rs$为右儿子。肯定要维护答案$num$，$p,q$都落在左区间或都落在右区间都是满足的，然后如果p落在左区间，q落在右区间的时候序列也有可能接上，产生贡献，因此要维护区间的从左边向右延伸的最大不降长度$llen$,从右向左的$rlen$。当左区间右端点不大于右区间左端点时，贡献为左儿子的$rlen$乘上右儿子的$llen$.</p>
<p>于是$tr[o].sum=tr[ls].sum+tr[rs].sum+(a[tr[ls].r]\le a[tr[rs].l])?tr[ls].rlen*tr[rs].llen:0.$</p>
<p>$tr[o].llen,tr[o].rlen$的维护也差不多，大部分情况直接继承左、右区间的就行，但是有可能左区间整段都不下降，llen延伸到右区间，此时：$tr[o].llen=tr[ls].r-tr[ls].l+1+tr[rs].llen$.$rlen$同理。</p>
<p>然后是查询，查询的过程和pushup合并几乎是一样的，于是可以考虑另写一个merge函数来统一使用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 400110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> a[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r; ll num, llen, rlen;<span class="comment">//左、右最长不下降</span></span><br><span class="line">&#125;tr[MAXN * <span class="number">4</span>];</span><br><span class="line"><span class="function">Node <span class="title">merge</span><span class="params">(Node ls, Node rs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node res;</span><br><span class="line">    res.num = ls.num + rs.num;</span><br><span class="line">    res.l = ls.l; res.r = rs.r;</span><br><span class="line">    res.llen = ls.llen; res.rlen = rs.rlen;</span><br><span class="line">    <span class="keyword">if</span> (a[ls.r] &lt;= a[rs.l])<span class="comment">//&lt;=</span></span><br><span class="line">    &#123;</span><br><span class="line">        res.num += ls.rlen * rs.llen;</span><br><span class="line">        <span class="keyword">if</span> (ls.llen == ls.r - ls.l + <span class="number">1</span>)</span><br><span class="line">            res.llen += rs.llen;</span><br><span class="line">        <span class="keyword">if</span> (rs.rlen == rs.r - rs.l + <span class="number">1</span>)</span><br><span class="line">            res.rlen += ls.rlen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[o] = <span class="built_in">merge</span>(tr[o &lt;&lt; <span class="number">1</span>], tr[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[o].l == tr[o].r)</span><br><span class="line">    &#123;</span><br><span class="line">        a[pos] = val; <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (tr[o].l + tr[o].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (pos &gt; mid)</span><br><span class="line">        <span class="built_in">change</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, pos, val);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">change</span>(o &lt;&lt; <span class="number">1</span>, pos, val);</span><br><span class="line">    <span class="built_in">pushup</span>(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//printf(&quot;%d %d\n&quot;, l, r);</span></span><br><span class="line">    tr[o].l = l, tr[o].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[o].num = <span class="number">1</span>; tr[o].llen = tr[o].rlen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(o &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node <span class="title">query</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[o].l == l &amp;&amp; tr[o].r == r)<span class="keyword">return</span> tr[o];</span><br><span class="line">    <span class="keyword">int</span> mid = (tr[o].l + tr[o].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid)<span class="keyword">return</span> <span class="built_in">query</span>(o &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid)<span class="keyword">return</span> <span class="built_in">query</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">merge</span>(<span class="built_in">query</span>(o &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">query</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, q; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t, x, y; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;t, &amp;x, &amp;y);</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">change</span>(<span class="number">1</span>, x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">query</span>(<span class="number">1</span>, x, y).num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;<span class="comment">//scanf(&quot;%d&quot;, &amp;_);//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//printf(&quot;\n&quot;); //fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1632D New Year Concert</title>
    <url>/2022/01/31/CF1632D/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1632/problem/D">题目链接</a></p>
<p>题意：定义序列$b_1,b_2,\cdots,b_k$是无聊序列当且仅当存在$1\le l\le r\le k$使得$\gcd(b_l,b_{l+1}\cdots,b_{r-1},b_r)=r-l+1$.一次操作可以将序列的一个元素赋为一个值，定义$f(b)$为将序列$b$变成非无聊序列的最小操作数。</p>
<p>给定$a_1,a_2,\cdots,a_n$，要求输出$f(a_1),f(a_1,a_2),\cdots,f(a_1,a_2,\cdots,a_n).$</p>
<span id="more"></span>
<p>先挖点性质。。。</p>
<ol>
<li>区间gcd具有区间包含单调性，即如果$l_1\le l_2\le r_2 \le r_1$,则$\gcd([l_1,r_1])\leq\gcd([l_2,r_2])$.区间长度增大，gcd不会变大，因此固定l或r,另一端向外拓展时最多只有一个点使得序列无聊。</li>
<li>修改操作怎么贪怎么来，如果序列不无聊就不用改了（废话），如果恰有端点使得序列无聊，就把区间端点处a的值改为一个大质数。这样，在边界内，gcd&gt;len,边界处和边界外gcd=1&lt;len.</li>
</ol>
<p>然后题目要求从左往右扫，答案应该是不减的。考虑从$[a_1,\cdots,a_{i-1}]$转移到$[a_1,\cdots,a_{i}]:$答案最多增加1（是否改$a_{i}$），也就是固定右端点i+1,二分左端点，询问是否存在区间gcd==len，用ST表预处理区间gcd，如果存在就改$a_{i}$,答案++，改了之后前面$[a_1,\cdots,a_i]$就不用考虑了，即之后二分的左边界变为i+1，这样ST表正确性不会被影响。时间复杂度$O(n\log^2 n).$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 500010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x, ll n = MOD - <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">            res *= x, res %= MOD; x = x * x; x %= MOD; n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[MAXN],st[MAXN][<span class="number">20</span>];</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !b ? a : <span class="built_in">gcd</span>(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qry</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="built_in">log2</span>(r - l + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (r == l)<span class="keyword">return</span> st[l][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">gcd</span>(st[l][t], st[r - (<span class="number">1</span> &lt;&lt; t) + <span class="number">1</span>][t]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]); st[i][<span class="number">0</span>] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; i++)</span><br><span class="line">            st[i][j] = <span class="built_in">gcd</span>(st[i][j - <span class="number">1</span>], st[i + (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>)][j - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pre = <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans++; pre = i + <span class="number">1</span>;<span class="comment">//修改pre处的数为大质数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> l = pre, r = i, mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> has = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (l &lt;= r)<span class="comment">//ck [pre,i]</span></span><br><span class="line">            &#123;</span><br><span class="line">                mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> g = <span class="built_in">qry</span>(mid, i);</span><br><span class="line">                <span class="keyword">if</span> (g &gt; (i - mid + <span class="number">1</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (g &lt; (i - mid + <span class="number">1</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    ans++; pre = i + <span class="number">1</span>; <span class="keyword">break</span>;<span class="comment">//gcd==len</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>; <span class="comment">//scanf(&quot;%d&quot;, &amp;_);//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="comment">//fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>二分</tag>
        <tag>st表</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1624G  MinOr Tree(最小或生成树)</title>
    <url>/2022/01/11/CF1624G/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1624/problem/G">题目链接</a></p>
<p>求一个图的最小或生成树（树的边权取或最小）。</p>
<span id="more"></span>
<p>（div3都打不动，太菜了）</p>
<p>直接对答案从高位到低位考虑贪心，如果答案第j位可以取0，说明边权第j位是0的所有边组成的子图是连通图，之后的图也只能从这个子图中取，逆命题也成立。如果边权第j位是0的所有边组成的子图不能使图连通，说明答案的这位只能是1，直接给答案加上这一位的贡献就行。连通性用并查集维护，判断完一位就重新初始化。</p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 200010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="comment">/*int n, m;</span></span><br><span class="line"><span class="comment">string s[1010];</span></span><br><span class="line"><span class="comment">struct edge</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int id, l, r;</span></span><br><span class="line"><span class="comment">&#125;e[10][10];*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w, ban;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="number">1</span>]; <span class="keyword">int</span> ecnt;</span><br><span class="line"><span class="keyword">int</span> fa[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == fa[x] ? x : fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)fa[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*scanf(&quot;%d&quot;, &amp;n, &amp;m);</span></span><br><span class="line"><span class="comment">    for (int i = 1; i &lt;= n; i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        cin &gt;&gt; s[i];</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    string t; cin &gt;&gt; t;</span></span><br><span class="line"><span class="comment">    for (int i = 1; i &lt;= n; i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        for (int j = 1; j &lt; m; j++)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            int from = s[i][j - 1]-&#x27;0&#x27;, to = s[i][j]-&#x27;0&#x27;, id = i;</span></span><br><span class="line"><span class="comment">            e[from][to] = edge&#123; id,j - 1,j &#125;;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> n, m; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">        e[i].u = u, e[i].v = v; e[i].w = w;</span><br><span class="line">        e[i].ban = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>; <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">30</span>; j &gt;=<span class="number">0</span> ; j--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">init</span>(n); <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m&amp;&amp;cnt&lt;n<span class="number">-1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = e[i].u, v = e[i].v, w = e[i].w;</span><br><span class="line">            <span class="keyword">if</span> ((w &gt;&gt; j)%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;!e[i].ban)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">same</span>(u, v)) &#123;</span><br><span class="line">                    fa[<span class="built_in">find</span>(u)] = <span class="built_in">find</span>(v); cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt &lt; n - <span class="number">1</span>)</span><br><span class="line">            ans |= (<span class="number">1LL</span> &lt;&lt; j),flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>((e[i].w&gt;&gt;j)&amp;<span class="number">1</span>) </span><br><span class="line">                    e[i].ban = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;_);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);<span class="comment">//fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1615D X(or)-mas Tree</title>
    <url>/2022/01/19/CF1615D/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1615/problem/D">题目链接</a></p>
<p>给定一棵树，$n$个点，边带有权值$v$,如果$v=-1$，说明你要给其赋值。有$m$个限制$(x,y,v):$说明从$x$到$y$的简单路径上所有边的异或值的1的个数的奇偶性和$v$相同。要求给出构造方式，或说明无解。</p>
<span id="more"></span>
<p>记parity(x)为x中1的个数的奇偶性，容易发现可以用parity(x)代替边权，不影响构造。</p>
<p>把无根树转成有根树，令根为1，设$x$到根的异或值为$col_x$，边$(u,v)$的权值就是$col_u\oplus col_v$.这说明如果每个$col_x$确定了，答案就确定了。</p>
<p>对于限制$(x,y,v)$，发现$x$到$y$路径的异或=$col_x\oplus col_y$，形式和上面差不多，于是就把求边权转化为给点染色的问题。</p>
<p>先不考虑限制，并且不考虑值为-1的边构成的森林，对每一个连通分量，若其中一个点的权值确定了，其余的都可以唯一确定。再考虑限制，如果限制的边在不同的连通分量，则其中一个分量的点权可以唯一确定另一个分量的点权，所以森林也可以把限制的边加上。然后跑BFS,对于一个独立的分量，给它的一个点染色为0，然后求其他点权，顺便判断是否有矛盾。</p>
<p>输出答案时，如果边权为-1，就用col[x]^col[y]来确定，否则不变。</p>
<p>（至今没想明白为什么用ecnt清空会T，不是树吗，ecnt=2(n-1+m)&gt;=n的，改成enct+10过了）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 400010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="comment">//#define lowbit(x) x&amp;(-x) //nt玩意</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> col[MAXN];</span><br><span class="line">vector&lt;tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> nxt, to, w;</span><br><span class="line">    &#125;e[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> head[MAXN &lt;&lt; <span class="number">1</span>], ecnt = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        e[++ecnt].nxt = head[from];</span><br><span class="line">        e[ecnt].to = to;</span><br><span class="line">        e[ecnt].w = w;</span><br><span class="line">        head[from] = ecnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ecnt+<span class="number">10</span>; i++)</span><br><span class="line">            head[i] = <span class="number">0</span>;</span><br><span class="line">        ecnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;G, forest;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">parity</span><span class="params">(<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (w)</span><br><span class="line">    &#123;</span><br><span class="line">        res ^= (w &amp; <span class="number">1</span>);</span><br><span class="line">        w &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    q.<span class="built_in">push</span>(st);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = forest.head[t]; i; i = forest.e[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> w = forest.e[i].w, go = forest.e[i].to;</span><br><span class="line">            <span class="keyword">if</span> (col[go] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                col[go] = col[t] ^ w;</span><br><span class="line">                q.<span class="built_in">push</span>(go);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (col[go] ^ col[t] ^ w)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = G.head[u]; i; i = G.e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> go = G.e[i].to, w = G.e[i].w;</span><br><span class="line">        <span class="keyword">if</span> (go == fa)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (w == <span class="number">-1</span>)</span><br><span class="line">            ans.<span class="built_in">push_back</span>(<span class="built_in">make_tuple</span>(u, go, col[u] ^ col[go]));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans.<span class="built_in">push_back</span>(<span class="built_in">make_tuple</span>(u, go, w));</span><br><span class="line">        <span class="built_in">dfs</span>(go, u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        col[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">        G.<span class="built_in">add</span>(u, v, w);</span><br><span class="line">        G.<span class="built_in">add</span>(v, u, w);</span><br><span class="line">        <span class="keyword">if</span> (w &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            w = <span class="built_in">parity</span>(w);</span><br><span class="line">            forest.<span class="built_in">add</span>(u, v, w);</span><br><span class="line">            forest.<span class="built_in">add</span>(v, u, w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">        forest.<span class="built_in">add</span>(u, v, w); forest.<span class="built_in">add</span>(v, u, w);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//连上后也可以唯一确定点权</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (col[i] == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            col[i] = <span class="number">0</span>;<span class="comment">//一个连通分量标一个根</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">bfs</span>(i))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">                G.<span class="built_in">clear</span>(); forest.<span class="built_in">clear</span>(); ans.<span class="built_in">clear</span>();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">    <span class="comment">//由点权确定边权</span></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : ans)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, get&lt;<span class="number">0</span>&gt;(it), get&lt;<span class="number">1</span>&gt;(it), get&lt;<span class="number">2</span>&gt;(it));</span><br><span class="line">    &#125;</span><br><span class="line">    G.<span class="built_in">clear</span>(); forest.<span class="built_in">clear</span>(); ans.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;_);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//printf(&quot;\n&quot;); //fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>树</tag>
        <tag>染色</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1633D,E</title>
    <url>/2022/02/02/CF1633D,E/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1633/problem/D">D题</a>，<a href="https://codeforces.com/contest/1633/problem/E">E题</a></p>
<p>D. Make Them Equal</p>
<p>题意：给定大小为n的数组a，b，c。a的初始值都是1，一次操作可以选择正整数$x$把$a[i]$变成$a[i]+\lfloor \frac{a[i]}{x}\rfloor$，如果有$a[i]=b[i]$，就可以获得$c[i]$的分数，求进行不超过$k$次操作的最大分数，多测。$t\le 100,k\le10^6,1\le b[i]\le 1000,1\le c[i]\le 10^6,\sum n\le 10^3.$</p>
<p>E. Spanning Tree Queries</p>
<p>题意：给定$n\le50$个点，$m\le 300$条带权边$w_i$，有$q\le10^7$次询问，每次给定一个$x$,把每条边的边权变成$|w_i-x|$，求最小生成树，最后回答所有询问的异或和即可。前$p$个询问手动给出，其余由递推式$q[i]=(a*q[i-1]+b)\mod c$给出。(公式百分号显示不出来很奇怪)</p>
<span id="more"></span>
<p>感觉前面4题过于裸，不太像CF，然后D题和E题跨度有点大。。。</p>
<p>D.预处理出将1变成1到1000每个数的最小花费（类似最短路），然后就变成了背包问题。但是背包复杂度是$O(nW)$的，$W$是背包容量。直接写过不了，又发现花费最大不超过12，也就是当$k&gt;12000$就可以当作全部装完了。比赛时逆天看漏个0喜提WA on 5,然后最后因为只改了前面的k没改干净直接输出dp[k]了又WA on 12。。。（不要问为什么不直接k=min(k,12000),因为我是sb）看一下这题重测的数据就nm离谱，有很多都差不多，都是无脑拉满，常数猎杀者属于是，早知道我也去hack了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 500010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x, ll n = MOD - <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">            res *= x, res %= MOD; x = x * x; x %= MOD; n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % MOD;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;g[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//printf(&quot;%d:&quot;, i);</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>, r; l &lt;= i; l = r + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            r = i / (i / l); <span class="keyword">int</span> tt = i / l;</span><br><span class="line">            g[i].<span class="built_in">push_back</span>(i + tt);</span><br><span class="line">           <span class="comment">// printf(&quot;%d &quot;, tt);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">1</span>); dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;g[u].<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = g[u][i];</span><br><span class="line">            <span class="keyword">if</span> (dis[v]&gt;<span class="number">1e9</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">                dis[v] = dis[u] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">// printf(&quot;%d &quot;, dis[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> b[MAXN], c[MAXN]; ll dp[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//打表</span></span><br><span class="line">    <span class="keyword">int</span> n,k; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n,&amp;k);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="built_in">min</span>(k, <span class="number">12222</span>); i++)dp[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        b[i] = dis[b[i]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="built_in">min</span>(k,<span class="number">12222</span>); j &gt;= b[i]; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - b[i]] + c[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, dp[<span class="built_in">min</span>(k,<span class="number">12222</span>)]);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;_);<span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="comment">//fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>E. Spanning Tree Queries</p>
<p>先看看暴力$O(km\log m)$，肯定跑不过。~~不做了。~~瓶颈在于每次都要求最小生成树。</p>
<p>​	基本思路：重新考虑Kruscal的过程，先是给边排序，然后并查集贪，如果选边的顺序不变，那么最后的生成树形态也就不会变，变的只有每条边的权值。又注意到$x$分别位于$\frac{w_i+w_j}{2}$左右两端时，$w_i$和$w_j$的相对次序会发生变化，这样的分界点最多有$O(m^2)$个，划分出不同的区间。考虑令x落在左闭右开区间$[L_i,L_{i+1})$形成的最小生成树都一样，先求出每个$L_i$的最小生成树权值$val_i$，这部分复杂度是$O(m^3\log m)$。考虑答案如何转移：此时树的形态已经固定了。x每增加1，最小生成树中权值大于$L_i$的边权-1,权值小于或等于$L_i$的边权+1.答案变化因此求MST时维护严格大于$L_i$的数量geq和不大于$L_i$的数量leq，x的最小生成树权值$res=val_i+(x-L_i)*(leq-geq).$这个转移是$O(1)$的，因此总复杂度$O(m^3\log m+k\log m^2)$。</p>
<p>​	注意的点：分界点边界问题有点难讨论，按理说应该是左端点应该是$\lceil\frac{w_i+w_j}{2}\rceil$吧，但其实加多几个问题不大，把$\lfloor\frac{w_i+w_j}{2}\rfloor$加上也行。还有就是求$L$对应的MST时边里可能有$|w_i-L|=|w_{i+1}-L|$的边，然后当x=L+1,2,…时，两者的次序就变了，事实上应该先选$w$大的边，而不是都可以，因为这样geq会大一些。所以排序还得加第二关键字。看别人写的是有对询问排序然后一块一块处理的，就没找到有这个问题，很怪，但是这样就有$O(k\log k)$这项了，感觉还是慢了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x, ll n = MOD - <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">            res *= x, res %= MOD; x = x * x; x %= MOD; n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">&#125;e[MAXN];</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node <span class="keyword">const</span>&amp; a, Node <span class="keyword">const</span>&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(a.w - x) == <span class="built_in">abs</span>(b.w - x) ? a.w &gt; b.w:<span class="built_in">abs</span>(a.w - x) &lt; <span class="built_in">abs</span>(b.w - x);</span><br><span class="line">    <span class="comment">//return abs(a.w - x) &lt; abs(b.w - x);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> fa[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)fa[i] = i; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == fa[x] ? x : fa[x] = <span class="built_in">find</span>(fa[x]); &#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y); &#125;</span><br><span class="line"><span class="keyword">int</span> L[MAXN], tot;<span class="comment">//[L[i],L[i+1])</span></span><br><span class="line">ll q[MAXN * <span class="number">100</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MST</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll val; <span class="keyword">int</span> leq, geq;</span><br><span class="line">&#125;mst[<span class="number">99999</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m; cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        cin &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].w;</span><br><span class="line">    <span class="built_in">sort</span>(e + <span class="number">1</span>, e + m + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            L[++tot] = (e[i].w + e[j].w) / <span class="number">2</span>;</span><br><span class="line">            L[++tot] = (e[i].w + e[j].w + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//L[++tot] = (e[i].w + e[j].w - 1) / 2;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(L + <span class="number">1</span>, L + tot + <span class="number">1</span>);</span><br><span class="line">    tot = <span class="built_in">unique</span>(L, L + tot + <span class="number">1</span>) - L - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> p, k, a, b, c;</span><br><span class="line">    cin &gt;&gt; p &gt;&gt; k &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; q[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = p + <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">        q[i] = (<span class="number">1LL</span> * a * q[i - <span class="number">1</span>] + b) % c;</span><br><span class="line">    <span class="comment">//询问不排序</span></span><br><span class="line">    <span class="comment">//L[0] = -9;</span></span><br><span class="line">    L[++tot] = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= tot; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x = L[i];</span><br><span class="line">        <span class="built_in">sort</span>(e + <span class="number">1</span>, e + m + <span class="number">1</span>, cmp);</span><br><span class="line">        <span class="built_in">init</span>(n); <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m &amp;&amp; cnt &lt; n - <span class="number">1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = e[j].u, v = e[j].v; ll w = e[j].w;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">same</span>(u, v))</span><br><span class="line">            &#123;</span><br><span class="line">                fa[<span class="built_in">find</span>(u)] = <span class="built_in">find</span>(v);</span><br><span class="line">                cnt++;</span><br><span class="line">                <span class="keyword">if</span> (w &gt; x)mst[i].geq++;</span><br><span class="line">                <span class="keyword">else</span> mst[i].leq++;</span><br><span class="line">                mst[i].val += <span class="built_in">abs</span>(w - x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//求本质不同MST以及存大、小于分界点的MST边数</span></span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> belong = <span class="built_in">upper_bound</span>(L, L + tot + <span class="number">1</span>, q[i]) - L - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//int leq = upper_bound(e + 1, e + m + 1, q[i]) - e - 1, geq = m - leq;不是这个</span></span><br><span class="line">        ll res = mst[belong].val+<span class="number">1LL</span>*(q[i] - L[belong]) * (mst[belong].leq - mst[belong].geq);</span><br><span class="line">        ans ^= res;</span><br><span class="line">        <span class="comment">//printf(&quot;~%lld\n&quot;, res);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">    <span class="comment">//x的转移：生成树不变的话，答案转移和新的x无关，只和原来的生成树的分界点有关</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>); cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>; <span class="comment">//scanf(&quot;%d&quot;, &amp;_);//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="comment">//fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>图论</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>生成树</tag>
        <tag>背包</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1634D Finding Zero</title>
    <url>/2022/02/08/CF1634D/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1634/problem/D">题目链接</a></p>
<p>这是一道交互题，现有数组$a[1],a[2],\cdots,a[n](n\ge 4)$,其中只有一个值为0，其余都为正数。你可以做不超过$2n-2$次形如<code>? i j k</code>($i,j,k$互不相同)的询问，会返回$\max(a[i],a[j],a[k])-\min(a[i],a[j],a[k])$的值，然后你有两次机会回答0所在的位置，回答形式：<code>! i j</code>。</p>
<span id="more"></span>
<p>没看官方题解，官方题解好像是每4个一组找。</p>
<p>题解：</p>
<p>$2n$提示可以遍历两次。先不考虑各种极端情况：先固定1,2（很普通，即认为1,2都不是最值），剩下一个从3到n问一遍，答案最大的一定是个最值，下标记为mapos，然后ask(1,mapos,i)，$i\neq 1,i\neq mapos$，答案最大的就是另一个最值。此时输出两个最值下标即可。询问次数$2(n-2)$.</p>
<p>但是如果$a[1],a[2]$都是最值，则第一次遍历时询问的答案都是相等的，但是逆命题不成立，即答案都相等的话$a[1],a[2]$不一定是最值，例如1 1 2 2 0。如果能确定$a[1],a[2]$是最值，那么输出1,2即可。即使第一次遍历找到了最大值，如果$a[1]=0$，则第二次询问的答案也是相等的，不过此时逆命题成立。</p>
<p>下面考虑答案都相等的情形（前提）。记答案都相等的值为ans，$mi=\min(a[1],a[2]),mx=\max(a[1],a[2]),max=\max(a[1],\cdots,a[n]).$</p>
<p>注意到0只有一个（最大值可以有很多个），**所以对于所有可能的询问，当且仅当同时询问到最大值和0时取得答案最大值ans’=*max_element(a+1,a+n+1)。**如果$a[1],a[2]$都是最值，则单独去掉$a[1],a[2]$再做询问，其值必然比ans小。所以考虑另找两个数做询问：r=ask(1,3,4),s=ask(2,3,4)。</p>
<p>考虑$a[3],a[4]$的分布情况r与ans,s与ans的大小关系，有可能有以下几种情况：</p>
<ol>
<li>$a[1],a[2]$都是最值。即$0=mi&lt;mx=max.\Rightarrow r&lt;ans=ans’,s&lt;ans=ans’$.</li>
<li>$a[1],a[2]$都不是最值，即$0&lt;mi\le mx &lt;max=a[i]\ (for\ i:a[i]\neq 0)$，有两种：
<ol>
<li>$a[3]=a[4]=max.\Rightarrow r,s有一个=ans,另一个\le ans$.</li>
<li>$a[3],a[4]$中有一个取0一个取$max$.$\Rightarrow r=ans’&gt;ans,s=ans’&gt;ans.$</li>
</ol>
</li>
<li>$a[1],a[2]$中有一个最值，另一个不是最值，有两种：
<ol>
<li>最值为$max$.即$0&lt;mi\le max=mx$.这种情况不可能发生，因为0只有一个，ask(1,2,i)当遍历到a[i]=0时答案为$ans’$比其他答案都严格大，不满足前提。</li>
<li>最值为0.即$0=mi&lt;mx&lt;max=2*mx=a[i]\ (for\ i:a[i]\neq 0)$（由$mx&lt;max$知$ans=max=ans’$,且$a[1]=0||a[2]=0$推出$a[3]=a[4]=\cdots a[n]=max$）.此时$ans=ans’\Rightarrow r,s有一个=ans,另一个&lt;ans$.</li>
</ol>
</li>
</ol>
<p>合并一下情况，当r&gt;ans且s&gt;ans时，输出3，4；当r&lt;ans且s&lt;ans时，输出1，2；对于其余两种情况，可以发现$a[3],a[4]$一个取max,另一个不为0，也满足最开始的想法，固定3,4,遍历i即可准确找到，询问次数$n-2+2+n-2=2n-2.$</p>
<p>注意第二次遍历时不能用*max_element==*min_element来判，因为对于i=mapos是没有被问的，可以用set去重。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> ch[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> test = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;? %d %d %d\n&quot;</span>, a, b, c); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!test)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;ans);</span><br><span class="line">    <span class="keyword">else</span> ans = <span class="built_in">max</span>(&#123; ch[a],ch[b],ch[c] &#125;) - <span class="built_in">min</span>(&#123; ch[a],ch[b],ch[c] &#125;);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (test)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;ch[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ma = <span class="number">-1</span>, mapos = <span class="number">0</span>, ma2pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> prs = <span class="built_in">ask</span>(<span class="number">1</span>, <span class="number">2</span>, i); res[i] = prs;</span><br><span class="line">    &#125;</span><br><span class="line">    mapos = <span class="built_in">max_element</span>(res + <span class="number">3</span>, res + n + <span class="number">1</span>) - res; ma = res[mapos];</span><br><span class="line">    <span class="keyword">if</span> (*<span class="built_in">min_element</span>(res + <span class="number">3</span>, res + n + <span class="number">1</span>) == *<span class="built_in">max_element</span>(res + <span class="number">3</span>, res + n + <span class="number">1</span>))<span class="comment">//极端情形</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> rrr = <span class="built_in">ask</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), sss = <span class="built_in">ask</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span> (rrr &gt; ma &amp;&amp; sss &gt; ma)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;! 3 4&quot;</span>); <span class="built_in">fflush</span>(stdout); <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (rrr &lt; ma &amp;&amp; sss &lt; ma)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;! 1 2&quot;</span>); <span class="built_in">fflush</span>(stdout); <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//3，4一个取max，另一个不为0</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">3</span> || i == <span class="number">4</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    res[i] = <span class="number">0</span>; <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> prs = <span class="built_in">ask</span>(<span class="number">3</span>, <span class="number">4</span>, i); res[i] = prs;</span><br><span class="line">            &#125;</span><br><span class="line">            ma2pos = <span class="built_in">max_element</span>(res + <span class="number">1</span>, res + n + <span class="number">1</span>) - res;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;! %d %d&quot;</span>, ma2pos, ma2pos); <span class="built_in">fflush</span>(stdout); <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//给出的答案不完全等</span></span><br><span class="line">    set&lt;<span class="keyword">int</span>&gt;st;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == mapos)</span><br><span class="line">        &#123;</span><br><span class="line">            res[i] = <span class="number">0</span>; <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> pp = <span class="built_in">ask</span>(<span class="number">1</span>, mapos, i); res[i] = pp;</span><br><span class="line">        st.<span class="built_in">insert</span>(pp);</span><br><span class="line">    &#125;</span><br><span class="line">    ma2pos = <span class="built_in">max_element</span>(res + <span class="number">2</span>, res + <span class="number">1</span> + n) - res;</span><br><span class="line">    <span class="keyword">if</span> (st.<span class="built_in">size</span>() == <span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">&quot;! %d %d&quot;</span>, <span class="number">1</span>, mapos);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;! %d %d&quot;</span>, mapos, ma2pos);</span><br><span class="line">    <span class="built_in">fflush</span>(stdout);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    cin &gt;&gt; _;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>交互</tag>
      </tags>
  </entry>
  <entry>
    <title>CF597C Subsequences</title>
    <url>/2022/01/11/CF597C/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/597/problem/C">题目链接</a></p>
<p>求长度恰好为$k+1$的上升子序列个数（$n\le 10^5,0\le k\le10$,a[i]互不相同，保证答案不超过8e18)。</p>
<span id="more"></span>
<p>为表示方便先将k++。</p>
<p>设dp[[i][j]]：以第i个元素结尾，长度为j的递增子序列的方案数</p>
<p>转移：</p>
<p>$dp[i][j]=\sum\limits_{u=1,dp[u][j-1]&lt;a[i]}^{i-1}dp[u][j-1].$</p>
<p>即对所有当前小于a[i]的dp[][j-1]求和，可以用树状数组完成，用11个树状数组维护dp[j]，最后答案是$\sum\limits_{i=1}^n$dp[i][k].</p>
<p>复杂度$O(n\log n)$（BIT记得开ll,没改干净WA了好多发)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x, ll n = MOD - <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x %= MOD; ll res = <span class="number">1</span>; <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)res *= x;</span><br><span class="line">        res %= MOD; x *= x; x %= MOD; n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % MOD;</span><br><span class="line">&#125;</span><br><span class="line">ll a[MAXN], dp[MAXN][<span class="number">15</span>], n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></span><br><span class="line">    ll bit[MAXN &lt;&lt; <span class="number">1</span>];<span class="comment">//nt</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, ll k)</span><span class="comment">//nt</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += i &amp; (-i))</span><br><span class="line">            bit[i] += k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll res = <span class="number">0</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i -= i &amp; (-i))</span><br><span class="line">            res += bit[i];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;t[<span class="number">15</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k; <span class="built_in">scanf</span>(<span class="string">&quot;%lld%d&quot;</span>, &amp;n, &amp;k); k++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j] = (j == <span class="number">1</span> ? <span class="number">1</span> : t[j - <span class="number">1</span>].<span class="built_in">sum</span>(a[i] - <span class="number">1</span>));<span class="comment">//比a[i]小dp[j-1]求和</span></span><br><span class="line">            t[j].<span class="built_in">add</span>(a[i], dp[i][j]);<span class="comment">//更新BIT</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)ans += dp[i][k];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>; <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);<span class="comment">//fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces上的几道启发式合并入门</title>
    <url>/2022/02/27/dsu-on-tree/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/600/problem/E">CF600E Lomsat gelral</a></p>
<p>给定一棵以1为根的有根树，每个点上有权值$c[i]$,对于每个$i$，求以$i$为根的子树上，权值出现次数最多的权值之和，注意可能有多种权值出现次数相同。$(1\le n\le 100000,1\le c[i]\le n)$</p>
<p><a href="https://codeforces.com/contest/570/problem/D">CF570D Tree Requests</a></p>
<p>给定一棵以1为根的有根树，每个点上有字母<code>a</code>到<code>z</code>,有$m$次询问，需回答以$v_i$为根的子树上深度为$h_i$的所有节点上的字母重排后能否构成回文串。根的深度为1.$(1\le n,m\le 5\times 10^5)$</p>
<p><a href="https://codeforces.com/contest/208/problem/E">CF208E Blood Cousins</a></p>
<p>给定一个森林，定义：如果节点$u$的$p$级祖先等于节点$v$的$p$级祖先，则$v$是$u$的$p$级表亲。$m$组询问，询问$v_i$的$p_i$表亲个数。$(1\le n,m\le 10^5,1\le v_i,p_i\le n)$</p>
<p><a href="https://codeforces.com/contest/246/problem/E">CF246E Blood Cousins Return</a></p>
<p>给定一个森林，点上带有字符串（长度不超过20），$m$次询问，需回答从$v_i$向下的$k_i$层的儿子中有多少种不同的字符串。$1\le n,m\le10^5.$</p>
<span id="more"></span>
<p>原理：</p>
<p>先考虑暴力，对于每个点为根的子树，用一个全局cnt数组维护每个权值出现的次数，遍历子树记录cnt的值，如果加之前cnt为0则答案+=1，然后再遍历一遍子树清空。这样做的复杂度是$O(n^2)$的，瓶颈在于清空cnt数组。</p>
<p>注意到如果从下往上递归的话，假设当前点为$x$，在这之前$x$的所有儿子的答案都已经计算完毕，在算$x$的答案时，之前最后一次算儿子时的cnt可以不清空留给$x$继续使用，只要每次最后再走重儿子就可以保证复杂度降为$O(n\log n).$</p>
<p>复杂度的证明：考虑所有轻边暴力的过程，由于从一个点到根的轻边数量不超过$O(\log n)$条，故每个点被暴力递归的次数不超过$O(\log n)$次，总的时间复杂度为$O(n\log n)$，实际上上界较松。</p>
<p>第一道题，维护一个sum和最大出现次数mx，合并儿子时更新sum和mx，更改cnt，清除时将sum和mx置零，更改cnt.</p>
<p>第二道题有多组询问，考虑将询问按节点离线，然后做启发式合并，维护全局数组cnt[dep][26],回答时将同一节点的所有询问一并回答。（离线写炸了，太弱智了）</p>
<p>第三道题，借鉴第二道题的思路，先将询问离线，但是注意到回答的都是以xxx为根的形式，所以要对询问进行预处理，找到令$v_i$变成$v_i$的$p$级祖先再询问$v_i$的$p$级儿子个数，找$p$级祖先可以用倍增$O(n\log n)$预处理$O(\log n)$回答，问题不大。</p>
<p>第四道题也差不多，但是我用字符串到int的umap和cnt维护写挂了，直接set就过了，找不到原因。。。。但是字符串要多一个$\log$应该是逃不掉的。。</p>
<p>无脑粘代码（Blog不是你的粘贴板）</p>
<p>CF600E</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 400110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> dep[MAXN], sz[MAXN], fa[MAXN], son[MAXN];</span><br><span class="line"><span class="keyword">int</span> w[MAXN], n, cnt[MAXN];<span class="comment">//每种颜色次数</span></span><br><span class="line">ll ans[MAXN], sum, mx;<span class="comment">//之和，tmp和，tmp最大出现次数</span></span><br><span class="line"><span class="keyword">int</span> vi;<span class="comment">//已经处理过的重儿子</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt, to;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAXN &lt;&lt; <span class="number">1</span>], ecnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++ecnt].nxt = head[from];</span><br><span class="line">    e[ecnt].to = to;</span><br><span class="line">    head[from] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> d)</span><span class="comment">//现在处理u，得到u的答案</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt[w[u]] += d;</span><br><span class="line">    <span class="keyword">if</span> (cnt[w[u]] &gt;= mx)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cnt[w[u]] &gt; mx)sum = <span class="number">0</span>;</span><br><span class="line">        sum += w[u]; mx = cnt[w[u]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u] || v == vi)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">cal</span>(v, d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz[u] = <span class="number">1</span>; <span class="keyword">int</span> maxsize = <span class="number">-1</span>;</span><br><span class="line">    dep[u] = dep[f] + <span class="number">1</span>; fa[u] = f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == f)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        <span class="keyword">if</span> (sz[v] &gt; maxsize)</span><br><span class="line">            son[u] = v, maxsize = sz[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dsu</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> keep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u] || v == son[u])<span class="keyword">continue</span>;<span class="comment">//先走轻儿子</span></span><br><span class="line">        <span class="built_in">dsu</span>(v, <span class="number">0</span>);<span class="comment">//清空</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (son[u])</span><br><span class="line">        <span class="built_in">dsu</span>(son[u], <span class="number">1</span>);<span class="comment">//保留重儿子信息</span></span><br><span class="line">    vi = son[u];<span class="comment">//标记当前层重儿子</span></span><br><span class="line">    <span class="built_in">cal</span>(u, <span class="number">1</span>);</span><br><span class="line">    vi = <span class="number">0</span>;</span><br><span class="line">    ans[u] = sum;</span><br><span class="line">    <span class="keyword">if</span> (!keep)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cal</span>(u, <span class="number">-1</span>); mx = sum = <span class="number">0</span>;<span class="comment">//清除</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="built_in">addedge</span>(u, v); <span class="built_in">addedge</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dsu</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CF570D</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 500110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> dep[MAXN], sz[MAXN], fa[MAXN], son[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,ans[MAXN], cnt[MAXN][<span class="number">28</span>];<span class="comment">//cnt[i][j]:当前的第i层颜色j的个数</span></span><br><span class="line"><span class="keyword">char</span> ch[MAXN];</span><br><span class="line"><span class="keyword">int</span> vi;<span class="comment">//已经处理过的重儿子</span></span><br><span class="line">vector&lt;pa&gt;qry[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ck</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (h &lt;= dep[u])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cnt[h][i] % <span class="number">2</span>)res++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res &lt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt, to;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAXN &lt;&lt; <span class="number">1</span>], ecnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++ecnt].nxt = head[from];</span><br><span class="line">    e[ecnt].to = to;</span><br><span class="line">    head[from] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> d)</span><span class="comment">//现在利用保留的重儿子暴力处理u的所有轻儿子，得到u的答案</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt[dep[u]][ch[u] - <span class="string">&#x27;a&#x27;</span>] += d;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u] || v == vi)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">cal</span>(v, d);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz[u] = <span class="number">1</span>; <span class="keyword">int</span> maxsize = <span class="number">-1</span>;</span><br><span class="line">    dep[u] = dep[f] + <span class="number">1</span>; fa[u] = f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == f)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        <span class="keyword">if</span> (sz[v] &gt; maxsize)</span><br><span class="line">            son[u] = v, maxsize = sz[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dsu</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> keep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u] || v == son[u])<span class="keyword">continue</span>;<span class="comment">//先走轻儿子</span></span><br><span class="line">        <span class="built_in">dsu</span>(v, <span class="number">0</span>);<span class="comment">//清空</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (son[u])</span><br><span class="line">        <span class="built_in">dsu</span>(son[u], <span class="number">1</span>);<span class="comment">//保留重儿子信息</span></span><br><span class="line">    vi = son[u];<span class="comment">//标记当前层重儿子</span></span><br><span class="line">    <span class="built_in">cal</span>(u, <span class="number">1</span>);</span><br><span class="line">    vi = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//printf(&quot;u:%d %d %d %d\n&quot;, u, dep[u], ch[u] - &#x27;a&#x27;, d);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; qry[u].<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> id = qry[u][i].first, h = qry[u][i].second;</span><br><span class="line">        ans[id] = <span class="built_in">ck</span>(u, h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!keep)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cal</span>(u, <span class="number">-1</span>);<span class="comment">//清除</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(ans));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;u);</span><br><span class="line">        <span class="built_in">addedge</span>(u, i+<span class="number">1</span>); <span class="built_in">addedge</span>(i+<span class="number">1</span>, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ch + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v, h; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;v, &amp;h);</span><br><span class="line">        qry[v].<span class="built_in">push_back</span>(<span class="built_in">mapa</span>(i, h));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dsu</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ans[i])<span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CF208E</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 500110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> dep[MAXN], sz[MAXN], fa[MAXN][<span class="number">22</span>], son[MAXN], rt[MAXN], rtot;</span><br><span class="line"><span class="keyword">int</span> n,ans[MAXN], cnt[MAXN];<span class="comment">//cnt[i]:当前的第i层的儿子数</span></span><br><span class="line"><span class="keyword">int</span> vi;<span class="comment">//已经处理过的重儿子</span></span><br><span class="line">vector&lt;pa&gt;qry[MAXN];<span class="comment">//qry[v]:id p</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt, to;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAXN &lt;&lt; <span class="number">1</span>], ecnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++ecnt].nxt = head[from];</span><br><span class="line">    e[ecnt].to = to;</span><br><span class="line">    head[from] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> d)</span><span class="comment">//现在利用保留的重儿子暴力处理u的所有轻儿子，得到u的答案</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt[dep[u]] += d;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u][<span class="number">0</span>] || v == vi)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">cal</span>(v, d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz[u] = <span class="number">1</span>; <span class="keyword">int</span> maxsize = <span class="number">-1</span>;</span><br><span class="line">    dep[u] = dep[f] + <span class="number">1</span>;</span><br><span class="line">    fa[u][<span class="number">0</span>] = f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];<span class="comment">//倍增祖先</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == f)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        <span class="keyword">if</span> (sz[v] &gt; maxsize)</span><br><span class="line">            son[u] = v, maxsize = sz[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dsu</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> keep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u][<span class="number">0</span>] || v == son[u])<span class="keyword">continue</span>;<span class="comment">//先走轻儿子</span></span><br><span class="line">        <span class="built_in">dsu</span>(v, <span class="number">0</span>);<span class="comment">//清空</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (son[u])</span><br><span class="line">        <span class="built_in">dsu</span>(son[u], <span class="number">1</span>);<span class="comment">//保留重儿子信息</span></span><br><span class="line">    vi = son[u];<span class="comment">//标记当前层重儿子</span></span><br><span class="line">    <span class="built_in">cal</span>(u, <span class="number">1</span>);</span><br><span class="line">    vi = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//printf(&quot;u:%d %d %d %d\n&quot;, u, dep[u], ch[u] - &#x27;a&#x27;, d);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; qry[u].<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> id = qry[u][i].first, p = qry[u][i].second;</span><br><span class="line">        ans[id] = cnt[p] - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!keep)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cal</span>(u, <span class="number">-1</span>);<span class="comment">//清除</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="comment">//memset(ans, -1, sizeof(ans));</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;u);</span><br><span class="line">        <span class="keyword">if</span> (u)</span><br><span class="line">            <span class="built_in">addedge</span>(u, i), <span class="built_in">addedge</span>(i, u);</span><br><span class="line">        <span class="keyword">else</span> rt[++rtot] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= rtot; i++)</span><br><span class="line">        <span class="built_in">dfs</span>(rt[i], <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v, p; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;v, &amp;p);</span><br><span class="line">        <span class="keyword">int</span> d = dep[v];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((p &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">                v = fa[v][i];</span><br><span class="line">        &#125;</span><br><span class="line">        qry[v].<span class="built_in">push_back</span>(<span class="built_in">mapa</span>(i, d));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=rtot;i++)</span><br><span class="line">    <span class="built_in">dsu</span>(rt[i], <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CF246E</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 500110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> dep[MAXN], sz[MAXN],fa[MAXN], son[MAXN], rt[MAXN], rtot;</span><br><span class="line"><span class="keyword">int</span> a[MAXN];</span><br><span class="line"><span class="keyword">int</span> n, ans[MAXN]; set&lt;<span class="keyword">int</span>&gt;num[MAXN];</span><br><span class="line">unordered_map&lt;string, <span class="keyword">int</span>&gt;dit; <span class="keyword">int</span> dtot;</span><br><span class="line"><span class="keyword">int</span> vi;<span class="comment">//已经处理过的重儿子</span></span><br><span class="line">vector&lt;pa&gt;qry[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt, to;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAXN &lt;&lt; <span class="number">1</span>], ecnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++ecnt].nxt = head[from];</span><br><span class="line">    e[ecnt].to = to;</span><br><span class="line">    head[from] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> d)</span><span class="comment">//现在利用保留的重儿子暴力处理u的所有轻儿子，得到u的答案</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d == <span class="number">1</span>)num[dep[u]].<span class="built_in">insert</span>(a[u]);</span><br><span class="line">    <span class="keyword">if</span> (d == <span class="number">-1</span>)num[dep[u]].<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u] || v == vi)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">cal</span>(v, d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz[u] = <span class="number">1</span>; <span class="keyword">int</span> maxsize = <span class="number">-1</span>;</span><br><span class="line">    dep[u] = dep[f] + <span class="number">1</span>;</span><br><span class="line">    fa[u] = f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == f)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        <span class="keyword">if</span> (sz[v] &gt; maxsize)</span><br><span class="line">            son[u] = v, maxsize = sz[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dsu</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> keep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u] || v == son[u])<span class="keyword">continue</span>;<span class="comment">//先走轻儿子</span></span><br><span class="line">        <span class="built_in">dsu</span>(v, <span class="number">0</span>);<span class="comment">//清空</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (son[u])</span><br><span class="line">        <span class="built_in">dsu</span>(son[u], <span class="number">1</span>);<span class="comment">//保留重儿子信息</span></span><br><span class="line">    vi = son[u];<span class="comment">//标记当前层重儿子</span></span><br><span class="line">    <span class="built_in">cal</span>(u, <span class="number">1</span>);</span><br><span class="line">    vi = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; qry[u].<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> id = qry[u][i].first, k = qry[u][i].second;</span><br><span class="line">        ans[id] = num[k].<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!keep)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cal</span>(u, <span class="number">-1</span>);<span class="comment">//清除</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string s; <span class="keyword">int</span> u; cin &gt;&gt; s; cin &gt;&gt; u;</span><br><span class="line">        <span class="keyword">int</span> col;</span><br><span class="line">        <span class="keyword">auto</span> it = dit.<span class="built_in">find</span>(s);</span><br><span class="line">        <span class="keyword">if</span> (it != dit.<span class="built_in">end</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            col = (*it).second;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            col = ++dtot; dit[s] = dtot;</span><br><span class="line">        &#125;</span><br><span class="line">        a[i] = col;</span><br><span class="line">        <span class="keyword">if</span> (u)</span><br><span class="line">            <span class="built_in">addedge</span>(u, i), <span class="built_in">addedge</span>(i, u);</span><br><span class="line">        <span class="keyword">else</span> rt[++rtot] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= rtot; i++)</span><br><span class="line">        <span class="built_in">dfs</span>(rt[i], <span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v, k; cin &gt;&gt; v &gt;&gt; k;</span><br><span class="line">        qry[v].<span class="built_in">push_back</span>(<span class="built_in">mapa</span>(i, dep[v] + k));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=rtot;i++)</span><br><span class="line">    <span class="built_in">dsu</span>(rt[i], <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>启发式合并</tag>
        <tag>离线</tag>
      </tags>
  </entry>
  <entry>
    <title>树链剖分模板题</title>
    <url>/2022/02/15/luogu3384/</url>
    <content><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3384">题目链接</a></p>
<p>对$n$个点组成的树，根给定，实现以下操作：</p>
<ol>
<li>将树上$x$到$y$的最短路径上的点权加上$z$；</li>
<li>求$x$到$y$的最短路径上的点权之和；</li>
<li>将以$x$为根节点的子树内的所有点权加上$z$；</li>
<li>求以$x$为根的子树点权之和。</li>
</ol>
<span id="more"></span>
<p>首先有dfs序这玩意，可以把树上点的标号放到数组里，并且一棵子树内的dfs序是连续的，对于操作3和4，可以用线段树维护区间加。但是对于操作1和2，x到y的路径上dfs序不一定是连续的。用树链剖分可以把这段不连续的dfs序较好地分割成一段段连续的dfs序（个人理解）。</p>
<h4 id="几个概念">几个概念</h4>
<p><strong>重</strong>（zhong）<strong>儿子</strong>：一个节点的子节点中，sz最大的那个（如果有相同就随意选一个，只能有一个）；<strong>轻儿子</strong>：非重儿子的子节点；<strong>重边</strong>：一个点到它的重儿子的边；<strong>轻边</strong>：一个点到它的轻儿子的边；<strong>重链</strong>：由重边连结形成的链。<strong>链顶</strong>：一条重链中深度最小的节点。</p>
<p>引理1：除了根节点，任何一个节点的父节点都在一条重链上。</p>
<p>证明：父节点有儿子，就一定有重儿子，就在重链上。</p>
<p>从根节点出发dfs，并且先搜重儿子，这样得到的dfs序在一条重链中是连续的，这样链和子树都转换成了序列区间，然后就可以套娃了（一般是套线段树）。</p>
<p>引理2：一条链可以被拆分成不超过$O(\log n)$条重链。</p>
<p>证明：只需证从一个点到根的路径上有不超过$O(\log n)$条重链，由引理1，路径上重链和轻边交错（即轻边连接两条重链），即证不超过$O(\log n)$条轻边。每当走过一条轻边$&lt;u,f&gt;$，$f$的重儿子$sz$一定比$u$大，或者说$sz[fa[u]]&gt;sz[u]*2$。维护一条链的复杂度：$O(\log ^2n)$(线段树维护一个log,log条重链).</p>
<p>因此总复杂度$O(m\log^2n)$.</p>
<h4 id="具体实现">具体实现</h4>
<p>做两遍dfs，第一次dfs把sz,dep,fa,son（重儿子）处理出来，第二次dfs先搜重儿子，再搜轻儿子，把节点所处的链顶top[x]、dfs序dfn、用于线段树维护的dfna处理出来。</p>
<p>对于路径的操作，只要$x$与$y$不在一条重链，就让其中一个往上跳到top，然后跳一次fa，并且是让top深度较大的对应的点往上跳，否则会往上跳过头。直到$x$和$y$跳到一条重链。跳的过程中由于都是在重链上跳，所以dfs序都是连续的，边跳边区修。最后跳到同一条链时再区修一次。区查同理，跳一次查一次。</p>
<p>code</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 400110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> dep[MAXN], sz[MAXN], fa[MAXN], son[MAXN], top[MAXN], dfn[MAXN], dfncnt;</span><br><span class="line">ll w[MAXN],dfna[MAXN];<span class="comment">//线段树维护dfna</span></span><br><span class="line"><span class="keyword">int</span> n, m, r, p;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt, to;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAXN &lt;&lt; <span class="number">1</span>], ecnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++ecnt].nxt = head[from];</span><br><span class="line">    e[ecnt].to = to;</span><br><span class="line">    head[from] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r; ll sum, lazy;</span><br><span class="line">&#125;tr[MAXN * <span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[o].sum = tr[o &lt;&lt; <span class="number">1</span>].sum + tr[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">    <span class="comment">//tr[o].sum %= MOD;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> o, ll val)</span><span class="comment">//单节点加val</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[o].lazy += val; tr[o].lazy %= p;</span><br><span class="line">    tr[o].sum += <span class="number">1LL</span> * (tr[o].r - tr[o].l + <span class="number">1</span>) * val;</span><br><span class="line">    tr[o].sum %= p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//printf(&quot;%d %d\n&quot;, l, r);</span></span><br><span class="line">    tr[o].l = l, tr[o].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[o].sum = dfna[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(o &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">add</span>(o &lt;&lt; <span class="number">1</span>, tr[o].lazy);</span><br><span class="line">    <span class="built_in">add</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, tr[o].lazy);</span><br><span class="line">    tr[o].lazy = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, ll val)</span><span class="comment">//区间加法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[o].l == l &amp;&amp; tr[o].r == r)<span class="built_in">add</span>(o, val);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(o);</span><br><span class="line">        <span class="keyword">int</span> mid = (tr[o].l + tr[o].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (r &lt;= mid)<span class="built_in">update</span>(o &lt;&lt; <span class="number">1</span>, l, r, val);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid)<span class="built_in">update</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, val);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">update</span>(o &lt;&lt; <span class="number">1</span>, l, mid, val);</span><br><span class="line">            <span class="built_in">update</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushup</span>(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qry</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[o].l == l &amp;&amp; tr[o].r == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tr[o].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(o);</span><br><span class="line">    <span class="keyword">int</span> mid = (tr[o].l + tr[o].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">qry</span>(o &lt;&lt; <span class="number">1</span>, l, r, L, R);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">qry</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, L, R);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">return</span></span> (<span class="built_in">qry</span>(o &lt;&lt; <span class="number">1</span>, l, mid, L, R) + <span class="built_in">qry</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R)) % p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz[u] = <span class="number">1</span>; <span class="keyword">int</span> maxsize = <span class="number">-1</span>;</span><br><span class="line">    dep[u] = dep[f] + <span class="number">1</span>; fa[u] = f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == f)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        <span class="keyword">if</span> (sz[v] &gt; maxsize)</span><br><span class="line">            son[u] = v, maxsize = sz[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[u] = ++dfncnt; dfna[dfncnt] = w[u];</span><br><span class="line">    top[u] = tp;</span><br><span class="line">    <span class="keyword">if</span> (!son[u])<span class="keyword">return</span>;<span class="comment">//没儿子</span></span><br><span class="line">    <span class="built_in">dfs2</span>(son[u], tp);<span class="comment">//重儿子</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == son[u] || v == fa[u])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pathadd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    z %= p;</span><br><span class="line">    <span class="keyword">while</span> (top[x] != top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[x]] &lt; dep[top[y]])</span><br><span class="line">            <span class="built_in">swap</span>(x, y);</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">1</span>, dfn[top[x]], dfn[x], z);</span><br><span class="line">        x = fa[top[x]];<span class="comment">//top深度大的往上跳</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &lt; dep[y])<span class="built_in">swap</span>(x, y);<span class="comment">//同一条链</span></span><br><span class="line">    <span class="built_in">update</span>(<span class="number">1</span>, dfn[y], dfn[x], z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">pathqry</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (top[x] != top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[x]] &lt; dep[top[y]])</span><br><span class="line">            <span class="built_in">swap</span>(x, y);</span><br><span class="line">        res += <span class="built_in">qry</span>(<span class="number">1</span>, dfn[top[x]], dfn[x], <span class="number">1</span>, n); res %= p;</span><br><span class="line">        x = fa[top[x]];<span class="comment">//top深度大的往上跳</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &lt; dep[y])<span class="built_in">swap</span>(x, y);<span class="comment">//同一条链,x-&gt;y</span></span><br><span class="line">    res += <span class="built_in">qry</span>(<span class="number">1</span>, dfn[y], dfn[x], <span class="number">1</span>, n); res %= p;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;r, &amp;p);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;w[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="built_in">add</span>(u, v); <span class="built_in">add</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(r, r); <span class="built_in">dfs2</span>(r, r);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> op, x, y, z; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)<span class="comment">//路径加</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line">            <span class="built_in">pathadd</span>(x, y, z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>)<span class="comment">//路径查</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">pathqry</span>(x, y));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>)<span class="comment">//子树加</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;z);</span><br><span class="line">            <span class="built_in">update</span>(<span class="number">1</span>, dfn[x], dfn[x] + sz[x] - <span class="number">1</span>, z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>)<span class="comment">//子树查</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">qry</span>(<span class="number">1</span>, dfn[x], dfn[x] + sz[x] - <span class="number">1</span>, <span class="number">1</span>, n));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;<span class="comment">//scanf(&quot;%d&quot;, &amp;_);//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//printf(&quot;\n&quot;); //fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
</search>
