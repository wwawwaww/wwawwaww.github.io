<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ABC221E LEQ</title>
    <url>/2022/01/11/ABC221E/</url>
    <content><![CDATA[<p><a href="https://atcoder.jp/contests/abc221/tasks/abc221_e">题目链接</a></p>
<p>求长度至少为2且满足首元素小于等于尾元素的子序列个数，对998244353取模。($n\le3\times10^5$)</p>
<span id="more"></span>
<p>固定首元素为$a[i]$，尾元素为$a[j]$,且满足$a[i]\le a[j]$.则中间的数有$2^{j-i-1}$种选择。直接枚举i,j明显会T。加入a[j]后，答案相当于加上了$2^{j-1}\sum\limits_{i&lt;j且a[i]\le a[i]}^{j-1}\frac{1}{2^i}$，容易联想到树状数组可以快速查询序列中比元素小的前缀和，单点加值的时候乘上$2^{-i}$（用逆元），维护这个东西。</p>
<p>还有记得离散化。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 300010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> a[MAXN],aa[MAXN];</span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x, ll n = MOD - <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x %= MOD; ll res = <span class="number">1</span>; <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)res *= x;</span><br><span class="line">        res %= MOD; x *= x; x %= MOD; n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> maxn = MAXN * <span class="number">2</span> - <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> b[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll x, ll k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= maxn; i += i &amp; (-i))</span><br><span class="line">            b[i] += k, b[i] %= MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i -= i &amp; (-i))</span><br><span class="line">            res += b[i], res %= MOD;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;t;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;aa[i]); a[i] = aa[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(aa + <span class="number">1</span>, aa + n + <span class="number">1</span>);<span class="keyword">int</span> nn = <span class="built_in">unique</span>(aa + <span class="number">1</span>, aa + n + <span class="number">1</span>) - aa - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        a[i] = <span class="built_in">lower_bound</span>(aa + <span class="number">1</span>, aa + nn + <span class="number">1</span>, a[i]) - aa;</span><br><span class="line">    ll ans = <span class="number">0</span>; ll inv = <span class="built_in">ksm</span>(<span class="number">2</span>, MOD - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans += t.<span class="built_in">sum</span>(a[i]) * <span class="built_in">ksm</span>(<span class="number">2</span>, i - <span class="number">1</span>); ans %= MOD;</span><br><span class="line">        t.<span class="built_in">add</span>(a[i], <span class="built_in">ksm</span>(inv, i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>; <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);<span class="comment">//fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>ABC230G - GCD Permutation</title>
    <url>/2022/01/07/ABC230G/</url>
    <content><![CDATA[<p><a href="https://atcoder.jp/contests/abc230/tasks/abc230_g">题目链接</a></p>
<p>给定$1\sim n$的排列$p_1,\cdots,p_n$,求$\sum\limits_{i=1}^n\sum\limits_{j=i}^n[\gcd(i,j)\neq1]\cdot[\gcd(p_i,p_j)\neq1].(n\leq2\times10^5)$</p>
<span id="more"></span>
<p>第一个$\gcd$直接上套路，容斥枚举因数:</p>
<p>$\sum\limits_{i=1}^n\sum\limits_{j=i}^n\sum\limits_{d=2}^n[\gcd(i,j)==d]\cdot[\gcd(p_i,p_j)\neq1]=\sum\limits_{d=2}^n\mu(d)\sum\limits_{i=1}^{\lfloor \frac{n}{d}\rfloor}\sum\limits_{j=i}^{\lfloor \frac{n}{d}\rfloor}\cdot[\gcd(p_{id},p_{jd})\neq1].$</p>
<p>对于某个$d$,当$\mu(d)$不为0的时候才会对答案有贡献，此时考虑$1\sim n$内所有$d$的倍数构成的集合$p_{kd}$.计算其$\gcd$不为1的对数，可以再来一波莫比乌斯反演，枚举集合中的因数$x$：</p>
<p>$\sum\limits_{i=1}^{\lfloor \frac{n}{d}\rfloor}\sum\limits_{j=i}^{\lfloor \frac{n}{d}\rfloor}[\gcd(p_{id},p_{jd})\neq1]=\sum\limits_{x=2}^{200000}\mu(x)\sum\limits_{i=1}^{\lfloor \frac{n}{d}\rfloor}\sum\limits_{j=i}^{\lfloor \frac{n}{d}\rfloor}[x|p_{id}][x|p_{jd}]$.</p>
<p>上式第二项即拿出来的集合中，含有因子$x$的所有$p$之间的对的个数。可以开一个map来存当前集合中含有因数$x$的$p$的个数，记为$cnt$,则对的个数为$\frac{cnt(cnt+1)}{2}$.</p>
<p>总复杂度计算：当$\mu(d)\neq0$时，$d$质因数分解后幂次最多取1，而1到200000内$2\times3\times5\times7\times11\times13\times17=510510&gt;200000,$说明质因数分解最多只能有6个质因子。这样的数的个数最多有$2^6-1$.而其中$d=1$时集合大小最大，为$1\sim n$,其因子总数为$\sum\limits_{i=1}^n\frac{n}{i}\approx n\ln n.$</p>
<p>总复杂度为$O(63n\ln n),$实际常数偏小，可以通过。</p>
<p>AC代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 200010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> a[MAXN], mu[MAXN], pri[MAXN], vis[MAXN], tot, n;</span><br><span class="line"> vector&lt;<span class="keyword">int</span>&gt;d[MAXN], tmp;</span><br><span class="line">map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;mp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i])</span><br><span class="line">            mu[i] = <span class="number">-1</span>, pri[++tot] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot &amp;&amp; i * pri[j] &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i * pri[j]] = <span class="number">1</span>; <span class="comment">//minf[i * pri[j]] = pri[j];</span></span><br><span class="line">            <span class="keyword">if</span> (i % pri[j] == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> mu[i * pri[j]] = -mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mu[i])</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j += i)d[j].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//题解里说的2*3*5*7*11*13*17是因为mu[b]!=0所以分解之后次幂最多取1.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mp.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += x)<span class="comment">//固定x,p的因数统统扔进map</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it : d[a[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            mp[it]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : mp)</span><br><span class="line">    &#123;</span><br><span class="line">        res += <span class="number">1LL</span> * mu[it.first] * it.second * (it.second + <span class="number">1</span>) / <span class="number">2</span>;<span class="comment">//再反演</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n); <span class="built_in">init</span>(n+<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)<span class="comment">//枚举外层因数i</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mu[i])</span><br><span class="line">        ans += <span class="number">1LL</span>*mu[i] * <span class="built_in">calc</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>; <span class="comment">///scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);<span class="comment">//fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title>2022暑假前集训 图论</title>
    <url>/2022/04/24/2022pre-summer-graph/</url>
    <content><![CDATA[<p><a href="http://121-48-165-90.vpn.uestc.edu.cn:8118/contest/170/summary">题目链接</a></p>
<p>copy到这里一份</p>
<p>公式显示不想改了，marrkdown是正常的但是网页渲染就是有小问题</p>
<span id="more"></span>
<p>[toc]</p>
<h2 id="A-蜘蛛的网">A  蜘蛛的网</h2>
<p>题意：给一个图，求至少要删掉多少条边使其不连通。$n\le 300,m\le 1000.$</p>
<p>Tag：全局最小割、Stoer-Wagner</p>
<p>题解：</p>
<p>​	如果图本来就不连通答案就是0；否则一定是有两个非空连通块，记为$L,R$.因此考虑转化为最小割。由最大流最小割定理，最大流等于最小割。假设删边的集合为$E$，任取一点$u\in L$,则至少存在一个点$v\in R$时$mincut(u,v)=E$.固定$u=1,v$取遍2到$n$跑Dinic最大流，取最小值即可。</p>
<p>​	Dinic算法的过程：不断增广，先BFS给残留网络标号，然后DFS只走相邻层级的边，直到整个网络无法增广为止。时间复杂度：由于边权都为1，一次Dinic复杂度为$O(m\cdot\min(n^{\frac{2}{3}},\sqrt{m}))$.总复杂度$O(nm\cdot\min(n^{\frac{2}{3}},\sqrt{m}))=O(\min(n^{\frac{5}{3}},nm\sqrt{m})).$</p>
<p>​	也可以用专门解决该问题的Stoer-Wagner算法来解决。<s>但是有Dinic板子就不用学了</s></p>
<h2 id="B-土豆的图">B 土豆的图</h2>
<p>题意：给一张无向连通图，每个点有点权$c_i$，每条边有边权$w_i$。一条$u$到$v$的路径的权值为经过的边里面的最大权值。定义$d(u,v)$为节点$u$到$v$的所有路径中，路径权值的最小值。求所有满足$|c_u-c_v|\ge L$的无序点对$(u,v)$的$d(u,v)$之和。$n\le2\times10^5,m\le5\times10^5,0\le c_i,L\le10^9,0\le w\le10^8$.</p>
<p>Tag：最小瓶颈路、Kruskal重构树、树状数组</p>
<p>题解：</p>
<p>​	可以证明，一条最小瓶颈路的最小权值就是最小生成树上两点的距离。证明：反证法。考虑所有非树边，如果加入一条非树边后瓶颈边变小，那么用瓶颈边换掉最小生成树的边会得到更小的生成树，矛盾。</p>
<p>​	此时可以引入<strong>Kruskal重构树</strong>。即用Kruskal的方法求最小生成树（下文称为MST）。每将一条边权为$w$的边连接的两个连通块合并的时候就新建一个节点，把两个连通块并查集祖先节点连向这个新的节点，并为其赋点权$w$.这棵树就是Kruskal重构树。性质：</p>
<ol>
<li>重构树是由$2n-1$个节点构成的二叉树，而且满足大根堆的性质，叶子为原图中的节点；</li>
<li>原图中两点$u,v$路径中的$d(u,v)$就是$val(lca(u,v)).$</li>
</ol>
<p>​	因此，建好树后可以枚举LCA连接的两个连通块中满足要求的点对个数。我们枚举size小的那棵子树中的所有点$u$在另一棵子树中有多少个满足要求的$v$，等价于dfs序在另一棵子树的区间，且$c_v\ge c_u+L$或$c_v\le c_u-L$的点的个数。是二维数点问题。可以用离线BIT做，把询问拆成前缀和的形式离线存好。按$dfs$从小排序（表示时间，修改在询问之前），再将第二维单点修改$c_v$和询问$c_v+L,c_v-L$离散化。</p>
<p>​	要注意$L=0$的情况，此时询问区间为$[-inf,inf]$而不是离散化之后的$[-inf,c_v-L]$加上$[c_v+L,inf]$，因为会多算一次。时间复杂度$O(m\log m+n\log^2 n)$，其中第一项为求最小生成树对边排序。启发式合并一共产生$O(n\log n)$次询问，对询问排序$O(n\log n\log(n\log n))\approx O(n\log^2n)$。</p>
<h2 id="C-魔法少女">C  魔法少女</h2>
<p>题意：给定一个$n\times m$的网格图，每个位置有一个传送门，传送门只有两种方向。求最少要改变多少个传送门的方向使得左上角和右下角连通。$n,m\le 500$.</p>
<p>Tag：最短路</p>
<p>题解：</p>
<p>​	建图方式：管道连接的两端连权值为0的边，其余两端连权值为1的边。跑最短路即可。如果$n,m$奇偶性相同最短路一定存在，否则可以提前判断无解。</p>
<p>​	注意到边权只有0和1，可以把Dijkstra的优先队列换成双端队列。拓展到0时插到队列前面，否则插到队列后面，每次从队列前面pop。出队之后再标记vis数组防止遗漏。时间复杂度$O(nm)$.</p>
<h2 id="D-顶点游走">D 顶点游走</h2>
<p>题意：给定$n$个点$m$条边的有向图。开始时在1号节点，要走到$n$号节点。只有当过边的数量不小于$d_{c_i}$时才能走这条边，其中$c_i$为等级。问最少要走多少条边，或判断无法到达。$2\le n\le 180,1\le c\le50,0\le d_i\le d_{i+1}\le 10^9$.</p>
<p>Tag：Floyd、矩阵快速幂、bitset</p>
<p>题解：</p>
<p>​	用矩阵$f=[f_1,f_2,\cdots,f_n]$表示当前时刻是否能够到达$1,2,\cdots,n$号节点。初始时$f=[1,0,\cdots,0]$.每走一步，就令$f=f*F$。其中$F$为当前哪些边能走的邻接矩阵。但是$d$高达$10^9$，朴素转移的话无法通过。</p>
<p>​	但是边的种类数只有50种，可以按边的种类划分不同的阶段。在一个阶段内的$F$是相同的。又注意到在一个阶段内，到达$n$最多走$n-1$步。令矩阵$G=F+I$，$I$为单位矩阵，表示一个点的可达状态可以继承。令$vis=f$（因为我们不能修改$f$，后面可能用到），然后用$vis=vis*G$。每乘一次判一下$vis[1][n]$是否为1。如果为1，u说明当前走的轮数是最少的，得到答案。否则在$n-1$次转移后都到不了，就用$F$转移$f$。$f = f * F^{d[x] - d[x - 1]}$,$x$为当前轮数。</p>
<p>​	如果所有边都解锁了还是到不了，就输出-1。时间复杂度$O(n^3c\log d)$过不了，用bitset优化矩阵乘法后变为$O(\frac{n^3c\log d}{w})$.<s>相信Lutece即可。</s></p>
<h2 id="E-修道路">E 修道路</h2>
<p>题意：给定一个$n$个点$m$条边的无向连通图，每个点都有点权$w_i$。$q$次询问$p_1,p_2,\cdots,p_q$。询问从1号点到$p_i$号节点的简单路径上经过的点的点权最小值。$n\le 10^5,m\le2\times10^5,q\le10^6,w_i\le10^9$.</p>
<p>Tag：Tarjan、圆方树</p>
<p>题解：</p>
<p>​	如果原图为树，直接dfs一遍即可。然后可以发现一条路径上经过的点只可能为经过点双上的点。每当我们进入一个点双，我们总有办法经过其中的点权最小的点并从计划的位置出来。想到tarjan建圆方树。对于一个点双，新建一个方点连接这个点双的所有点，方点点权赋值为所有连接的圆点的点权最小值。这样得到的树中，原图中非割点只连一个方点，割点连多个方点。树的大小为$O(n)$.</p>
<p>​	在圆方树上dfs一遍即可。时间复杂度：$O(n+m)$.</p>
<h2 id="F-开会了">F 开会了</h2>
<p>题意：给$m$组形如$a_u-a_v\le w_i$的不等式，询问是否有解。$1\le n,m\le5\times10^3,|w|\le10^4$</p>
<p>Tag：差分约束</p>
<p>题解：</p>
<p>​	最直观的想法是直接代入。如果刚好能消掉未知数肯定有解。但其他情况不太好讨论。转为图论模型。</p>
<p>​	$a_u-a_v\le w_i$（等价于$a_u\le w_i+a_v$）对应着图中$v-&gt;u$的一条边权为$w_i$的有向边。这个形式很像最短路。又注意到如果$(a_1,a_2,\cdots,a_n)$如果是原不等式组的一组解，$(a_1+C,a_2+C,\cdots,a_n+C)$也是。故可以令$a_1=0$跑以1号点为起点的最短路。如果最短路存在解就存在（显然）。逆命题也成立。证明：如果不存在最短路，等价于有负环，那么从环上走一圈下来得到$0&lt;\sum_{负环} w&lt;0$,矛盾。</p>
<p>​	因此只需判是否存在负环。用Bellman-Ford算法判。对于一个由$n$个点构成的图，如果一个点入队$n-1$次就说明有负环。为确保连通性，多加一个0号节点向1~n每个节点连权为0的有向边。入队次数若达到$n$就输出No.</p>
<p>​	时间复杂度$O(nm)$.</p>
<p>​</p>
<h2 id="G-二分图匹配">G 二分图匹配</h2>
<p>题意：给三组点$a_1,a_2,\cdots,a_n;b_1,b_2,\cdots,b_n;c_1,c_2,\cdots,c_n$.现在你要在$a,b$两组点中选出$n$对匹配得到一组新的点集$d_1,d_2,\cdots,d_n$.其中$d_i$为第$i$组匹配点的$a,b$之和。然后点集$d$将与点集$c$随机匹配，若$d_i&gt;c_i$，则获得$w_i$的得分。求得分期望的最大值乘以$n$的结果。$n\le400,a_i,b_i,c_i\le10^{18},w_i\le10000$.</p>
<p>Tag：二分图带权匹配、KM</p>
<p>题解：</p>
<p>​	考虑已经有一组$d$如何计算期望。每个$d_i$都将等可能地与$c_1,c_2,\cdots,c_n$配对，若$d_i&gt;c_j$则获得$w_j$分。故$d_i$对期望的贡献为<br>
$$<br>
\sum_{1\le k\le n,c_k&lt;d_i}\frac{w_k}{n}<br>
$$<br>
而$d_i$又是由连接的$a,b$所决定，定义$w’(i,j)=\sum_\limits{k=1}^n[a_i+b_j&gt;c_k]\cdot w_k$，问题就等价于求以$w’$为权值的二分图最大权完美匹配。先介绍几个概念：</p>
<ul>
<li>顶标：二分图上每个点上的点权</li>
<li>可行顶标：对二分图上所有边$w(u,v)\le l(u)+l(v)$都成立的一组顶标$l$。</li>
<li>相等子图：原图的一个子图，只包含$w(u,v)=l(u)+l(v)$的边和点。</li>
</ul>
<p>有以下定理：对于某组可行顶标，如果其相等子图存在完美匹配，那么，该匹配就是原二分图的最大权完美匹配。</p>
<p>证明：考虑二分图任意一组完美匹配$M$的边权和为$val(M)=\sum_{(u,v)\in M}w(u,v)\le \sum_{(u,v)\in M}l(u)+l(v)\le\sum_{i}l(i)=val(M’)。M’$为最大权完美匹配。问题转化为找到一组可行顶标。KM算法的思想为贪心地调整顶标，使相等子图不断扩大至原图为止。下文会先讲解DFS版本的KM，分析DFS版的KM为什么会被卡，再介绍BFS版本的KM。</p>
<p>​	记左部图为$X$，右部图为$Y$，左部图中点$i$的顶标为$lx(i)$，右部图为$ly(i)$。先随意但又不是那么随意地分配顶标：令$lx(i)=\max{w(i,j)},ly(i)=0.$</p>
<p>​	然后从$X$中选一个未匹配点，像匈牙利一样求增广路，只有当$w(u,v)=lx(u)+ly(v)$时才认为这条边存在。若找到增广路就增广，否则，会得到交错树。记交错树的点在$X,Y$中的点集分别为$S,T.$记$S’=X-S,T’=Y-T.$有：</p>
<ul>
<li>
<p>$S-T’$的边不存在，否则交错树会增长；</p>
</li>
<li>
<p>$S’-T$一定是非匹配边，否则边的点会属于$S$。</p>
</li>
</ul>
<p>​	考虑到上一次找不下去是因为顶标设置不合理导致的，具体的说是$S$中的顶标大了。故调整$S$中所有顶标$-d$,$T$中所有顶标$+d$，带来的影响有：</p>
<ul>
<li>
<p>$S-T$的已有的边依然存在于相等子图中；</p>
</li>
<li>
<p>$S’-T$还是没有边；</p>
</li>
<li>
<p>$S-T’$的$lx+ly$减少，可能扩大相等子图；</p>
</li>
<li>
<p>$S’-T$的$lx+ly$增加，不会扩大相等子图。</p>
</li>
</ul>
<p>​	要想拓展出一条$S-T’$的边，$d$就要取不小于$\min{lx(u)+ly(v)-w(u,v)|u\in S,v\in T’}$.根据贪心，应该取等。同时我们在$T$维护一个$slack$数组，$slack(v)=\min{lx(u)+ly(v)-w(u,v)|u\in S}$.当本轮匹配失败时，在所有的$slack$中取最小（还是贪心），改变$S,T$中顶标。</p>
<p>​	DFS版本的问题在于每次调整完定标后又重新匹配，一次$dfs$是$O(n^2)$，扩大相等子图最多进行$O(n^2)$次，最坏情况为$O(n^4)$.我们可以维护一下上一次的状态。在每次扩大子图后，都记录新加入的边提供的新的増广方向，然后从此处继续寻找増广路即可。具体而言维护一个pre数组表示$Y$中匹配的前驱。左边最多进行$n$轮BFS，1轮BFS为$O(n^2)$，总复杂度$O(n^3)$.</p>
<h2 id="H-守护最好的-0">H  守护最好的 0</h2>
<p>题意：给一张简单无向连通图，点有点权$a_i$，一个连通块的贡献为$(-1)^{连通块大小}\times\sum_{i\in连通块}a_i$，可以任意删除原图中的一些边，求连通块贡献之和的最大值。多测。$2\le n\le10^6,n-1\le m\le 10^6,1\le a_i\le10^9,\sum_{T}n\le 10^6,\sum_{T}\le 2\times 10^6.$</p>
<p>Tag：tarjan、点双</p>
<p>​	当$n$为偶数时不删点是最优的；当$n$为奇数时，有一个结论：最多删除一个点是最优的。</p>
<p>​	如果删去的点是非割点，其余部分的连通性不变，答案为$\sum_\limits{i=1}^n a_i-\min{a_i|i不是割点}$；如果删去的点$u$是割点，那么会形成若干连通块。若$a_u\ge\min{a_i|i不是割点}$答案不会变优，故以下讨论$a_u&lt;\min{a_i|i不是割点}$。</p>
<p>​	如果删去$u$形成的连通块存在奇数大小的块，奇数大小的块的个数至少为2。奇数大小的块中必定存在$v$使得$a_u&lt;\min{a_i|i不是割点}\le a_i(i不是割点)$，不会变优。只有当连通块大小都为偶数时才可能更优。</p>
<p>​	于是跑一边tarjan，找割点，求$\min{a_i|i不是割点}$，第二遍tarjan的时候如果满足dfn[u]&lt;low[v]，说明找到了删掉$u$之后的一个以$v$为子树的连通块。最后根据连通块大小来决定是否用割点更新答案。</p>
<p>​	证明：</p>
<p>​	首先可以证明，答案一定是一些孤立点组成，即最后分成的若干连通块中没有点数大于等于3的奇数连通块。否则，可以在这些个奇数连通块上再割下一个非割点，使答案变大。而且只可能删奇数个割点。</p>
<p>​	如果删超过一个点，因为一个割点在至少两个方向上有割点，但是孤立点必为叶子，不满足两个方向上都有割点。所以只可能删一个割点。</p>
<p>​	有一发提交多测没清空割点iscut也过了，建议加强一下数据。</p>
<p>时间复杂度$O(n+m)$.</p>
<h2 id="I又开会了">I	又开会了</h2>
<p>题意：有$n$个取值只能为0或1的变量和$m$个形如$a_u=x\or a_v=y$的约束条件，问是否同时满足这些约束。$n,m\le10^5$.</p>
<p>Tag：2-Sat</p>
<p>​	<s>板子题，只要有tarjan强连通板子并正确建图即可</s></p>
<p>​	可以把一个变量$i$拆成两个点$2<em>i,2</em>i+1$（也可以拆成$i,i+n$，看个人喜好），表示$a_i$取值0或1。对于一个形如题中给的约束条件，等效于$a_u=\neg x\Rightarrow a_v=y,a_v=\neg y\Rightarrow a_u=x$。我们在拆点后的图中连两条边表示这种推出关系。最后跑一边tarjan判断$2<em>i$与$2</em>i+1$是否在同一个强联通分量中，如果在则出现矛盾，否则可以拓扑排序逆序选点构造一组解~~（但是Lutece没有spj）~~。</p>
<h2 id="J-tarjan">J tarjan</h2>
<p>题意：给你一个$n$个点，$m$条边的无向图简单图。求割点数量，割边数量，极大点双连通分量数量，极大点双连通分量包含边数的最大值。</p>
<p>Tag：tarjan板子</p>
<p>​	定义dfn[u]为搜索树访问到u的时间戳，low[u]为最早追溯值，定义为以下节点dfn的最小值：</p>
<p>1.子树中的点；2.子树中的点通过一条不在搜索树上的边能够到达的节点。</p>
<p>更新low的方法：子树取min(low[u],low[v])，非树边取min(low[u],dfn[v])。注意不要取到父亲。</p>
<p>割边判定法则：边(u,v)是割边当且仅当dfn[u]&lt;low[v]。</p>
<p>割点判定法则：点u是割点当且仅当：u不是根且v是u子树中一点且dfn[u] &lt;= low[v]；或u是根且存在两个v满足dfn[u] &lt;= low[v]。</p>
<p>​	求出一个割点就对应一个极大点双，我们可以维护一个栈，当用v判断到u是割点时把v之前的点出栈，这些点构成一个点双。</p>
<p>​	但是要求点双中的边怎么办呢？一种方法是可以把点栈改为边栈（开集训之前交过集训里面忘交这个版本的了），出栈出到栈顶的边连接的两端其一为$u,v$就停止。另一种方法是仍然用点栈，记录每个点属于哪个点双。当然割点是可以属于多个点双的，所以每得到一个点双我们就及时dfs子树一次，找其中的满足两个端点都属于当前点双计数器的边。</p>
<h2 id="K-居民们都住在房屋里">K 居民们都住在房屋里</h2>
<p>题意：给一棵树，边权为1，多次询问两点间的路径长度。</p>
<p>Tag：最近公共祖先</p>
<p>​	$u,v$两点之间的答案为$dep(u)+dep(v)-2*dep(lca(u,v))$.求LCA最常用的两种方法是倍增和树链剖分。倍增法预处理出每个节点的$2^i$级祖先和深度$dep$，然后通过二进制划分把深度大的往上跳至同一深度，在通过二进制划分跳。如果跳了之后两节点不同就跳，否则缩小步长。最后再跳一次。</p>
<p>​	树链剖分通过对树上轻重链的划分，维护出每个节点的链顶top，深度dep。剖法具体不再赘述。求LCA时将top深度大的节点u跳到fa[top[u]]，直到两者在同一条链上，此时两节点中深度小的为答案。两者单次询问复杂度都为$O(\log n)$，但一般来说树剖的常数小一些。</p>
<h2 id="L-最小生成树">L 最小生成树</h2>
<p>题意：无向图最小生成树计数。$1\le n\le100,1\le m\le1000,1\le w\le10$.</p>
<p>Tag：矩阵树定理</p>
<p>​	首先要知道矩阵树定理可以求生成树个数。如果有一条无向边$(u,v)$度数矩阵$D[u][u]++,D[v][v]++$，邻接矩阵$A[u][v]++,A[v][u]++$.基尔霍夫矩阵$K=D-A$.$K$的主对角线任意一个元素的代数余子式就是生成树的个数。</p>
<p>​	按照Kruskal求最小生成树的过程，可以发现所有最小生成树中所有边边权构成的集合是一样的。换句话说，在原图中选相同边权的边的顺序和方式不同，对于最终的最小生成树来说，连通性不会变。因此可以按边权分阶段计数。</p>
<p>对于某一种边权，如果它在最小生成树(MST)中不存在则跳过，否则把当前该边权的的边在MST中都断掉（重新建图），此时有若干连通块。将其缩点（用并查集）。在把原图中所有该边权的边加入缩点后的图跑矩阵树定理，最后把答案相乘。求行列式时用辗转相除，注意模数。</p>
<p>复杂度$O(m\log m+n^3w)$</p>
<h2 id="M-刺杀卷卷国王">M  刺杀卷卷国王</h2>
<p>题意：求从起点$1$到$n$的非严格大$k$短路长度，可以重复走边和点。$n\le5000,m\le 200000,k\le500000,w\le 1000$.</p>
<p>Tag：可持久化可并堆</p>
<p>​	查阅资料可以知道，有环的情况下A*会被卡到$O(kn)$，不能用。</p>
<p>​	可以按顺序求次短路，3短路，4短路，……，$k$短路。考虑最短路和次短路的关系：我们将原图的边反向之后建以$n$为根的最短路树（最短路可能不唯一，但是一定要确定一棵最短路树），从$1$到$n$的路径上可以有树边和非树边。多走的路来自于非树边。走一条非树边$e=&lt;u,v&gt;$的增量$\Delta e=dis(u)-dis(v)+w(u,v).$一条路径上所有非树边增量之和与路径长度的对应关系为$dis(1)+\sum\Delta e=$路径长度，且对应关系是唯一的。所以问题等价于找第$k$小的非树边序列之和。</p>
<p>​	这个序列要满足：相邻两条边后一条边起点是前一条边的终点的祖先（最短路树中）。</p>
<p>​	考虑如何从小到大生成这样的边序列$S$。开始时序列为空（即最短路）。有两种方式得到新的序列：</p>
<ol>
<li>替换$S$中最后一条边为$\Delta e$刚好更大的边；</li>
<li>在$S$中加入一条新边，新边需满足起点是原序列$S$末尾的边的终点的祖先。</li>
</ol>
<p>可以在每个点建一个从该点出发的非树边的堆，两种拓展方式变为：</p>
<ol>
<li>替换$S$中最后一条边为起点的堆堆顶的左右儿子；</li>
<li>在$S$中加入一条新边，接上新边起点对应的堆顶节点对应的边。</li>
</ol>
<p>瓶颈在于操作二，需合并一个点所有祖先的堆。暴力合并复杂度$O(nm)$。需要部分可持久化（只支持查询历史版本，但不支持修改），即可持久化左偏树。</p>
<p>​	左偏树的左偏性质可以保证单词合并复杂度为$O(\log n)$，可持久化左偏树即每次合并时新建一个节点（类似主席树吧），然后对原图每个节点维护一个rt，表示其在左偏树中根的位置。</p>
<p>​	先把所有非树边丢进各自节点的堆中，再沿着最短路树合并堆。全局再维护一个优先队列，类型为pair&lt;long long,int&gt;。第一维是k短路长度，第二维是边的终点。取出$k-1$次即可。</p>
<p>​	复杂度：$O((n+m)\log m+k\log k)$.最短路$O(m\log m)$，合并堆$O(n\log m)$，全局优先队列$O(k\log k)$.</p>
<h2 id="N-摆摆国的道路修复">N 摆摆国的道路修复</h2>
<p>题意：最小直径生成树。$n\le 500,n-1\le m\le \frac{n(n-1)}{2},1\le val\le10^9$.</p>
<p>Tag：最小直径生成树。</p>
<p>​	定义图的绝对中心为图中的一个点，到图中最远的节点的距离最小。显然至少有两个点到绝对中心距离最远。</p>
<p>​	假设绝对中心$c$在某条边权为$w$的边$(u,v)$上，且$d(u,c)=x(0\le x\le w)$.则图中任意一点到绝对中心的距离$d(i,c)=\min(d(u,i)+x,d(v,i)+w-x).$可以画出$x$改变对应$d(i,c)$的图像，为折线。$x=0$时，$d(i,c)=d(u,i)$；$x=w$时$d(i,c)=d(v,i)$。对于图中所有节点，最远距离的函数就是这些折线取max。要使最远距离最小就是要找最小的$y$坐标。</p>
<p>​	有两种可能：1.绝对中心在点上。枚举所有点作为绝对中心，可得固定起点到其他点的距离最大值$rk[n]$（预处理出），用$ans\leftarrow min(ans,2*rk[n])$更新。2.绝对中心在某条边上。枚举所有边。找折线图纵坐标最小的交点。设当前边为$w(u,v)$。若$d(u,i)\le d(u,i’)$且$d(v,i)\le d(v,i’)$就说明$i’$这个节点的折线完全比$i$矮，没用。所以所有折线按左端点从大到小排序，只有当右端点跨过之前的最大值$d(v,mapos)$时才可能更新答案。解如下方程得到交点$(x,y)$：<br>
$$<br>
dis(u,now)+x=-x+w+d(v,mapos)\Rightarrow x=\frac{w+d(v,mapos)-dis(u,now)}{2}<br>
$$</p>
<p>$$<br>
\Rightarrow y=\frac{w+d(v,mapos)+dis(u,now)}{2}.d=2y=w+d(v,mapos)+dis(u,now)<br>
$$</p>
<p>取min更新答案。</p>
<p>$d$数组和$rk$数组可以Floyd预处理出来。时间复杂度：$O(n^3+n^2\log n+n+mn)=O(n^3+mn).$</p>
<h2 id="O-纯白色的少年郎，如今只身在何方">O  纯白色的少年郎，如今只身在何方</h2>
<p>题意：一张有向图（边权非负），求单源最短距离。$n\le 10^5,m\le 2\times 10^5,0\le w\le 10^9$。</p>
<p>Tag：Dijkstra</p>
<p>最方便的写法就是用优先队列维护pair&lt;ll,int&gt;了吧，然后重载一下优先队列。初始化距离表为很大的数，再把起点距离值设为0。每次取优先队列中距离最小的点出来更新别人。能更新最小距离的就push。注意开long long。复杂度$O(m\log m)$.</p>
<h2 id="P-哈密顿回路">P 哈密顿回路</h2>
<p>题意：给$n\times m$的网格图，其中有一些特殊方块，方格之间边有边权。求从左上角出发形成的回路把所有特殊方格包含进回路的最小代价。$1\le n,m\le400,w_i\le 10^9$.</p>
<p>Tag：最短路</p>
<p>​	有一个性质，被包围的区域一定包含了从左上角到各个特殊点左上角的最短路。证明：若不然，可以扩大包围区域不使答案更劣。所以回路不能切断这些最短路。</p>
<p>​	拆点。除了左上角，每个角点拆成左上，左下，右上，右下四个点。如果有最短路将两点隔开就不连，如果点在特殊点内部也不连（你必须把它围住），否则拆好的点之间连边权为0的边。具体方式为先在原图中对特殊点建最短路树，给每条边打标记代表能不能跨过，特殊方格对应的拆点后的四个点直接ban。然后按原图的边连，最后在把边界连接好。</p>
<p>​	最后跑从0号点（原图左上角）的右上到左下的最短路就行。</p>
<p>复杂度$O(nm\log(nm))$</p>
<h2 id="Q-建设道路">Q  建设道路</h2>
<p>给一张$n$个点构成的无向完全图和参数$D,A_1,A_2,\cdots,A_n$，$i,j$之间的边权为$|i-j|\times D+A_i+A_j$，求最小生成树。$n\le 10^5,1\le D,A_i\le 10^9$.</p>
<p>Tag：点分治</p>
<p>显然边数是$O(n^2)$的，暴力做不了。可以考虑哪些边是一定不会连的。</p>
<p>假设当前有两个集合$L,R$，$L$在$R$的左边。我们在$L,R$之间连边，可以去掉绝对值。令左半部分$B_i=A_i-i<em>D$，右半部分$B_j=A_j+j</em>D$。选择$L$中$B_i$最小的向$R$所有点连边，$R$中同理。$L,R$之间的其余边都不可能成为答案。假设包含了边$CD$，且$C,D$都不等于各自集合中的最小值$A,B$考虑回路$C-B-A-D-C$,$CD$一定会严格大于这个回路的其他边，因此会被替代。</p>
<p>复杂度$O(n\log^2n)$。分治$\log n$层，一层为$O(n\log n)$。</p>
<h2 id="R-建设道路2">R 建设道路2</h2>
<p>题意：最小树形图（指定根的有向最小生成树）。$n\le100,m\le 1000,w\le10^6$.</p>
<p>Tag：最小树形图、朱刘算法</p>
<p>​	朱刘算法过程如下：</p>
<ol>
<li>对每个点，选择其边权最小的入边；</li>
<li>判断是否有环。如果没环，就等价于形成了最小树形图，结束；否则要缩环为一个点，改变边权后返回1。</li>
</ol>
<p>​	考虑缩环带来的影响：环的出边不会被影响，环的入边需要减去原有入边的权值，因为换掉这条入边之后可以从环中到达环内所有点。</p>
<p>复杂度：最多进行$O(n)$次缩环，缩环后要$O(m)$更新最小入边，故总复杂度$O(nm)$.</p>
<h2 id="S-合作共赢">S 合作共赢</h2>
<p>题意：一般图最大匹配。$n\le500,m\le124750$.</p>
<p>Tag：带花树</p>
<p>一般图和二分图最大的区别在于奇环。带花树的核心还是找增广路，可以说带花树=匈牙利BFS版本+处理奇环。</p>
<p>先考虑最简单的情况及不存在环套环，可以发现奇环内至少有一个点无法匹配。我们将点交叉黑白染色，开始染色的为黑点。如果是未匹配点就路径取反增广；如果是匹配点或在同一个环中就跳过；否则遇到奇环，即黑点x碰到黑点y。此时要缩花，找到用pre和match共同作用下找到花根LCA，用把x,y连起来，再用pre和match把pre反向改回去，同时修改并查集使它们在一起。</p>
<h2 id="T-我彻底理解了V圈！">T  我彻底理解了V圈！</h2>
<p>题意：求DAG的最小路径覆盖。$n\le200,m\le 6000$.</p>
<p>Tag：二分图最大匹配</p>
<p>先说结论，答案为$n-$二分图最大匹配。由于每个点至多有一条出边和一条入边，可以按出入点建二分图。对于原图中一条有向边$&lt;u,v&gt;$，连两条边：$&lt;u,v+n&gt;,&lt;u+n,v&gt;$。最后把小于等于n的连原点，大于n的连汇点跑最大流即可。</p>
<p>结论的证明：因为最小路径覆盖的边在拆点后的二分图中构成一组匹配。”路径条数最少”等价于二分图左端非匹配点最少，也等价于匹配数最多。</p>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
  </entry>
  <entry>
    <title>ABC235D,E</title>
    <url>/2022/01/16/ABC235-D,E/</url>
    <content><![CDATA[<p><a href="https://atcoder.jp/contests/abc235/tasks">题目链接</a></p>
<span id="more"></span>
<p>（最近打Atcoder越来越铸币了）</p>
<p><strong>D - Multiply and Rotate</strong></p>
<p>题意：给定$a,n,2\le a\le 10^6,1\le n\le 10^6$,可以对一个数$x$进行以下操作：</p>
<p>1.用$x\cdot a$替换$x$;</p>
<p>2.将$x$的十进制表示转化为字符，如果最后一位不是0，将其循环右移一位。</p>
<p>问：从1开始，至少经过多少次操作能把数变成$n$.如果不能，输出<code>-1</code>.</p>
<p>分析：如果从1出发BFS，如果答案不存在会做很多无用功，所以考虑逆着找，考虑把$n$变为1的最少次数，这样除法只有当$x$被$n$整除时才能继续搜；循环右移要变成循环左移，什么时候可以循环左移呢，次高位不为0的时候。（因为这个WA了好多次）</p>
<p>比赛时写的丑陋代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1e9</span>;</span><br><span class="line">ll a, n;</span><br><span class="line"><span class="keyword">int</span> dp[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shiftr</span><span class="params">(<span class="keyword">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll tmp = now, pw = <span class="number">0</span>; ll ttt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tmp)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp /= <span class="number">10</span>; pw++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> r = now % <span class="number">10</span>;</span><br><span class="line">    now /= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (r == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> now + r * ttt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shiftl</span><span class="params">(<span class="keyword">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll tmp = now, pw = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (tmp&gt;=<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp /= <span class="number">10</span>; pw++;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ttt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= pw; i++)ttt *= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> l = now % ttt; ll tmp2 = l;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; pw; i++)</span><br><span class="line">        tmp2 /= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (tmp == <span class="number">0</span>||tmp2==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> l*<span class="number">10</span>+tmp;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(ll val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;pa&gt;q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">mapa</span>(<span class="number">0</span>,n));</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        pa pp = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        val = pp.second;</span><br><span class="line">        <span class="comment">//dp[val] = pp.first;</span></span><br><span class="line">        ll tmp = val, pw = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (tmp)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp /= <span class="number">10</span>; pw++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//printf(&quot;%d %d\n&quot;, pp.first, pp.second);</span></span><br><span class="line">        <span class="keyword">if</span> (pp.second == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res = <span class="built_in">min</span>(res, pp.first);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= pw; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (val % a == <span class="number">0</span>&amp;&amp;dp[val/a]&gt;pp.first+<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">mapa</span>(pp.first + i, val / a));</span><br><span class="line">                dp[val / a] = pp.first + <span class="number">1</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">if</span> (pp.first + i &lt; dp[val])</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">mapa</span>(pp.first + i, val));</span><br><span class="line">                dp[val] = pp.first + i;</span><br><span class="line">            &#125;</span><br><span class="line">            val = <span class="built_in">shiftl</span>(val);</span><br><span class="line">            <span class="keyword">if</span> (val == <span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;a, &amp;n);</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x3f3f3f3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dp));</span><br><span class="line">    res=<span class="built_in">bfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//printf(&quot;%d\n&quot;, shiftr(1024));</span></span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">1e9</span>)res = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;<span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);<span class="comment">//fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>E - MST + 1</strong></p>
<p>题意：给n个点，m条有权边$c_i$，q个独立询问，$(n,m,q\le 2\times10^5)$,每个询问给出一条边$(u_i,v_i,w_i)$,问在原图中加入新边后得到的图的最小生成树是否包含这条边，每个$w_i,c_i$都互不相同。</p>
<p>自己的巨大多复杂想法：</p>
<p>先求原图的最小生成树（贪心+并查集做法），此时若继续加边则会成环，由贪心可证新图的最小生成树要么不变，要么只会变一条边，也易知新图的最小生成树就是环中删掉一条最大边。用LCA判断$u_i$到$lca$和$v_i$到$lca$的路径上最大的边是否比$w_i$大，如果大就说明答案是<code>Yes</code>,否则是<code>No</code>.类似维护区间$max$，类似st表做法树上倍增求即可，询问时取区间并，但是右区间的左端点不能由lca直接减得到，还是得用求lca时的倍增往上跳。复杂度大概是$O(n\log^2n+q\log n+m\log m)$.</p>
<p>（当时脑抽想成$min$，改过来后st表询问取min忘记改成max了，WA了7发）</p>
<p>正解：考虑原图和所有询问的边，按Kruscal做法，当处理到询问时：如果这条边不是最小生成树的边，答案就是<code>No</code>;如果这条边是最小生成树的边，答案就是<code>Yes</code>，但不更新最小生成树。复杂度$O((m+q)\log(m+q)).$</p>
<p>代码1：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;unordered_map&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;random&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 200010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> n, m, q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v; ll w;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edege</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt, to; ll w;</span><br><span class="line">&#125;ee[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAXN &lt;&lt; <span class="number">1</span>], ecnt, vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> fa[MAXN][<span class="number">22</span>], ma[MAXN][<span class="number">22</span>], dep[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ee[++ecnt].nxt = head[from];</span><br><span class="line">    ee[ecnt].to = to;</span><br><span class="line">    ee[ecnt].w = w;</span><br><span class="line">    head[from] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//printf(&quot;%d %d\n&quot;, u, f);</span></span><br><span class="line">    fa[u][<span class="number">0</span>] = f; ma[u][<span class="number">0</span>] = w;</span><br><span class="line">    dep[u] = dep[f] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">        ma[u][i] = <span class="built_in">max</span>(ma[u][i - <span class="number">1</span>], ma[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = ee[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> go = ee[i].to;</span><br><span class="line">        <span class="keyword">if</span> (go != f)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">dfs2</span>(go, u, ee[i].w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> ed)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (st == ed)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> t = dep[st] - dep[ed];</span><br><span class="line">    <span class="keyword">int</span> log = <span class="built_in">log2</span>(t);</span><br><span class="line">    t -= (<span class="number">1</span> &lt;&lt; log); <span class="keyword">int</span> tmp = st;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="number">1</span> &lt;&lt; i) &amp; t)</span><br><span class="line">            tmp = fa[tmp][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(fa[tmp][log]==ed)</span><br><span class="line">    <span class="keyword">return</span>  <span class="built_in">max</span>(ma[st][log], ma[tmp][log]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[u] &gt; dep[v])</span><br><span class="line">        <span class="built_in">swap</span>(u, v);</span><br><span class="line">    <span class="keyword">int</span> t = dep[v] - dep[u];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="number">1</span> &lt;&lt; i) &amp; t)</span><br><span class="line">            v = fa[v][i];</span><br><span class="line">    &#125;<span class="comment">//走到同一深度</span></span><br><span class="line">    <span class="keyword">if</span> (u == v)</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (fa[u][i] != fa[v][i])</span><br><span class="line">            u = fa[u][i], v = fa[v][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node <span class="keyword">const</span>&amp; a, Node <span class="keyword">const</span>&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == fa[x][<span class="number">0</span>] ? x : fa[x][<span class="number">0</span>] = <span class="built_in">find</span>(fa[x][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>, &amp;e[i].u, &amp;e[i].v, &amp;e[i].w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//memset(ma, 0x3f3f3f3f, sizeof(ma));</span></span><br><span class="line">    <span class="built_in">sort</span>(e + <span class="number">1</span>, e + m + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)fa[i][<span class="number">0</span>] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m &amp;&amp; cnt &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = e[i].u, v = e[i].v;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(u) != <span class="built_in">find</span>(v))</span><br><span class="line">        &#123;</span><br><span class="line">            fa[<span class="built_in">find</span>(u)][<span class="number">0</span>] = <span class="built_in">find</span>(v);</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="built_in">add</span>(u, v, e[i].w);</span><br><span class="line">            <span class="built_in">add</span>(v, u, e[i].w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v; ll w; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">        <span class="keyword">int</span> lc = <span class="built_in">lca</span>(u, v);</span><br><span class="line">        <span class="keyword">if</span> ((u == v) || (<span class="built_in">query</span>(u, lc) &lt;= w &amp;&amp; <span class="built_in">query</span>(v, lc) &lt;= w))</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;<span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);<span class="comment">//fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码2：</p>
<p>不想写了,开摆</p>
]]></content>
      <categories>
        <category>图论</category>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>生成树</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>AtCoder Beginner Contest 241（Sponsored by Panasonic）A-F</title>
    <url>/2022/03/21/ABC241/</url>
    <content><![CDATA[<p><a href="https://atcoder.jp/contests/abc241">题目链接</a></p>
<p>2022.03.15</p>
<p>3月14没vp啊啊啊</p>
<p>2022.03.25终于补了F</p>
<span id="more"></span>
<p>A.B.送的，模拟即可。</p>
<p>C.给$n\times m$的棋盘，上面有黑棋和空白，你可以放至多2个黑棋使得黑棋形成六子。</p>
<p>枚举起始点检查空白数量即可，忘记写副对角线WA了一次。。</p>
<p>D.$A$序列初始为空。有三种操作，一是将$x$插入有序序列$A$，二是查询序列中不大于$x$的第$k$大，三十查询序列中不小于$x$的第$k$小。如果没有，输出-1.$k\le 5,x\le 10^9,q\le 200000$.</p>
<p>multiset暴力。。。</p>
<p>E.给一个序列$A=(A_0,\cdots,A_{n-1})(n\le 200000)$，初始时记$X=0$。重复以下操作$K(\le10^{12})$次：$X+=A_{X\mod n}$.求最后的$X$.</p>
<p>最后应该是会在环上走（不懂怎么证），于是又是模拟，找到环之后用原来的长度减去链的长度再除以环的长度，代表还要重复那么多圈，剩下的暴力走。</p>
<p>F.$H\times W$的网格上有$n$个障碍物，坐标$(x_i,y_i)$，出发点$(sx,sy)$，目的地$(gx,gy)$。一次移动可以向一个方向一直移动，直到遇到障碍物，在障碍物前一格停下。求最小步数，或说明无解。</p>
<p>一看就是BFS，停留的点只能在$n$个点周围4个方向的相邻处，关键是怎么获得四个方向会到哪些点。</p>
<p>可以用vector存pair，由于pair的默认排序方式为先first后second，所以要两个vector。一个以x为第一关键字，即先x后y；另一个以y为第一关键字，即先y后x。预处理时，把所有障碍物坐标存到这两个vector中。</p>
<p>在沿x方向横向移动时，可以在vector<pa>xy中用lower_bound找到恰好大于等于当前位置的障碍位置（即右移），然后判断它们两x坐标是否相等，如果相等，代表该移动合法。左移时，先将迭代器–；然后判断x坐标是否相等。</p>
<p>上下移动同理，只不过是在yx中找。由于套了lower_bound，复杂度$O(N\log(N))$。</p>
<p>还有多语句并列的时候不要轻易continue和break，容易sb.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 300110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line">map&lt;pa, <span class="keyword">int</span>&gt;vis;</span><br><span class="line">vector&lt;pa&gt;xy, yx;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> H, W, n; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;H, &amp;W, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> sx, sy, gx, gy; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;sx, &amp;sy, &amp;gx, &amp;gy);</span><br><span class="line">    queue&lt;pa&gt;q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        vis[<span class="built_in">mapa</span>(x, y)] = <span class="number">1</span>;</span><br><span class="line">        xy.<span class="built_in">push_back</span>(<span class="built_in">mapa</span>(x, y)); yx.<span class="built_in">push_back</span>(<span class="built_in">mapa</span>(y, x));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(xy.<span class="built_in">begin</span>(), xy.<span class="built_in">end</span>()); <span class="built_in">sort</span>(yx.<span class="built_in">begin</span>(), yx.<span class="built_in">end</span>());</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">mapa</span>(sx, sy)); vis[<span class="built_in">mapa</span>(sx, sy)] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        pa u = q.<span class="built_in">front</span>(); <span class="keyword">int</span> x = u.first, y = u.second; q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">//printf(&quot;~%d %d\n&quot;, x, y);</span></span><br><span class="line">        <span class="keyword">if</span> (x == gx &amp;&amp; y == gy)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, vis[<span class="built_in">mapa</span>(x, y)]); <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> tmpx = <span class="built_in">lower_bound</span>(xy.<span class="built_in">begin</span>(), xy.<span class="built_in">end</span>(), u) - xy.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">int</span> tmpy = <span class="built_in">lower_bound</span>(yx.<span class="built_in">begin</span>(), yx.<span class="built_in">end</span>(), <span class="built_in">mapa</span>(y,x)) - yx.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">int</span> nx, ny;</span><br><span class="line">        <span class="keyword">if</span> (tmpx &lt; n)</span><br><span class="line">        &#123;</span><br><span class="line">            nx = xy[tmpx].first, ny = xy[tmpx].second - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (xy[tmpx].first == x)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (vis[<span class="built_in">mapa</span>(nx, ny)] == <span class="number">0</span> &amp;&amp; (nx != sx || ny != sy) &amp;&amp; (ny != y - <span class="number">1</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[<span class="built_in">mapa</span>(nx, ny)] = vis[u] + <span class="number">1</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(<span class="built_in">mapa</span>(nx, ny));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tmpx &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tmpx--;</span><br><span class="line">            <span class="keyword">if</span> (xy[tmpx].first == x)</span><br><span class="line">            &#123;</span><br><span class="line">                nx = xy[tmpx].first, ny = xy[tmpx].second + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (vis[<span class="built_in">mapa</span>(nx, ny)] == <span class="number">0</span> &amp;&amp; (nx != sx || ny != sy) &amp;&amp; (ny != y + <span class="number">1</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[<span class="built_in">mapa</span>(nx, ny)] = vis[u] + <span class="number">1</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(<span class="built_in">mapa</span>(nx, ny));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tmpy &lt; n)</span><br><span class="line">        &#123;</span><br><span class="line">            ny = yx[tmpy].first, nx = yx[tmpy].second - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (yx[tmpy].first == y)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (vis[<span class="built_in">mapa</span>(nx, ny)] == <span class="number">0</span> &amp;&amp; (nx != sx || ny != sy) &amp;&amp; (nx != x - <span class="number">1</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[<span class="built_in">mapa</span>(nx, ny)] = vis[u] + <span class="number">1</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(<span class="built_in">mapa</span>(nx, ny));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tmpy &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tmpy--;</span><br><span class="line">            <span class="keyword">if</span> (yx[tmpy].first == y)</span><br><span class="line">            &#123;</span><br><span class="line">                ny = yx[tmpy].first, nx = yx[tmpy].second + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (vis[<span class="built_in">mapa</span>(nx, ny)] == <span class="number">0</span> &amp;&amp; (nx != sx || ny != sy) &amp;&amp; (nx != x + <span class="number">1</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[<span class="built_in">mapa</span>(nx, ny)] = vis[u] + <span class="number">1</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(<span class="built_in">mapa</span>(nx, ny));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多 练</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vp</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>模拟</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1114F Please, another Queries on Array?</title>
    <url>/2022/02/25/CF1114F/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1114/problem/F">题目链接</a></p>
<p>给定初始数组a[1…n]，q组询问，方式有两种：1.给$[l,r]$的数乘上$x$;2.询问$\varphi(\prod\limits_{i=l}^r a_i) \mod 10^9+7$.</p>
<p>$n\le 4\times10^5,q\le2\times10^5,1\le a[i],x\le300$</p>
<span id="more"></span>
<p>欧拉函数是积性函数，$\varphi(p^k)=p^k(1-\frac{1}{p})$.$\varphi(\prod p_i^{k_i})=\prod p_i^{k_i}(1-\frac{1}{p_i})=\prod p_i^{k_i}\prod(1-\frac{1}{p_i}).$因此用线段树维护区间积和区间包含的质因数即可，状态用一个64位的longlong数来状压表示。</p>
<p>刚开始做的时候以为开了62个线段树维护质因数幂合并就行，然后就MLE了。。。改了之后debug到吐发现<code>|=</code>少打<code>|</code>。。。。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 400110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> a[MAXN];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">310</span>], p[<span class="number">70</span>], pid[<span class="number">300</span>], inv[<span class="number">70</span>], minf[<span class="number">310</span>], tot;</span><br><span class="line">ll pf[<span class="number">310</span>];<span class="comment">//每个数的质因子分解</span></span><br><span class="line"><span class="comment">//小心数组开小内存溢出</span></span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x, ll n = MOD - <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x %= MOD;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)res *= x; res %= MOD;</span><br><span class="line">        x *= x; x %= MOD; n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getp</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">149</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i++; i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i] = <span class="number">1</span>; p[++tot] = i; minf[i] = i;</span><br><span class="line">            pid[i] = tot;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot &amp;&amp; i * p[j] &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i * p[j]] = <span class="number">1</span>; minf[i * p[j]] = p[j];</span><br><span class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> now = i;</span><br><span class="line">        <span class="keyword">while</span> (now != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pf[i] |= <span class="number">1LL</span> &lt;&lt; pid[minf[now]]; now /= minf[now];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//for (int j = 63; j &gt;= 1; j--)printf(&quot;%d&quot;, (pf[i] &gt;&gt; j) &amp; 1);</span></span><br><span class="line">        <span class="comment">//printf(&quot; %d\n&quot;,i);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">62</span>; i++)inv[i] = <span class="built_in">ksm</span>(p[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r; ll prod, lazy = <span class="number">1</span>;</span><br><span class="line">    ll state, lazystate;</span><br><span class="line">&#125;tr[<span class="number">1048600</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[o].prod = tr[o &lt;&lt; <span class="number">1</span>].prod * tr[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].prod % MOD;</span><br><span class="line">    tr[o].state = tr[o &lt;&lt; <span class="number">1</span>].state | tr[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].state;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> o, ll val,ll st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[o].lazy *= val; tr[o].lazy %= MOD;</span><br><span class="line">    tr[o].lazystate |= st;</span><br><span class="line">    tr[o].prod *= <span class="built_in">ksm</span>(val, <span class="number">1LL</span> * (tr[o].r - tr[o].l + <span class="number">1</span>));</span><br><span class="line">    tr[o].prod %= MOD;</span><br><span class="line">    tr[o].state |= st;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//printf(&quot;%d %d\n&quot;, l, r);</span></span><br><span class="line">    tr[o].l = l, tr[o].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[o].prod = a[l];</span><br><span class="line">        tr[o].state = pf[a[l]];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(o &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">mul</span>(o &lt;&lt; <span class="number">1</span>, tr[o].lazy, tr[o].lazystate);</span><br><span class="line">    <span class="built_in">mul</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, tr[o].lazy, tr[o].lazystate);</span><br><span class="line">    <span class="comment">//tr[o].state |= tr[o].lazystate;</span></span><br><span class="line">    tr[o &lt;&lt; <span class="number">1</span>].state |= tr[o].lazystate;</span><br><span class="line">    tr[o &lt;&lt; <span class="number">1</span>].lazystate |= tr[o].lazystate;<span class="comment">//捏吗少打一竖</span></span><br><span class="line">    tr[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].state |= tr[o].lazystate;</span><br><span class="line">    tr[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lazystate |= tr[o].lazystate;</span><br><span class="line">    tr[o].lazy = <span class="number">1</span>; tr[o].lazystate = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, ll val)</span><span class="comment">//区间乘法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll st = pf[val];</span><br><span class="line">    <span class="keyword">if</span> (tr[o].l == l &amp;&amp; tr[o].r == r)<span class="built_in">mul</span>(o, val, pf[val]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(o);</span><br><span class="line">        <span class="keyword">int</span> mid = (tr[o].l + tr[o].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (r &lt;= mid)<span class="built_in">update</span>(o &lt;&lt; <span class="number">1</span>, l, r, val);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid)<span class="built_in">update</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, val);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">update</span>(o &lt;&lt; <span class="number">1</span>, l, mid, val);</span><br><span class="line">            <span class="built_in">update</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushup</span>(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qry</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[o].l == l &amp;&amp; tr[o].r == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tr[o].prod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(o);</span><br><span class="line">    <span class="keyword">int</span> mid = (tr[o].l + tr[o].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">qry</span>(o &lt;&lt; <span class="number">1</span>, l, r) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">qry</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">return</span></span> (<span class="built_in">qry</span>(o &lt;&lt; <span class="number">1</span>, l, mid) * <span class="built_in">qry</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r)) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qrystate</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[o].l == l &amp;&amp; tr[o].r == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tr[o].state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//pushdown(o);</span></span><br><span class="line">    <span class="keyword">int</span> mid = (tr[o].l + tr[o].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">qrystate</span>(o &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">qrystate</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">return</span></span> (<span class="built_in">qrystate</span>(o &lt;&lt; <span class="number">1</span>, l, mid) | <span class="built_in">qrystate</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> tmp[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">getp</span>(<span class="number">300</span>);</span><br><span class="line">    <span class="keyword">int</span> n, q; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, a + i);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%d%d&quot;</span>, tmp, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span> (tmp[<span class="number">0</span>] == <span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            <span class="built_in">update</span>(<span class="number">1</span>, l, r, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ll ans = <span class="built_in">qry</span>(<span class="number">1</span>, l, r); ll st = <span class="built_in">qrystate</span>(<span class="number">1</span>, l, r);</span><br><span class="line">            <span class="comment">//char tmpp[100]=&quot;&quot;; ltoa(st, tmpp, 2); printf(&quot;%s\n&quot;, tmpp);</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">63</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (st &amp; (<span class="number">1LL</span> &lt;&lt; i))</span><br><span class="line">                &#123;</span><br><span class="line">                    ans *= (MOD - inv[i] + <span class="number">1</span>);</span><br><span class="line">                    ans %= MOD;</span><br><span class="line">                    <span class="comment">//printf(&quot;1&quot;);</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//else printf(&quot;0&quot;);</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>数论</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1119D Frets On Fire</title>
    <url>/2022/01/28/CF1119D/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/problemset/problem/1119/D">题目链接</a></p>
<p>有n行$10^{18}+1$列，每行第0个数为$a[1],\cdots,a[n]$，第i行的第j个元素=$a[i]+j$.有$q$个询问，第i个询问询问列$[l_i,r_i]$中，值不同的数有多少个。$(n,q\leq10^5,1\leq l\leq r\leq10^{18})$</p>
<span id="more"></span>
<p>排序不影响结果，先按a从小到大排序。而且答案和具体的$l,r$无关，只和区间长度$len$有关，也就等效于可以都从第一列开始数。</p>
<p>把a的起始值都画在数轴上，可以发现当区间长度变长后相邻两条线段可能会有相交。</p>
<p>分别考虑第$i$条线段对答案的贡献，贡献为$min(a[i+1]-a[i],len)$.其中$a[n+1]=+\infty$,记$d[i]=a[i+1]-a[i]$,最终答案为$\sum\limits_{i=1}^nmin(d[i],len)$.</p>
<p>如果想快速求的话还得处理一下d数组，$\sum\limits_{i=1}^nmin(d[i],len)=\sum\limits_{d[i]\leq len}d[i]+len*cnt,cnt$是大于len的d的个数。因此再对d排序，对于小于len的部分，我们维护d的前缀和，并在d中二分找到分界。</p>
<p><s>公式min的大括号不知道为什么会被吃，用小括号好碍眼</s></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 200010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;ll,ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x, ll n = MOD - <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">            res *= x, res %= MOD; x = x * x; x %= MOD; n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n; ll a[MAXN], d[MAXN], s[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        d[i] = a[i+<span class="number">1</span>] - a[i];<span class="comment">//第i个数的贡献</span></span><br><span class="line">    &#125;</span><br><span class="line">    d[n] = <span class="number">4e18</span>;</span><br><span class="line">    <span class="built_in">sort</span>(d + <span class="number">1</span>, d + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        s[i] = s[i - <span class="number">1</span>] + d[i];</span><br><span class="line">    <span class="comment">///int nn = unique(a + 1, a + n + 1) - a - 1;</span></span><br><span class="line">    <span class="keyword">int</span> q; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll l, r; <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        ll len = r - l + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//ans=sigma min(d[i],len);</span></span><br><span class="line">        <span class="keyword">int</span> leq = <span class="built_in">upper_bound</span>(d + <span class="number">1</span>, d + n + <span class="number">1</span>, len) - d - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> strg = n - leq;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, s[leq] + <span class="number">1LL</span> * len * strg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>; <span class="comment">//scanf(&quot;%d&quot;, &amp;_);//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//printf(&quot;\n&quot;); //fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>前缀和</tag>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 655 (Div. 2) A-C,D待补</title>
    <url>/2022/03/25/CF1372/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1372">题目链接</a></p>
<p>2022.03.16</p>
<p>B题出的太慢了，看D又是个鬼DP或思维，不会，摆了</p>
<span id="more"></span>
<p>A.构造一个长为$n$的数组，元素范围$[1,n]$，使其满足对任意的$1\le x,y,z\le n,a_x+a_y\neq a_z$。</p>
<p>输出n个1即可。</p>
<p>B。给定$n(\le10^9)$，构造正整数$a,b$满足$a+b=n,lcm(a,b)$最小。</p>
<p>$lcm(a,b)=\frac{ab}{\gcd(a,b)}=\frac{a(n-a)}{\gcd(a,n)}$.当$a$变化时，$\gcd(a,n)$只可能是$n$的因数。当$d=\gcd(a,n)$是$n$的因数时，设$a=kd,\gcd(k,n/d)=1$，由二次函数单峰知$a$要尽可能远离$n/2$。所以$k$取$1$或大一点的数才可能。所以有个想法就是$a$只取$n$的因数，即只让$k=1$，至于另一半，交换$a,b$位置，答案是一样的所以不用管了。</p>
<p>C.给定一个排列$a_1,\cdots,a_n$，一次操作如下：选择一段线段$[l,r]$，你可以任意排列这条线段中元素的位置，记排列后第$i$个元素为$b_i$，要满足对任意$i\in [l,r],a_i\neq b_i$。问最少要多少次操作才能把整个序列变得有序。</p>
<p>可以发现最多只会用2次就完成，以下，把满足对任意$i\in [l,r],a_i\neq i$的最长线段简记为好线段，即好线段两端不能再延长。</p>
<p>如果开始时就有序了，答案就是0；如果好线段只有1个，就对其进行1次操作，答案为1；否则，若好线段数量不小于2，可以用一次操作选中整段，把所有位置打乱，再用一次操作把所有位置排成有序。</p>
<p>D.给一个$n$（$n$为奇数）的数组$a_1,\cdots,a_n$顺次围成一个圈，你可以选择一个数$a_i$，把它换成相邻两个数的和，然后从圈中删去相邻两个数。求最后结果的最大值。</p>
]]></content>
      <categories>
        <category>vp</category>
      </categories>
  </entry>
  <entry>
    <title>Codeforces Round 597 Div 2 A-D,F</title>
    <url>/2022/03/05/CF1245/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1245">题目链接</a></p>
<p>时间：2022.03.02</p>
<p>依旧是4道。。昨天是星期二，因为课太多了挤不出完整时间打。。</p>
<p>2022.03.11修了一个显示bug（&amp;公式里显示成Misplaced &amp;,吐了）</p>
<span id="more"></span>
<p>A.</p>
<p>给定两个正整数$a,b$，现在将0，1，2，…染色，0染成白色。如果$i-a$或$i-b$是白色，则将$i$染成白色，否则$i$为黑色。问0，1，…，到正无穷黑色的数量是有限还是无限。</p>
<p>先说结论。如果$\gcd(a,b)=1$就是有限，否则为无限。证明：</p>
<p>如果$\gcd(a,b)=1$，则说明存在正整数$x,y$使得$ax-by=1$，于是存在正整数$x_d,y_d$使得$ax_d-by_d=d,1\le d\le a$.然后模$[0,a-1]$都可以被遍历到，所以黑色有限；否则的话，与$\gcd(a,b)$互质的数都是黑色，是无限的。</p>
<p>B.</p>
<p>Alice和Bob玩剪刀石头布$n$次，Alice会出$a$次石头®，$b$次布§，$c$次剪刀(S)。你知道Bob在第$1,2,…,n$出什么，现在要分配Alice的出法，使得Alice至少赢$\lceil\frac{n}{2}\rceil$次，如果可以则输出方案，不可以则输出No。</p>
<p>考虑贪心，Alice赢的最大次数应该是$min(a,cnta)+min(b,cntb)+min(c,cntc)$,$cnta,cntb,cntc$是Bob中对应的次数。有限让这些能赢的都赢，其他的任意分配就行。第一次循环，如果能赢才用；第二次把剩下的填了就行。</p>
<p>C.</p>
<p>有一个机器，接收一个由小写英文字母组成的字符串，会把所有的<code>w</code>替换成子串<code>uu</code>,把<code>m</code>替换成子串<code>nn</code>，其余部分不变。现在给出其输出，求有多少种输入与之对应，对1e9+7取模。</p>
<p>只用考虑连续的uuuuu和连续的nnnnn。两个u可以合并也可以不合并，类似于跳台阶，所以方案数与斐波那契有关。把连续的段取出来，答案就是$\prod_i f[len_i]$.然后注意输出如果有<code>w</code>和<code>m</code>的话就是0.</p>
<p>D.</p>
<p>在二维平面上有$n(\le 2000)$个城市，坐标$(x_i,y_i)$。现在给每个城市供电。你可以在第$i$座城市建造发电站，花费$c_i$元，或者连接两个城市$i,j$，花费$(k_i+k_j)*(|x_i-x_j|+|y_i-y_j|)$元，要使每一座城市与建了发电站的城市连通。求最小花费及其对应方案。</p>
<p>看数据范围估计得$n^2$.考虑贪心，最后的结果肯定是个森林，树内$c_i$最小的建发电站，边的话就是最小生成树。</p>
<p>当时做法：直接考虑最小生成树，然后去删掉一些边。并查集维护每个连通块的最小$mic_i$。可以知道连接一条边前后花费的变化。考虑边$(u,v)$的花费$w$,连接后花费增加$w$,减少$\max(mic[find[u]],mic[find[v]]))$.</p>
<p>当时感觉应该是正确的就写了，也过了。。。实际上直接建虚拟节点0往每个i连权为$c_i$的边跑最小生成树就行。。就可以用Prim了。</p>
<p>F.</p>
<p>求满足以下条件的有序数对$(a,b)$的数量。$l\le a\le r,l\le b\le r,a+b=a\oplus b$</p>
<p>上式可以转化为$a\ and\ b=0$.即加法不能产生进位。然后范围转化为$cal(r,r)-2*cal(l-1,r)+cal(l-1,l-1)$.$cal(x,y)$表示在$0\le a\le x,0\le b\le y$范围内$a\ and\ b=0$的方案数。这种带上界枚举方案数的用数位dp做就行了。（之前集训没补导致就连最简单的模板都没见过呜呜呜，于是进行一个题的补（抽卡那道））</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 300110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line">ll dp[<span class="number">40</span>][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">bool</span> limit1, <span class="keyword">bool</span> limit2)</span><span class="comment">//pos从高位到低位limit为true表示该位有限制</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pos == <span class="number">-1</span>)<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//枚举结束</span></span><br><span class="line">    <span class="keyword">if</span> (dp[pos][limit1][limit2] != <span class="number">-1</span>)<span class="keyword">return</span> dp[pos][limit1][limit2];</span><br><span class="line">    <span class="keyword">int</span> up1 = limit1 ? (a &gt;&gt; pos) &amp; <span class="number">1</span> : <span class="number">1</span>, up2 = limit2 ? (b &gt;&gt; pos) &amp; <span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= up1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= up2; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((i &amp; j) == <span class="number">0</span>)</span><br><span class="line">                res += <span class="built_in">dfs</span>(pos - <span class="number">1</span>, a, b, limit1 &amp; (i == up1), limit2 &amp; (j == up2));<span class="comment">//如果当前位有限制，则低位也有限制</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[pos][limit1][limit2] = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">cal</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><span class="comment">//[0,a]*[0,b]</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; <span class="number">0</span> || b &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dp));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dfs</span>(<span class="number">30</span>, a, b, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l, r; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">    ll ans = <span class="built_in">cal</span>(r, r) - <span class="number">2</span> * <span class="built_in">cal</span>(l - <span class="number">1</span>, r) + <span class="built_in">cal</span>(l - <span class="number">1</span>, l - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;_);</span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vp</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>数位dp</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 84 A-E</title>
    <url>/2022/03/05/CF1327/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1327">题目链接</a></p>
<p>2022.03.03</p>
<p>又是4题。。E想歪了，本来思路是对的</p>
<span id="more"></span>
<p>A.</p>
<p>给定$n,k$，判断$n$是否能表示成$k$个不同的正奇数之和。</p>
<p>我们从最小的奇数选，那么$k$个不同的奇数之和至少为$k^2$.如果$n&lt;k^2$或$n % 2\neq k%2$肯定无解，否则总能将选的最大的奇数增加到满足要求。</p>
<p>B.</p>
<p>有$n$个王子和公主，每个公主有一个列表，记录可以匹配的王子编号。匹配规则如下：从1号公主开始，每个公主遍历其列表找到第一个未被匹配的王子，与其匹配。找不到的话就不管。你可以在任意一个公主的列表中添加一个王子的编号</p>
<p>（未在该列表中出现过的），如果添加后总的匹配对增加了，则输出“IMPROVE”和增加的方法。否则输出“OPTIMAL”。</p>
<p>只要有未匹配的公主，就一定是IMPROVE，也就能找到未匹配的王子。模拟匹配即可。</p>
<p>C.</p>
<p>$n\times m$的棋盘上有$k$个棋子.坐标为$(sx[i],sy[i])$.你可以一次操作$L,R,U,D$使棋盘上所有的棋子向对应方向移动一格。如果有棋子移动后超出边界则忽略对该棋子的移动。每个棋子要移动到目的位置$(fx[i],fy[i])$.要在不超过$2nm$次操作内完成。可能有多个棋子位于同一坐标。</p>
<p>直接贪心，把所有棋子汇集到（1，1）然后扫一遍。总次数$n-1+m-1+nm\le 2nm$.</p>
<p>D.</p>
<p>给定排列$p$。点1,2,…n每个点有颜色$c[i]$。定义一条无限路径：$i,p[i],p[[i]],p[p[p[i]]],\dots$且$c[i] = c[p[i]] = c[p[p[i]]] = \dots$。</p>
<p>定义复合排列$c=a\times b$，表示$c[i]=b[a[i]]$。定义$p^k=\underbrace{p\times p\times \cdots\times p}_{k个}$。</p>
<p>求最小的$k$使得对于排列$p^k$，存在一条无限路径。</p>
<p>边$&lt;i,p[i]&gt;$构成很多环。对于长度为$len$的环，若取$k=x$,则和取$k=\gcd(len,x)$得到的无限路径是一样的。所以只用考虑$k$取$len$的因数的情况下是否满足同色。因为要$k$最小，所以不是只用看质因数，要看所有因数。又差点想歪。复杂度$O(n\sqrt{n})$。然而做的时候又因为粗心忘记枚举另一半因数加上打错字。</p>
<p>E.</p>
<p>求$[0,10^n-1]$中长度为$1,2,\dots,n$的线段的出现次数。不足$n$位的补前导零。如$00112223$,$3$是长度为1的线段，$00,11,$是长度为2的线段，$222$是长度为3的线段。</p>
<p>这个贡献是独立的。对于长度$len$的线段，要么其起点和终点都不在端点，要么有一个在。</p>
<p>对于第一种情况，枚举起始位置，有$n-len-1$种，然后内部有10种，两个端点交界处只能填9种，之外任意填不会影响结果，有$10^{n-len-2}$种。第一种情况答案为$(n - len - 1) \cdot 10 \cdot 9^2 \cdot 10^{n-len-2}$.</p>
<p>第二种情况贡献为$2 \cdot 10 \cdot 9 \cdot 10^{n-len-1}$。</p>
<p>注意边界条件即可。</p>
]]></content>
      <categories>
        <category>vp</category>
      </categories>
      <tags>
        <tag>计数</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 694 Div 2 A-D,F</title>
    <url>/2022/03/05/CF1471/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1471">题目链接</a></p>
<p>2022.03.04</p>
<p>又是4题。A还打错了一次。</p>
<span id="more"></span>
<p>A.</p>
<p>有初始序列$a[1,\dots,n]$，你可进行以下操作无限次（也可不进行），把$a[i],a[i+1]$替换为$a[i]+a[i+1]$，从而序列大小$-1$.设最终序列为$b$，大小为$k$，给定$x$，求$\sum_{i=1}^{k}\lceil\frac{b[i]}{x}\rceil$的最大值和最小值。</p>
<p>发现合并后答案会变小，所以最小值为全合成一个数，最大值为不合。</p>
<p>B.</p>
<p>有初始序列$a[1,\dots,n]$，给定$x$，对序列进行如下操作：从第一个元素开始，如果$a[1]$可以被$x$整除，则将x个$a[1]/x$添加到序列末尾，否则停止。如果可以整除，则看第二个元素是否能被$x$整除，一直下去直到停止。求停止时序列的所有元素之和。</p>
<p>我们关心什么时候停止。在序列末尾添加$x$个$a[i]/x$实际上序列之和只增加了$a[i]$.可以把指针想成循环的。设$a[1]$到$a[n]$中所有元素$x$的最小幂次为$mi$，最先出现的位置为$pos$。模拟发现会在$pos$处停止，前一段贡献为$mi+2$，后一段贡献为$mi+1$.</p>
<p>C.</p>
<p>邀请了$n$个朋友开生日派对啊嗯，要发礼物给每个人。超市有$m$种礼物，价格$1\le c_i\le c_2\le \dots c_m$，且每种礼物只有一个。第$i$个人有一个$k_i$，表示要么给他第$j$种礼物$(j\le k_i)$，要么直接给他$c_{k_i}$元。求最小花费。</p>
<p>这个跟具体的人无关，只和$k_i$有关，所以先排序在考虑。排完序发现最好先把$k_i$大的给礼物，不然礼物没了的话要给巨大多金钱，而且礼物可以直接拿最便宜的。因为后面的总是可以保证前面的礼物拿完了话直接给小的$c_{k_i}$元是最优的。</p>
<p>D.</p>
<p>定义$x,y$是相邻的当且仅当$\frac{lcm(x,y)}{\gcd(x,y)}$是个完全平方数。</p>
<p>定义数组的美丽值为$\max(d[i])$，$d[i]$是数组中与$a[i]$相邻的数的个数。</p>
<p>给定原始数组$a[1,\dots,n]$。一次操作如下：对每个$a[i]$，在$a$中找出与其相邻的所有元素构成集合$S_i$,新的$a[i]=S_i$中元素之积。有$q$组询问，询问原始数组进行$w$次操作之后的美丽值。$w\le10^{18},a[i]\le 10^6$</p>
<p>把$x,y$质因数分解后发现$\frac{lcm}{gcd}$是完全平方数等价于$x,y$每个质因数的幂次奇偶性相同。如$12=2^2\cdot 3^1,3=2^0\cdot 3^1$是相邻的。这样，相邻就具有传递性。考虑一个相邻的连通块，在一次操作后，如果连通块大小为奇数，则该连通块内所有数的质数幂次奇偶性都不会改变，并且进行多少次都不会改变；如果连通块大小为偶数，则幂次全部变为偶数，就会与幂次全为偶的连通块相连，连上之后在进行一次操作的话也不会有新的了。所以只用考虑$w=0$和$w\ge 1$两种情况。</p>
<p>再说说怎么搞连通块大小。直接暴力维护质数表肯定不可取，可以把$a[i]$质因数分解，然后幂次模2，存进一个map就行，如存进map&lt;int,int&gt;all。如果$w=0$，直接求map中最大的元素就行，否则还要把all中所有大小为偶数的和all[1]相加，再取max.</p>
<p>记得预处理一定要写在solve外！！</p>
<p>E.</p>
<p>这是一道交互题。$n$个人顺时针从$1$到$n$围成一个环，开始时每个人有$k$张卡片，$k$是偶数。一轮操作中，设第$i$个人当前有$x$张卡片，他会将$\lfloor\frac{x}{2}\rfloor$给左边的人（编号为$i-1$），剩余的给右边。有一个人比较特殊，他每次都把自己的卡片给右边的人，所有人给卡片的动作是同时的。你可以进行不超过1000次询问，询问当前第$i$个人有多少张卡片。询问结束后自动进行一轮操作。要找到特殊的人的位置。</p>
<p>有空再补</p>
<p>F.</p>
<p>有$n$个房间$m$条边，要分配老师到不同的房间，满足以下条件：两个有老师的房间不能直接相连；如果一条边两个端点都没有老师，这条边会断开；剩下的图连通。回答是否存在方案，存在则输出。</p>
<p>只要整个图是连通的总可以构造出一组解。</p>
<p>把有老师的教室标记1，没有的记为-1，变成染色问题。为处理方便，访问过的点默认为1.先从一个点出发BFS，给其标上1。如果队列中当前的点周围没有1，那么就把它标记成1就行了，否则只能标记为-1.</p>
<p>注意push之前就要设vis了，否则会出现一个点多次入队的情况，之前好像也这样T过，竟然还记得，然后好像也有几次是写错了的但是也过了，有点哈人。还有如果是多测，建议是在处理一组数据之前清空而不是之后清空，因为有时候会直接return就忘记清空了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt, to;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAXN &lt;&lt; <span class="number">1</span>], ecnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++ecnt].nxt = head[from];</span><br><span class="line">    e[ecnt].to = to;</span><br><span class="line">    head[from] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> vis[MAXN];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt;q; q.<span class="built_in">push</span>(st);<span class="comment">//</span></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">int</span> ok = <span class="number">1</span>;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">            <span class="keyword">if</span> (!vis[v])</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">                vis[v] = <span class="number">-1</span>;<span class="comment">//避免重复入队</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (vis[v] == <span class="number">1</span>)vis[u] = <span class="number">-1</span>;<span class="comment">//周围有</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        head[i] = vis[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ecnt = <span class="number">0</span>;</span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="built_in">add</span>(u, v); <span class="built_in">add</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;NO&quot;</span>); <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (vis[i] == <span class="number">1</span>)ans.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;YES\n%d\n&quot;</span>, ans.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : ans)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, it);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;_);</span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vp</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>交互</tag>
        <tag>染色</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 110 A-E</title>
    <url>/2022/03/11/CF1535/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1535">题目链接</a></p>
<p>2022.03.05,只做了两道，wsfw，2022.03.11补了</p>
<span id="more"></span>
<p>A.给你4个数，第一个和第二个比大小比出大的，第三个和第四个比大小比出大的，最后再比一次。问最后一次比的两个数是不是4个数中最大的两个。</p>
<p>​		模拟就完了。</p>
<p>B.给定一个数组$a(n\le 2000)$，你可以将其任意重排，要使得$\sum_{n\ge j&gt;i\ge 1}{[\gcd(a_i,2a_j)&gt;1}]$最大。方括号内的表达式为真时取值为1.（$1\le i&lt;j\le n$就是不能渲染，很神奇吧）</p>
<p>​		相当于每对数中你可以把其中一个乘2再求gcd。如果$a_i,a_j$中有一个偶数，就可以把另一个数*2，一定能产生贡献，否则两个奇数，其中一个乘2，gcd是不变的。所以可以把奇数所有放在最后面。实际上不用真的放，算的时候把一个乘2即可。</p>
<p>C.（对于个人而言比较搞的一种题了）给一个字符串$s,(|s|\le 200000)$,由<code>0</code>,<code>1</code>,<code>?</code>构成。定义一段子串$[l,r]$是不稳定的，如果满足存在一种将<code>?</code>替换成0或1的方式使得该段中0和1交替出现。求所有子串中不稳定的字串的数量。</p>
<p>​		vp的时候是想到了双指针，但是统计答案的时候弱智了，因为要处理问号的方案。看了答案后发现维护4个lst值就行。</p>
<p>​		固定$r$找最大的$l$，使得$[l,r]$不是不稳定就行，换句话说就是找最小的$l’=l+1$使得$[l’,r]$都满足要求，此时答案=$r-l’+1=r-l$.对于当前字符$s[r]=0/1,l$不是不稳定有两个来源，一是字符相同但是位置奇偶不同，二是字符不同但是位置奇偶相同。我们取较大的那个。如果$s[r]=?$，则可以把它看成0，也可看成1.在上述两种方案中取最小的$l$作为边界。然后更新lst.</p>
<p>部分代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> lst[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(lst, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(lst));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; s.<span class="built_in">length</span>(); r++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l = r - <span class="number">1</span>, p = r &amp; <span class="number">1</span>;<span class="comment">//(l,r]</span></span><br><span class="line">        <span class="keyword">if</span> (s[r] != <span class="string">&#x27;1&#x27;</span>)<span class="comment">//0,?</span></span><br><span class="line">        &#123;</span><br><span class="line">            l = <span class="built_in">min</span>(l, <span class="built_in">max</span>(lst[<span class="number">0</span>][p ^ <span class="number">1</span>], lst[<span class="number">1</span>][p]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[r] != <span class="string">&#x27;0&#x27;</span>)<span class="comment">//1,?</span></span><br><span class="line">        &#123;</span><br><span class="line">            l = <span class="built_in">min</span>(l, <span class="built_in">max</span>(lst[<span class="number">1</span>][p ^ <span class="number">1</span>], lst[<span class="number">0</span>][p]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[r] != <span class="string">&#x27;?&#x27;</span>)lst[s[r] - <span class="string">&#x27;0&#x27;</span>][p] = r;</span><br><span class="line">        ans += r - l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>D.（也是弱智模拟题）有$2^k$个人打比赛，先是第1个人和第2个人打，记为第1次，然后是第3和第4打，记为第2次……然后每轮中赢的人晋级。即总共有$2^k-1$次，选出冠军。现在给定一个长为$2^k-1$的字符串，第$i$位为<code>0</code>表示第$i$场比赛编号小的赢，为<code>1</code>表示编号大的赢，为<code>?</code>表示该场比赛两个都可能赢。然后有$q$次操作，每次操作把字符串中的某个字符替换。对于每次询问，输出冠军可能的种类数。</p>
<p>​		可以把比赛抽象为完全二叉树，某一个节点对应的字符为0的话就说明可能的数量只来自左边，为1的话只来自右边，为?的话该节点数量=左儿子的数量+右儿子的数量。回答答案就是根节点的数量。</p>
<p>​		直接搞一个简易版本的线段树，只有单点标记修改，单点询问。注意预处理编号，因为树的节点和询问的位置不是一回事。每次修改完就从下往上pushup，最多k层。复杂度$O(k·2^k)$.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> cnt[MAXN],qtotr[MAXN],trtoq[MAXN];</span><br><span class="line">cahr sta[MAXN];<span class="comment">//sta[trtoq]</span></span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnum</span><span class="params">()</span><span class="comment">//编号比较傻逼</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> st = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = k<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;=(<span class="number">1</span>&lt;&lt;i)<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            qtotr[st + j] = (<span class="number">1</span> &lt;&lt; i) + j;</span><br><span class="line">            trtoq[(<span class="number">1</span> &lt;&lt; i) + j] = st + j;</span><br><span class="line">        &#125;</span><br><span class="line">        st += <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ls = o &lt;&lt; <span class="number">1</span>, rs = o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> qo = trtoq[o];<span class="comment">// ql = trtoq[ls], qr = trtoq[rs];</span></span><br><span class="line">    <span class="keyword">if</span> (sta[qo] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        cnt[o] = cnt[ls];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (sta[qo] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        cnt[o] = cnt[rs];</span><br><span class="line">    <span class="keyword">else</span> cnt[o] = cnt[ls] + cnt[rs];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt[o] = <span class="number">1</span>; <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(o &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="comment">//printf(&quot;~%d &quot;, o);</span></span><br><span class="line">    <span class="built_in">pushup</span>(o);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pushup</span>(x);</span><br><span class="line">        x /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">    <span class="built_in">getnum</span>();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, sta + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &lt;&lt; k);</span><br><span class="line">    <span class="keyword">int</span> q; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> ch[<span class="number">2</span>]; <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %s&quot;</span>, &amp;x, ch);</span><br><span class="line">        <span class="keyword">int</span> nod = qtotr[x];</span><br><span class="line">        sta[x] = ch[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">update</span>(nod);</span><br><span class="line">        <span class="comment">//for (int i = 1; i &lt; (1 &lt;&lt; k); i++)printf(&quot;%d &quot;, cnt[i]);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cnt[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>E.</p>
<p>有一棵以0为根的有根树，刚开始时只有一个节点。节点0上有黄金，数量$a[0]$，每吨（是的，没看错）价格为$c[0]$.现在有两种操作：</p>
<p>1.在树上添加节点$i$，其父节点$p[i]$。$i$号节点上有黄金$a[i]$，单价$c[i]$.且保证$c[i]&gt;c[p[i]]$.</p>
<p>2.考虑从节点$v_i$到根的链，要在上面购买总共$w[i]$吨黄金，且使得总花费最小。如果买不够$w[i]$的话，就把整条链全都买。输出购买的数量和最小花费。</p>
<p>有$q$组询问，对于第$i$次询问，可能为两种操作中的其中一种。每次操作不独立（即上一次某个节点的黄金买完了，那么下一次那个节点还是没有黄金）。</p>
<p>因为$c[i]&gt;c[p[i]]$，肯定是尽可能买靠近根节点的黄金。</p>
<p>考虑一次操作2，找到从$v[i]$到根的路径上黄金数量不为0，且深度最浅的点，将其全部买完或买够$w$。注意到如果一个点黄金数量为0了，那么根据贪心，它到根的路径上的黄金数量也都为0，所以可以二分找点，即在树上倍增找。复杂度$O((n+q)\log n)$.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 300110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line">ll fa[MAXN][<span class="number">20</span>], c[MAXN], has[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span><span class="comment">//倍增找最上层不为0的点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q; <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld%lld&quot;</span>, &amp;q, &amp;has[<span class="number">0</span>], &amp;c[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> op; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>, &amp;fa[i][<span class="number">0</span>], &amp;has[i], &amp;c[i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; <span class="number">20</span>; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                fa[i][k] = fa[fa[i][k - <span class="number">1</span>]][k - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ll v, w; <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;v, &amp;w);</span><br><span class="line">            ll buy = <span class="number">0</span>, cost = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (w &gt; <span class="number">0</span> &amp;&amp; has[v] &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> u = v;<span class="comment">//买u</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">19</span>; k &gt;= <span class="number">0</span>; k--)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (has[fa[u][k]] &gt; <span class="number">0</span>)u = fa[u][k];</span><br><span class="line">                &#125;</span><br><span class="line">                ll mi = <span class="built_in">min</span>(has[u], w);</span><br><span class="line">                w -= mi; has[u] -= mi;</span><br><span class="line">                buy += mi; cost += mi * c[u];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld\n&quot;</span>, buy, cost);</span><br><span class="line">            <span class="built_in">fflush</span>(stdout);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多 练</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vp</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>贪心</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 723 (Div. 2) A-D,E待补</title>
    <url>/2022/03/19/CF1526/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1526">题目链接</a></p>
<p>2022.03.12</p>
<p>搓了4题，A~C2.</p>
<span id="more"></span>
<p>A.给你$2n$个数，要你重排成$b$使得$2b_i\neq b_{i-1}+b_{i+1}$对$i\in [1,n]$都成立。其中$b_0=b_{2n},b_{2n+1}=b_{1}$.</p>
<p>将$a$排序后交替填即可。</p>
<p>B.给你一个$x\le10^9$，你可以用任意次数的11,111,1111…，问能否用这些数求和获得$x$。</p>
<p>发现1111即更多位的可以用11和111表出，所以只需判断$x=11a+111b$是否有非负整数解即可，又11和111互质，所以只用判11次。</p>
<p>C.有$n$个位置，每个位置有一瓶药水$a_i(|a_i|\le10^9)$，喝下药水后生命值$now+=a_i$。初始时生命值为0，只能从左往右走，从1出发，要保证任何时刻生命值不小于0.求最多能喝多少瓶药水。C1：$n\le2000,$C2：$n\le 200000$.</p>
<p>C1.可以用DP做。设dp[i]表示喝了i瓶药水后剩下的最大生命值，每走一个位置就$O(n)$更新dp数组。复杂度$O(n^2)$</p>
<p>C2.再用DP会炸。考虑贪心。从1开始，非负的药肯定是无条件喝，负的要能喝就喝。但这样肯定会出问题，因为前面喝了一个负的多的后面就喝不了了。如果当前喝不了了，拿当前这瓶药和之前值最小的比较。如果当前的毒性小（即权值大），那么就反悔，喝当前这瓶药，不喝之前的。因为这两瓶药肯定不能同时喝，最多只能喝一瓶，所以这样答案不变，但是生命值增加了，所以肯定是优的。</p>
<p>用一个优先队列维护最小值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 300110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line">ll a[MAXN]; ll sum[MAXN],dp[MAXN]; <span class="keyword">int</span> n;</span><br><span class="line">vector&lt;pa&gt;neg;</span><br><span class="line"><span class="comment">/*bool ck(int ans)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int cnt = 0;</span></span><br><span class="line"><span class="comment">    neg.clear();</span></span><br><span class="line"><span class="comment">    for (int i = 1; i &lt;= n; i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        sum[i] = sum[i - 1] + (a[i] &gt;= 0) * a[i];</span></span><br><span class="line"><span class="comment">        cnt += (a[i] &gt;= 0);</span></span><br><span class="line"><span class="comment">        if (a[i] &lt; 0)</span></span><br><span class="line"><span class="comment">            neg.push_back(mapa(a[i],i));</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    sort(neg.begin(), neg.end(), greater&lt;int&gt;());</span></span><br><span class="line"><span class="comment">    ll</span></span><br><span class="line"><span class="comment">    for (auto it : neg)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>; ll now = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>,vector&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt;q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (now+a[i] &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans++; now += a[i];</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt; <span class="number">0</span>)q.<span class="built_in">push</span>(a[i]);<span class="comment">//无脑喝</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//反悔</span></span><br><span class="line">            <span class="keyword">if</span> (q.<span class="built_in">empty</span>())<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> mi = q.<span class="built_in">top</span>();</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; mi)<span class="comment">//换一瓶喝</span></span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">pop</span>(); q.<span class="built_in">push</span>(a[i]);</span><br><span class="line">                now -= mi; now += a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="comment">/*int l = 0, r = n, mid, res = 0;</span></span><br><span class="line"><span class="comment">    while (l &lt;= r)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        mid = (l + r) / 2;</span></span><br><span class="line"><span class="comment">        if (ck(mid))</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            l = mid + 1; res = mid;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else r = mid - 1;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;%d&quot;, res);*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多 练</span></span><br></pre></td></tr></table></figure>
<p>D.给一个由字符串<code>A</code>,<code>T</code>,<code>O</code>,<code>N</code>构成的字符串$s(|s|\le 100000)$，你要将其重排成$t$，最大化如下值：在$t$的基础上，通过交换相邻两个字符串还原为$s$的最小次数。（如果看不懂题意去看原题）</p>
<p>可以证明，最终结果一定是相同的字母全部挨着。</p>
<p>假如有一段<code>AB...CA</code>，X不等于A，设中间大于A的数量为$x$,小于A的数量为$y$。若$x\ge y$，则把前面的A移到后面，变为<code>B...CAA</code>。逆序对数量变化了$x-y\ge 0$，否则把后面的A移到前面。逆序对总会增加。</p>
<p>最后求一下24种排列的逆序对就行了。因为只有4种字符，所以可以$O(n)$求12种特定的逆序数，然后组合。复杂度$O(n)$.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 300110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,ll&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line">unordered_map&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;dic;</span><br><span class="line">unordered_map&lt;<span class="keyword">int</span>,<span class="keyword">char</span>&gt;dic2;</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">5</span>], a[<span class="number">5</span>], ansp[<span class="number">5</span>];</span><br><span class="line">ll inv[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(cnt));</span><br><span class="line">    <span class="built_in">memset</span>(inv, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(inv));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)a[i] = ansp[i] = i;</span><br><span class="line">    string s; cin &gt;&gt; s; <span class="keyword">int</span> n = s.<span class="built_in">length</span>(); s = <span class="string">&#x27;*&#x27;</span> + s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">4</span>; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dic[s[i]] == k)<span class="keyword">continue</span>;</span><br><span class="line">            inv[dic[s[i]]][k] += cnt[k];</span><br><span class="line">        &#125;</span><br><span class="line">        cnt[dic[s[i]]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= <span class="number">4</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                res += inv[a[i]][a[j]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res &gt; mx)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">                ansp[i] = a[i];</span><br><span class="line">            mx = res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(a + <span class="number">1</span>, a + <span class="number">5</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt[ansp[i]]; j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, dic2[ansp[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    dic[<span class="string">&#x27;A&#x27;</span>] = <span class="number">1</span>, dic[<span class="string">&#x27;N&#x27;</span>] = <span class="number">2</span>, dic[<span class="string">&#x27;O&#x27;</span>] = <span class="number">3</span>, dic[<span class="string">&#x27;T&#x27;</span>] = <span class="number">4</span>;</span><br><span class="line">    dic2[<span class="number">1</span>] = <span class="string">&#x27;A&#x27;</span>, dic2[<span class="number">2</span>] = <span class="string">&#x27;N&#x27;</span>, dic2[<span class="number">3</span>] = <span class="string">&#x27;O&#x27;</span>, dic2[<span class="number">4</span>] = <span class="string">&#x27;T&#x27;</span>;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;_);</span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多 练</span></span><br></pre></td></tr></table></figure>
<p>E.数学题，可做，留个坑</p>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>vp</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>逆序对</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 722 (Div. 2)A-E</title>
    <url>/2022/04/01/CF1529/</url>
    <content><![CDATA[<p><a href="https://codeforces.ml/contest/1529">题目链接</a></p>
<p>2022.03.19</p>
<p>计数类DP还是弱。。</p>
<span id="more"></span>
<p>A.给一个数组$a$，每次你可以选择$a$的一个子数组$a’$，把$a’$严格大于其$a’$平均值的所有元素删掉。问最多总共删多少个。</p>
<p>直接尽可能删完，只留下最小值。排序后，答案为$a_1$的数量。</p>
<p>B.称序列$b=b_1,\cdots,b_k$是奇怪的，如果对任意$1\le i&lt;j\le k,|b_i-b_j|\ge\max(b)$。给定数组$a$，输出$a$的最长子序列，且它是奇怪的。</p>
<p>如果$\max(b)\le0$答案就是$b$。否则数组最大值大于0。考虑右端有$\max(b)$，左端我们也代入$|\max(b)-b_i|=max(b)-b_i\ge \max(b)\Rightarrow b_i\le 0$。最多只能有一个数大于0。</p>
<p>然后依次检查小于0的所有数，根据贪心，检查相邻两个数的差是否大于$a$中最小的正数，如果是，答案取所有的非负数和最小的正数，否则我们取完非负数。</p>
<p>C.给一棵树，你可以为每个节点$v$赋$[l_v,r_v]$的值$a_v$，边权$w(u,v)=|a_u-a_v|$.求树的所有边权之和的最大值。</p>
<p>感觉可以贪，即每个点要么取$l$，要么取$r$。然后就可以$dp$了。大概长这样。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to; <span class="keyword">if</span> (v == f)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u);</span><br><span class="line">        dp[u][<span class="number">0</span>] += <span class="built_in">max</span>(dp[v][<span class="number">0</span>] + <span class="built_in">abs</span>(l[u] - l[v]), dp[v][<span class="number">1</span>] + <span class="built_in">abs</span>(l[u] - r[v]));</span><br><span class="line">        dp[u][<span class="number">1</span>] += <span class="built_in">max</span>(dp[v][<span class="number">0</span>] + <span class="built_in">abs</span>(r[u] - l[v]), dp[v][<span class="number">1</span>] + <span class="built_in">abs</span>(r[u] - r[v]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>D.<s>不想写题意了</s>有$2n$个点在$x$轴上，你要连$n$条边保证每个点只被连到1次，并且对任意两条边$A,B$，至少满足以下一点：</p>
<p>1.$A$包住了$B$,或$B$包住了$A$;</p>
<p>2.$A,B$长度相同。</p>
<p>求连接的方案数。对$998244353$取模。</p>
<p>设$dp[i]$为$n=i$情况的答案。</p>
<p>考虑1号点和$x$号点连接，有两种情况：</p>
<p>1.$x&gt;n$。外面的连法就确定了，中间剩下$x-n-1$对点完全被外部包围，答案为$dp[x-n-1];$</p>
<p>2.$x\le n$。可以发现$x$必须是$n$的因数，每个因数确定一种连接方法。</p>
<p>故$dp[n]=cntd(n)+\sum\limits_{j=1}^{n-1}dp[j]$,同理$dp[i]=cntd(i)+\sum\limits_{j=1}^{i-1}dp[j]$，其中$cntd(i)$为$i$的因子个数，可以用$O(n\log n)$筛出（网上某些博客说这个是线性筛，蚌埠住了）。</p>
<p>E.给两棵大小为$n(2\le n\le 3\times 10^5)$的树$A,B$，由以下规则生成无向图$G$:若点对$(u,v)$同时满足以下要求，则$G$中$(u,v)$边存在：$u,v$在$A$中有祖先关系，且在$B$中没有祖先关系。求$G$的团大小。团是$G$的一个子图且为完全图。</p>
<p>判祖先关系可以用欧拉序（也叫括号序）。如果两个节点$(u,v)$有祖先关系，那么它们欧拉序的线段就会有包含关系，反过来也成立。欧拉序的线段要么完全不相交，要么完全被包含。我们在$B$树中算每个节点的L和R，所以就等价于求$A$中从根到叶子的一条路径，要求路径上的节点对应的线段都不相交。就可以贪心做，用pair的set维护线段，如果当前待加入的线段被之前的包含就把之前的删掉加当前的，更新答案；如果当前待加入的包含了之前的就什么也不做；如果没交集就直接加，更新答案。换路径的时候要记得撤销这次的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 600010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line">set&lt;pa&gt;s;</span><br><span class="line"><span class="keyword">int</span> a[MAXN],l[MAXN], r[MAXN], dfn_clock;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt, to;</span><br><span class="line">&#125;e[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAXN], ecnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++ecnt].nxt = head[from];</span><br><span class="line">    e[ecnt].to = to;</span><br><span class="line">    head[from] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l[u] = ++dfn_clock;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == f)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    r[u] = ++dfn_clock;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ma;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pa era = <span class="built_in">mapa</span>(<span class="number">0</span>, <span class="number">0</span>),ins=<span class="built_in">mapa</span>(<span class="number">0</span>,<span class="number">0</span>), now = <span class="built_in">mapa</span>(l[u], r[u]);</span><br><span class="line">    <span class="keyword">auto</span> it = s.<span class="built_in">lower_bound</span>(now);</span><br><span class="line">    <span class="keyword">if</span> (it==s.<span class="built_in">begin</span>()||(<span class="built_in">prev</span>(it))-&gt;second &lt; l[u])</span><br><span class="line">    &#123;</span><br><span class="line">        s.<span class="built_in">insert</span>(now); ins = now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="built_in">prev</span>(it))-&gt;second &gt; r[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> pre = <span class="built_in">prev</span>(it);</span><br><span class="line">        s.<span class="built_in">insert</span>(now); ins = now;</span><br><span class="line">        era = *pre; s.<span class="built_in">erase</span>(pre);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == f)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    ma = <span class="built_in">max</span>(ma, (<span class="keyword">int</span>)s.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">if</span> (era.first)</span><br><span class="line">    &#123;</span><br><span class="line">        s.<span class="built_in">insert</span>(era);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(now.first)</span><br><span class="line">    s.<span class="built_in">erase</span>(now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n); ma = <span class="number">0</span>; s.<span class="built_in">clear</span>();</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="built_in">mapa</span>(<span class="number">1e9</span>, <span class="number">1e9</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)head[i] = <span class="number">0</span>;</span><br><span class="line">    ecnt = <span class="number">0</span>; dfn_clock = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);<span class="comment">// add(a[i], i); add(i, a[i]);//a</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;u); <span class="built_in">add</span>(u, i); <span class="built_in">add</span>(i, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>); ecnt = <span class="number">0</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)head[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)<span class="built_in">add</span>(a[i], i), <span class="built_in">add</span>(i, a[i]);</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ma<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;_);</span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="comment">//printf(&quot;\n&quot;); fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多 练</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vp</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>计数</tag>
        <tag>欧拉序</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 727 (Div. 2)A-D</title>
    <url>/2022/03/11/CF1539/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1539">题目链接</a></p>
<p>2022.03.07</p>
<p>四题，但是A+1(WA),C+2(WA),D+2(RE)。</p>
<span id="more"></span>
<p>A.$n$个人参加比赛，第一个人在$0$时刻开始参加，第二个人在$x$时刻开始，第三个在$2x$时刻开始……每个人持续的时间为$t$.定义一个人的不满意度为他结束比赛时，正在参加或刚刚开始比赛的人数。求这$n$个人的不满意度之和。</p>
<p>这东西就是一个台阶，设$tmp=t/x$,这$n$个人的不满意度分别为$tmp,tmp,\cdots,tmp,tmp-1,\cdots,1,0$,求和得$ans=tmp·n-(tmp+1)tmp/2$.还有一种情况是$tmp&gt;n$,此时不满意度分别为$n-1,n-2,\cdots,0$.答案为$n(n-1)/2$.</p>
<p>B.维护26个前缀和就完了，比A还水。</p>
<p>C.$n$个学生$(n\le 200000)$，第$i$个学生的能力值为$a_i$.要将其分配到不同的组。称一个组是稳定的，如果将该组的能力值排序后相邻两个能力值的差的绝对值不超过$x$。你可以增加最多$k$个任意能力值的学生，求分配的组数量最小值。</p>
<p>贪心即可，先将原序列排序，然后求两个相邻数的差，如果小于等于$x$则忽略，否则你可以放入一定数量的学生将其连接，容易计算代价为$\frac{a[i]-a[i-1]-1}{x}$.然后对所有代价排序，选到不能选为止。</p>
<p>开ll。</p>
<p>D.有一家商店，$n$种物品，每种数量无限，单价为2元。对于第$i$种物品，你需要购买$a_i$件，同时有一个$b_i$，表示如果你买的物品（不管是哪一种）总数不小于$b_i$的话，则第$i$种物品的单价变为1元。求最小花费。</p>
<p>一个比较奇怪的贪心。</p>
<p>反正肯定要开始买，买的数量应该是先达到$b$的最小值，然后达到次小值，次次小值……所以先把物品按$b$排序(当时逆天了，用结构体就可以但是硬是分开了所以用了id记对应a中的位置)，但是现在要买哪件物品还不确定，我们去买$b$最大的物品，因为它最不可能打折。假如我们买了一定数量的物品使得购买数等于$b$的最小值了，那么我们现在就把对应的物品全都买了，因为它不可能更便宜了，然后检查次小值能不能买……</p>
<p>总结上述过程，可以维护两个指针$l,r$，当$l$处的物品不能打折时，我们从后往前购买买到$l$处打折，打折后从前往后购买，递增$l$，直到达不到$l$的打折标准；然后又从后买。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 200110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll b; <span class="keyword">int</span> id;</span><br><span class="line">&#125;e[MAXN];</span><br><span class="line">ll a[MAXN]; <span class="keyword">int</span> vis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node <span class="keyword">const</span> &amp;a,Node <span class="keyword">const</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.b &lt; y.b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;a[i], &amp;e[i].b);</span><br><span class="line">        e[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(e + <span class="number">1</span>, e + n + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    ll nowbuy = <span class="number">0</span>; ll nowc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (nowbuy &lt; e[l].b&amp;&amp;r&gt;=<span class="number">1</span>)<span class="comment">//不能有优惠</span></span><br><span class="line">        &#123;</span><br><span class="line">            ll d = e[l].b - nowbuy;</span><br><span class="line">            <span class="keyword">if</span> (a[e[r].id] &gt; d)</span><br><span class="line">            &#123;</span><br><span class="line">                a[e[r].id] -= d;</span><br><span class="line">                nowbuy += d;</span><br><span class="line">                nowc += (<span class="number">2</span>-vis[e[r].id]) * d;<span class="comment">//买到有优惠</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                nowbuy += a[e[r].id]; nowc += (<span class="number">2</span> - vis[e[r].id]) * a[e[r].id];</span><br><span class="line">                a[e[r].id] = <span class="number">0</span>;<span class="comment">//买光了</span></span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//id[l]有优惠</span></span><br><span class="line">        <span class="keyword">while</span> (nowbuy &gt;= e[l].b&amp;&amp;l&lt;=n)</span><br><span class="line">        &#123;</span><br><span class="line">            nowbuy += a[e[l].id]; nowc += a[e[l].id];</span><br><span class="line">            a[e[l].id] = <span class="number">0</span>;</span><br><span class="line">            vis[e[l].id] = <span class="number">1</span>; l++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, nowc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>E</p>
<p>有空再补</p>
<p>F</p>
<p>有能力再补</p>
]]></content>
      <categories>
        <category>vp</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1567E Non-Decreasing Dilemma</title>
    <url>/2022/02/15/CF1567E/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1567/problem/E">题目链接</a></p>
<p>2022.2.27改正了一些地方</p>
<hr>
<p>给定数组$a$，长度为$n$，有两种操作：</p>
<p><code>1 x y</code>：把$a[x]$改为$y$;</p>
<p><code>2 l r</code>：求区间$[l,r]$内有多少对$(p,q)$满足$l\le p\le q\le r$且$a[p]\le a[p+1]\le \cdots\le a[q].$</p>
<span id="more"></span>
<p>就是线段树。。。。单点修改区间查询。</p>
<p>考虑pushup合并左右儿子的过程。记$o$为合并后的区间对应的节点，$ls$为左儿子，$rs$为右儿子。肯定要维护答案$num$，$p,q$都落在左区间或都落在右区间都是满足的，然后如果p落在左区间，q落在右区间的时候序列也有可能接上，产生贡献，因此要维护区间的从左边向右延伸的最大不降长度$llen$,从右向左的$rlen$。当左区间右端点不大于右区间左端点时，贡献为左儿子的$rlen$乘上右儿子的$llen$.</p>
<p>于是$tr[o].sum=tr[ls].sum+tr[rs].sum+(a[tr[ls].r]\le a[tr[rs].l])?tr[ls].rlen*tr[rs].llen:0.$</p>
<p>$tr[o].llen,tr[o].rlen$的维护也差不多，大部分情况直接继承左、右区间的就行，但是有可能左区间整段都不下降，llen延伸到右区间，此时：$tr[o].llen=tr[ls].r-tr[ls].l+1+tr[rs].llen$.$rlen$同理。</p>
<p>然后是查询，查询的过程和pushup合并几乎是一样的，于是可以考虑另写一个merge函数来统一使用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 400110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> a[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r; ll num, llen, rlen;<span class="comment">//左、右最长不下降</span></span><br><span class="line">&#125;tr[MAXN * <span class="number">4</span>];</span><br><span class="line"><span class="function">Node <span class="title">merge</span><span class="params">(Node ls, Node rs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node res;</span><br><span class="line">    res.num = ls.num + rs.num;</span><br><span class="line">    res.l = ls.l; res.r = rs.r;</span><br><span class="line">    res.llen = ls.llen; res.rlen = rs.rlen;</span><br><span class="line">    <span class="keyword">if</span> (a[ls.r] &lt;= a[rs.l])<span class="comment">//&lt;=</span></span><br><span class="line">    &#123;</span><br><span class="line">        res.num += ls.rlen * rs.llen;</span><br><span class="line">        <span class="keyword">if</span> (ls.llen == ls.r - ls.l + <span class="number">1</span>)</span><br><span class="line">            res.llen += rs.llen;</span><br><span class="line">        <span class="keyword">if</span> (rs.rlen == rs.r - rs.l + <span class="number">1</span>)</span><br><span class="line">            res.rlen += ls.rlen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[o] = <span class="built_in">merge</span>(tr[o &lt;&lt; <span class="number">1</span>], tr[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[o].l == tr[o].r)</span><br><span class="line">    &#123;</span><br><span class="line">        a[pos] = val; <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (tr[o].l + tr[o].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (pos &gt; mid)</span><br><span class="line">        <span class="built_in">change</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, pos, val);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">change</span>(o &lt;&lt; <span class="number">1</span>, pos, val);</span><br><span class="line">    <span class="built_in">pushup</span>(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//printf(&quot;%d %d\n&quot;, l, r);</span></span><br><span class="line">    tr[o].l = l, tr[o].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[o].num = <span class="number">1</span>; tr[o].llen = tr[o].rlen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(o &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node <span class="title">query</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[o].l == l &amp;&amp; tr[o].r == r)<span class="keyword">return</span> tr[o];</span><br><span class="line">    <span class="keyword">int</span> mid = (tr[o].l + tr[o].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid)<span class="keyword">return</span> <span class="built_in">query</span>(o &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid)<span class="keyword">return</span> <span class="built_in">query</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">merge</span>(<span class="built_in">query</span>(o &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">query</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, q; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t, x, y; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;t, &amp;x, &amp;y);</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">change</span>(<span class="number">1</span>, x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">query</span>(<span class="number">1</span>, x, y).num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;<span class="comment">//scanf(&quot;%d&quot;, &amp;_);//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//printf(&quot;\n&quot;); //fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1615D X(or)-mas Tree</title>
    <url>/2022/01/19/CF1615D/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1615/problem/D">题目链接</a></p>
<p>给定一棵树，$n$个点，边带有权值$v$,如果$v=-1$，说明你要给其赋值。有$m$个限制$(x,y,v):$说明从$x$到$y$的简单路径上所有边的异或值的1的个数的奇偶性和$v$相同。要求给出构造方式，或说明无解。</p>
<span id="more"></span>
<p>记parity(x)为x中1的个数的奇偶性，容易发现可以用parity(x)代替边权，不影响构造。</p>
<p>把无根树转成有根树，令根为1，设$x$到根的异或值为$col_x$，边$(u,v)$的权值就是$col_u\oplus col_v$.这说明如果每个$col_x$确定了，答案就确定了。</p>
<p>对于限制$(x,y,v)$，发现$x$到$y$路径的异或=$col_x\oplus col_y$，形式和上面差不多，于是就把求边权转化为给点染色的问题。</p>
<p>先不考虑限制，并且不考虑值为-1的边构成的森林，对每一个连通分量，若其中一个点的权值确定了，其余的都可以唯一确定。再考虑限制，如果限制的边在不同的连通分量，则其中一个分量的点权可以唯一确定另一个分量的点权，所以森林也可以把限制的边加上。然后跑BFS,对于一个独立的分量，给它的一个点染色为0，然后求其他点权，顺便判断是否有矛盾。</p>
<p>输出答案时，如果边权为-1，就用col[x]^col[y]来确定，否则不变。</p>
<p>（至今没想明白为什么用ecnt清空会T，不是树吗，ecnt=2(n-1+m)&gt;=n的，改成enct+10过了）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 400010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="comment">//#define lowbit(x) x&amp;(-x) //nt玩意</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> col[MAXN];</span><br><span class="line">vector&lt;tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> nxt, to, w;</span><br><span class="line">    &#125;e[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> head[MAXN &lt;&lt; <span class="number">1</span>], ecnt = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        e[++ecnt].nxt = head[from];</span><br><span class="line">        e[ecnt].to = to;</span><br><span class="line">        e[ecnt].w = w;</span><br><span class="line">        head[from] = ecnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ecnt+<span class="number">10</span>; i++)</span><br><span class="line">            head[i] = <span class="number">0</span>;</span><br><span class="line">        ecnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;G, forest;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">parity</span><span class="params">(<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (w)</span><br><span class="line">    &#123;</span><br><span class="line">        res ^= (w &amp; <span class="number">1</span>);</span><br><span class="line">        w &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    q.<span class="built_in">push</span>(st);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = forest.head[t]; i; i = forest.e[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> w = forest.e[i].w, go = forest.e[i].to;</span><br><span class="line">            <span class="keyword">if</span> (col[go] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                col[go] = col[t] ^ w;</span><br><span class="line">                q.<span class="built_in">push</span>(go);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (col[go] ^ col[t] ^ w)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = G.head[u]; i; i = G.e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> go = G.e[i].to, w = G.e[i].w;</span><br><span class="line">        <span class="keyword">if</span> (go == fa)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (w == <span class="number">-1</span>)</span><br><span class="line">            ans.<span class="built_in">push_back</span>(<span class="built_in">make_tuple</span>(u, go, col[u] ^ col[go]));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans.<span class="built_in">push_back</span>(<span class="built_in">make_tuple</span>(u, go, w));</span><br><span class="line">        <span class="built_in">dfs</span>(go, u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        col[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">        G.<span class="built_in">add</span>(u, v, w);</span><br><span class="line">        G.<span class="built_in">add</span>(v, u, w);</span><br><span class="line">        <span class="keyword">if</span> (w &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            w = <span class="built_in">parity</span>(w);</span><br><span class="line">            forest.<span class="built_in">add</span>(u, v, w);</span><br><span class="line">            forest.<span class="built_in">add</span>(v, u, w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">        forest.<span class="built_in">add</span>(u, v, w); forest.<span class="built_in">add</span>(v, u, w);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//连上后也可以唯一确定点权</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (col[i] == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            col[i] = <span class="number">0</span>;<span class="comment">//一个连通分量标一个根</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">bfs</span>(i))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">                G.<span class="built_in">clear</span>(); forest.<span class="built_in">clear</span>(); ans.<span class="built_in">clear</span>();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">    <span class="comment">//由点权确定边权</span></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : ans)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, get&lt;<span class="number">0</span>&gt;(it), get&lt;<span class="number">1</span>&gt;(it), get&lt;<span class="number">2</span>&gt;(it));</span><br><span class="line">    &#125;</span><br><span class="line">    G.<span class="built_in">clear</span>(); forest.<span class="built_in">clear</span>(); ans.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;_);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//printf(&quot;\n&quot;); //fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>染色</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1632D New Year Concert</title>
    <url>/2022/01/31/CF1632D/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1632/problem/D">题目链接</a></p>
<p>题意：定义序列$b_1,b_2,\cdots,b_k$是无聊序列当且仅当存在$1\le l\le r\le k$使得$\gcd(b_l,b_{l+1}\cdots,b_{r-1},b_r)=r-l+1$.一次操作可以将序列的一个元素赋为一个值，定义$f(b)$为将序列$b$变成非无聊序列的最小操作数。</p>
<p>给定$a_1,a_2,\cdots,a_n$，要求输出$f(a_1),f(a_1,a_2),\cdots,f(a_1,a_2,\cdots,a_n).$</p>
<span id="more"></span>
<p>先挖点性质。。。</p>
<ol>
<li>区间gcd具有区间包含单调性，即如果$l_1\le l_2\le r_2 \le r_1$,则$\gcd([l_1,r_1])\leq\gcd([l_2,r_2])$.区间长度增大，gcd不会变大，因此固定l或r,另一端向外拓展时最多只有一个点使得序列无聊。</li>
<li>修改操作怎么贪怎么来，如果序列不无聊就不用改了（废话），如果恰有端点使得序列无聊，就把区间端点处a的值改为一个大质数。这样，在边界内，gcd&gt;len,边界处和边界外gcd=1&lt;len.</li>
</ol>
<p>然后题目要求从左往右扫，答案应该是不减的。考虑从$[a_1,\cdots,a_{i-1}]$转移到$[a_1,\cdots,a_{i}]:$答案最多增加1（是否改$a_{i}$），也就是固定右端点i+1,二分左端点，询问是否存在区间gcd==len，用ST表预处理区间gcd，如果存在就改$a_{i}$,答案++，改了之后前面$[a_1,\cdots,a_i]$就不用考虑了，即之后二分的左边界变为i+1，这样ST表正确性不会被影响。时间复杂度$O(n\log^2 n).$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 500010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x, ll n = MOD - <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">            res *= x, res %= MOD; x = x * x; x %= MOD; n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[MAXN],st[MAXN][<span class="number">20</span>];</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !b ? a : <span class="built_in">gcd</span>(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qry</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="built_in">log2</span>(r - l + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (r == l)<span class="keyword">return</span> st[l][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">gcd</span>(st[l][t], st[r - (<span class="number">1</span> &lt;&lt; t) + <span class="number">1</span>][t]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]); st[i][<span class="number">0</span>] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; i++)</span><br><span class="line">            st[i][j] = <span class="built_in">gcd</span>(st[i][j - <span class="number">1</span>], st[i + (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>)][j - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pre = <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans++; pre = i + <span class="number">1</span>;<span class="comment">//修改pre处的数为大质数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> l = pre, r = i, mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> has = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (l &lt;= r)<span class="comment">//ck [pre,i]</span></span><br><span class="line">            &#123;</span><br><span class="line">                mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> g = <span class="built_in">qry</span>(mid, i);</span><br><span class="line">                <span class="keyword">if</span> (g &gt; (i - mid + <span class="number">1</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (g &lt; (i - mid + <span class="number">1</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    ans++; pre = i + <span class="number">1</span>; <span class="keyword">break</span>;<span class="comment">//gcd==len</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>; <span class="comment">//scanf(&quot;%d&quot;, &amp;_);//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="comment">//fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>二分</tag>
        <tag>st表</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1624G  MinOr Tree(最小或生成树)</title>
    <url>/2022/01/11/CF1624G/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1624/problem/G">题目链接</a></p>
<p>求一个图的最小或生成树（树的边权取或最小）。</p>
<span id="more"></span>
<p>（div3都打不动，太菜了）</p>
<p>直接对答案从高位到低位考虑贪心，如果答案第j位可以取0，说明边权第j位是0的所有边组成的子图是连通图，之后的图也只能从这个子图中取，逆命题也成立。如果边权第j位是0的所有边组成的子图不能使图连通，说明答案的这位只能是1，直接给答案加上这一位的贡献就行。连通性用并查集维护，判断完一位就重新初始化。</p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 200010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="comment">/*int n, m;</span></span><br><span class="line"><span class="comment">string s[1010];</span></span><br><span class="line"><span class="comment">struct edge</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int id, l, r;</span></span><br><span class="line"><span class="comment">&#125;e[10][10];*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w, ban;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="number">1</span>]; <span class="keyword">int</span> ecnt;</span><br><span class="line"><span class="keyword">int</span> fa[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == fa[x] ? x : fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)fa[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*scanf(&quot;%d&quot;, &amp;n, &amp;m);</span></span><br><span class="line"><span class="comment">    for (int i = 1; i &lt;= n; i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        cin &gt;&gt; s[i];</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    string t; cin &gt;&gt; t;</span></span><br><span class="line"><span class="comment">    for (int i = 1; i &lt;= n; i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        for (int j = 1; j &lt; m; j++)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            int from = s[i][j - 1]-&#x27;0&#x27;, to = s[i][j]-&#x27;0&#x27;, id = i;</span></span><br><span class="line"><span class="comment">            e[from][to] = edge&#123; id,j - 1,j &#125;;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> n, m; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">        e[i].u = u, e[i].v = v; e[i].w = w;</span><br><span class="line">        e[i].ban = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>; <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">30</span>; j &gt;=<span class="number">0</span> ; j--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">init</span>(n); <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m&amp;&amp;cnt&lt;n<span class="number">-1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = e[i].u, v = e[i].v, w = e[i].w;</span><br><span class="line">            <span class="keyword">if</span> ((w &gt;&gt; j)%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;!e[i].ban)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">same</span>(u, v)) &#123;</span><br><span class="line">                    fa[<span class="built_in">find</span>(u)] = <span class="built_in">find</span>(v); cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt &lt; n - <span class="number">1</span>)</span><br><span class="line">            ans |= (<span class="number">1LL</span> &lt;&lt; j),flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>((e[i].w&gt;&gt;j)&amp;<span class="number">1</span>) </span><br><span class="line">                    e[i].ban = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;_);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);<span class="comment">//fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1633D,E</title>
    <url>/2022/02/02/CF1633D,E/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1633/problem/D">D题</a>，<a href="https://codeforces.com/contest/1633/problem/E">E题</a></p>
<p>D. Make Them Equal</p>
<p>题意：给定大小为n的数组a，b，c。a的初始值都是1，一次操作可以选择正整数$x$把$a[i]$变成$a[i]+\lfloor \frac{a[i]}{x}\rfloor$，如果有$a[i]=b[i]$，就可以获得$c[i]$的分数，求进行不超过$k$次操作的最大分数，多测。$t\le 100,k\le10^6,1\le b[i]\le 1000,1\le c[i]\le 10^6,\sum n\le 10^3.$</p>
<p>E. Spanning Tree Queries</p>
<p>题意：给定$n\le50$个点，$m\le 300$条带权边$w_i$，有$q\le10^7$次询问，每次给定一个$x$,把每条边的边权变成$|w_i-x|$，求最小生成树，最后回答所有询问的异或和即可。前$p$个询问手动给出，其余由递推式$q[i]=(a*q[i-1]+b)\mod c$给出。(公式百分号显示不出来很奇怪)</p>
<span id="more"></span>
<p>感觉前面4题过于裸，不太像CF，然后D题和E题跨度有点大。。。</p>
<p>D.预处理出将1变成1到1000每个数的最小花费（类似最短路），然后就变成了背包问题。但是背包复杂度是$O(nW)$的，$W$是背包容量。直接写过不了，又发现花费最大不超过12，也就是当$k&gt;12000$就可以当作全部装完了。比赛时逆天看漏个0喜提WA on 5,然后最后因为只改了前面的k没改干净直接输出dp[k]了又WA on 12。。。（不要问为什么不直接k=min(k,12000),因为我是sb）看一下这题重测的数据就nm离谱，有很多都差不多，都是无脑拉满，常数猎杀者属于是，早知道我也去hack了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 500010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x, ll n = MOD - <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">            res *= x, res %= MOD; x = x * x; x %= MOD; n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % MOD;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;g[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//printf(&quot;%d:&quot;, i);</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>, r; l &lt;= i; l = r + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            r = i / (i / l); <span class="keyword">int</span> tt = i / l;</span><br><span class="line">            g[i].<span class="built_in">push_back</span>(i + tt);</span><br><span class="line">           <span class="comment">// printf(&quot;%d &quot;, tt);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">1</span>); dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;g[u].<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = g[u][i];</span><br><span class="line">            <span class="keyword">if</span> (dis[v]&gt;<span class="number">1e9</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">                dis[v] = dis[u] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">// printf(&quot;%d &quot;, dis[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> b[MAXN], c[MAXN]; ll dp[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//打表</span></span><br><span class="line">    <span class="keyword">int</span> n,k; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n,&amp;k);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="built_in">min</span>(k, <span class="number">12222</span>); i++)dp[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        b[i] = dis[b[i]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="built_in">min</span>(k,<span class="number">12222</span>); j &gt;= b[i]; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - b[i]] + c[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, dp[<span class="built_in">min</span>(k,<span class="number">12222</span>)]);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;_);<span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="comment">//fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>E. Spanning Tree Queries</p>
<p>先看看暴力$O(km\log m)$，肯定跑不过。~~不做了。~~瓶颈在于每次都要求最小生成树。</p>
<p>​	基本思路：重新考虑Kruscal的过程，先是给边排序，然后并查集贪，如果选边的顺序不变，那么最后的生成树形态也就不会变，变的只有每条边的权值。又注意到$x$分别位于$\frac{w_i+w_j}{2}$左右两端时，$w_i$和$w_j$的相对次序会发生变化，这样的分界点最多有$O(m^2)$个，划分出不同的区间。考虑令x落在左闭右开区间$[L_i,L_{i+1})$形成的最小生成树都一样，先求出每个$L_i$的最小生成树权值$val_i$，这部分复杂度是$O(m^3\log m)$。考虑答案如何转移：此时树的形态已经固定了。x每增加1，最小生成树中权值大于$L_i$的边权-1,权值小于或等于$L_i$的边权+1.答案变化因此求MST时维护严格大于$L_i$的数量geq和不大于$L_i$的数量leq，x的最小生成树权值$res=val_i+(x-L_i)*(leq-geq).$这个转移是$O(1)$的，因此总复杂度$O(m^3\log m+k\log m^2)$。</p>
<p>​	注意的点：分界点边界问题有点难讨论，按理说应该是左端点应该是$\lceil\frac{w_i+w_j}{2}\rceil$吧，但其实加多几个问题不大，把$\lfloor\frac{w_i+w_j}{2}\rfloor$加上也行。还有就是求$L$对应的MST时边里可能有$|w_i-L|=|w_{i+1}-L|$的边，然后当x=L+1,2,…时，两者的次序就变了，事实上应该先选$w$大的边，而不是都可以，因为这样geq会大一些。所以排序还得加第二关键字。看别人写的是有对询问排序然后一块一块处理的，就没找到有这个问题，很怪，但是这样就有$O(k\log k)$这项了，感觉还是慢了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x, ll n = MOD - <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">            res *= x, res %= MOD; x = x * x; x %= MOD; n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">&#125;e[MAXN];</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node <span class="keyword">const</span>&amp; a, Node <span class="keyword">const</span>&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(a.w - x) == <span class="built_in">abs</span>(b.w - x) ? a.w &gt; b.w:<span class="built_in">abs</span>(a.w - x) &lt; <span class="built_in">abs</span>(b.w - x);</span><br><span class="line">    <span class="comment">//return abs(a.w - x) &lt; abs(b.w - x);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> fa[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)fa[i] = i; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == fa[x] ? x : fa[x] = <span class="built_in">find</span>(fa[x]); &#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y); &#125;</span><br><span class="line"><span class="keyword">int</span> L[MAXN], tot;<span class="comment">//[L[i],L[i+1])</span></span><br><span class="line">ll q[MAXN * <span class="number">100</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MST</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll val; <span class="keyword">int</span> leq, geq;</span><br><span class="line">&#125;mst[<span class="number">99999</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m; cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        cin &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].w;</span><br><span class="line">    <span class="built_in">sort</span>(e + <span class="number">1</span>, e + m + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            L[++tot] = (e[i].w + e[j].w) / <span class="number">2</span>;</span><br><span class="line">            L[++tot] = (e[i].w + e[j].w + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//L[++tot] = (e[i].w + e[j].w - 1) / 2;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(L + <span class="number">1</span>, L + tot + <span class="number">1</span>);</span><br><span class="line">    tot = <span class="built_in">unique</span>(L, L + tot + <span class="number">1</span>) - L - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> p, k, a, b, c;</span><br><span class="line">    cin &gt;&gt; p &gt;&gt; k &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; q[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = p + <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">        q[i] = (<span class="number">1LL</span> * a * q[i - <span class="number">1</span>] + b) % c;</span><br><span class="line">    <span class="comment">//询问不排序</span></span><br><span class="line">    <span class="comment">//L[0] = -9;</span></span><br><span class="line">    L[++tot] = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= tot; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x = L[i];</span><br><span class="line">        <span class="built_in">sort</span>(e + <span class="number">1</span>, e + m + <span class="number">1</span>, cmp);</span><br><span class="line">        <span class="built_in">init</span>(n); <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m &amp;&amp; cnt &lt; n - <span class="number">1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = e[j].u, v = e[j].v; ll w = e[j].w;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">same</span>(u, v))</span><br><span class="line">            &#123;</span><br><span class="line">                fa[<span class="built_in">find</span>(u)] = <span class="built_in">find</span>(v);</span><br><span class="line">                cnt++;</span><br><span class="line">                <span class="keyword">if</span> (w &gt; x)mst[i].geq++;</span><br><span class="line">                <span class="keyword">else</span> mst[i].leq++;</span><br><span class="line">                mst[i].val += <span class="built_in">abs</span>(w - x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//求本质不同MST以及存大、小于分界点的MST边数</span></span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> belong = <span class="built_in">upper_bound</span>(L, L + tot + <span class="number">1</span>, q[i]) - L - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//int leq = upper_bound(e + 1, e + m + 1, q[i]) - e - 1, geq = m - leq;不是这个</span></span><br><span class="line">        ll res = mst[belong].val+<span class="number">1LL</span>*(q[i] - L[belong]) * (mst[belong].leq - mst[belong].geq);</span><br><span class="line">        ans ^= res;</span><br><span class="line">        <span class="comment">//printf(&quot;~%lld\n&quot;, res);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">    <span class="comment">//x的转移：生成树不变的话，答案转移和新的x无关，只和原来的生成树的分界点有关</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>); cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>; <span class="comment">//scanf(&quot;%d&quot;, &amp;_);//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="comment">//fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>图论</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>生成树</tag>
        <tag>最短路</tag>
        <tag>背包</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1634D Finding Zero</title>
    <url>/2022/02/08/CF1634D/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1634/problem/D">题目链接</a></p>
<p>这是一道交互题，现有数组$a[1],a[2],\cdots,a[n](n\ge 4)$,其中只有一个值为0，其余都为正数。你可以做不超过$2n-2$次形如<code>? i j k</code>($i,j,k$互不相同)的询问，会返回$\max(a[i],a[j],a[k])-\min(a[i],a[j],a[k])$的值，然后你有两次机会回答0所在的位置，回答形式：<code>! i j</code>。</p>
<span id="more"></span>
<p>没看官方题解，官方题解好像是每4个一组找。</p>
<p>题解：</p>
<p>$2n$提示可以遍历两次。先不考虑各种极端情况：先固定1,2（很普通，即认为1,2都不是最值），剩下一个从3到n问一遍，答案最大的一定是个最值，下标记为mapos，然后ask(1,mapos,i)，$i\neq 1,i\neq mapos$，答案最大的就是另一个最值。此时输出两个最值下标即可。询问次数$2(n-2)$.</p>
<p>但是如果$a[1],a[2]$都是最值，则第一次遍历时询问的答案都是相等的，但是逆命题不成立，即答案都相等的话$a[1],a[2]$不一定是最值，例如1 1 2 2 0。如果能确定$a[1],a[2]$是最值，那么输出1,2即可。即使第一次遍历找到了最大值，如果$a[1]=0$，则第二次询问的答案也是相等的，不过此时逆命题成立。</p>
<p>下面考虑答案都相等的情形（前提）。记答案都相等的值为ans，$mi=\min(a[1],a[2]),mx=\max(a[1],a[2]),max=\max(a[1],\cdots,a[n]).$</p>
<p>注意到0只有一个（最大值可以有很多个），**所以对于所有可能的询问，当且仅当同时询问到最大值和0时取得答案最大值ans’=*max_element(a+1,a+n+1)。**如果$a[1],a[2]$都是最值，则单独去掉$a[1],a[2]$再做询问，其值必然比ans小。所以考虑另找两个数做询问：r=ask(1,3,4),s=ask(2,3,4)。</p>
<p>考虑$a[3],a[4]$的分布情况r与ans,s与ans的大小关系，有可能有以下几种情况：</p>
<ol>
<li>$a[1],a[2]$都是最值。即$0=mi&lt;mx=max.\Rightarrow r&lt;ans=ans’,s&lt;ans=ans’$.</li>
<li>$a[1],a[2]$都不是最值，即$0&lt;mi\le mx &lt;max=a[i]\ (for\ i:a[i]\neq 0)$，有两种：
<ol>
<li>$a[3]=a[4]=max.\Rightarrow r,s有一个=ans,另一个\le ans$.</li>
<li>$a[3],a[4]$中有一个取0一个取$max$.$\Rightarrow r=ans’&gt;ans,s=ans’&gt;ans.$</li>
</ol>
</li>
<li>$a[1],a[2]$中有一个最值，另一个不是最值，有两种：
<ol>
<li>最值为$max$.即$0&lt;mi\le max=mx$.这种情况不可能发生，因为0只有一个，ask(1,2,i)当遍历到a[i]=0时答案为$ans’$比其他答案都严格大，不满足前提。</li>
<li>最值为0.即$0=mi&lt;mx&lt;max=2*mx=a[i]\ (for\ i:a[i]\neq 0)$（由$mx&lt;max$知$ans=max=ans’$,且$a[1]=0||a[2]=0$推出$a[3]=a[4]=\cdots a[n]=max$）.此时$ans=ans’\Rightarrow r,s有一个=ans,另一个&lt;ans$.</li>
</ol>
</li>
</ol>
<p>合并一下情况，当r&gt;ans且s&gt;ans时，输出3，4；当r&lt;ans且s&lt;ans时，输出1，2；对于其余两种情况，可以发现$a[3],a[4]$一个取max,另一个不为0，也满足最开始的想法，固定3,4,遍历i即可准确找到，询问次数$n-2+2+n-2=2n-2.$</p>
<p>注意第二次遍历时不能用*max_element==*min_element来判，因为对于i=mapos是没有被问的，可以用set去重。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> ch[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> test = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;? %d %d %d\n&quot;</span>, a, b, c); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!test)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;ans);</span><br><span class="line">    <span class="keyword">else</span> ans = <span class="built_in">max</span>(&#123; ch[a],ch[b],ch[c] &#125;) - <span class="built_in">min</span>(&#123; ch[a],ch[b],ch[c] &#125;);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (test)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;ch[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ma = <span class="number">-1</span>, mapos = <span class="number">0</span>, ma2pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> prs = <span class="built_in">ask</span>(<span class="number">1</span>, <span class="number">2</span>, i); res[i] = prs;</span><br><span class="line">    &#125;</span><br><span class="line">    mapos = <span class="built_in">max_element</span>(res + <span class="number">3</span>, res + n + <span class="number">1</span>) - res; ma = res[mapos];</span><br><span class="line">    <span class="keyword">if</span> (*<span class="built_in">min_element</span>(res + <span class="number">3</span>, res + n + <span class="number">1</span>) == *<span class="built_in">max_element</span>(res + <span class="number">3</span>, res + n + <span class="number">1</span>))<span class="comment">//极端情形</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> rrr = <span class="built_in">ask</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), sss = <span class="built_in">ask</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span> (rrr &gt; ma &amp;&amp; sss &gt; ma)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;! 3 4&quot;</span>); <span class="built_in">fflush</span>(stdout); <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (rrr &lt; ma &amp;&amp; sss &lt; ma)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;! 1 2&quot;</span>); <span class="built_in">fflush</span>(stdout); <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//3，4一个取max，另一个不为0</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">3</span> || i == <span class="number">4</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    res[i] = <span class="number">0</span>; <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> prs = <span class="built_in">ask</span>(<span class="number">3</span>, <span class="number">4</span>, i); res[i] = prs;</span><br><span class="line">            &#125;</span><br><span class="line">            ma2pos = <span class="built_in">max_element</span>(res + <span class="number">1</span>, res + n + <span class="number">1</span>) - res;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;! %d %d&quot;</span>, ma2pos, ma2pos); <span class="built_in">fflush</span>(stdout); <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//给出的答案不完全等</span></span><br><span class="line">    set&lt;<span class="keyword">int</span>&gt;st;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == mapos)</span><br><span class="line">        &#123;</span><br><span class="line">            res[i] = <span class="number">0</span>; <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> pp = <span class="built_in">ask</span>(<span class="number">1</span>, mapos, i); res[i] = pp;</span><br><span class="line">        st.<span class="built_in">insert</span>(pp);</span><br><span class="line">    &#125;</span><br><span class="line">    ma2pos = <span class="built_in">max_element</span>(res + <span class="number">2</span>, res + <span class="number">1</span> + n) - res;</span><br><span class="line">    <span class="keyword">if</span> (st.<span class="built_in">size</span>() == <span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">&quot;! %d %d&quot;</span>, <span class="number">1</span>, mapos);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;! %d %d&quot;</span>, mapos, ma2pos);</span><br><span class="line">    <span class="built_in">fflush</span>(stdout);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    cin &gt;&gt; _;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>杂题</category>
      </categories>
      <tags>
        <tag>交互</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 771 (Div. 2) A-E</title>
    <url>/2022/03/19/CF1638/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1638">题目链接</a></p>
<p>2022.03.09</p>
<p>不会变通。。。D和E题补了后感觉都挺简单的</p>
<span id="more"></span>
<p>A.给一个排列$p_1,p_2,\cdots,p_n$，你有一次机会选择一段区间$[l,r]$翻转，要使得最后的序列字典序最小。</p>
<p>从左往右扫，找到第一个$p_i\neq i$的位置，再找到$p_j=i$的位置$j$，翻转$[i,j]$即可。</p>
<p>B.给一个数组$a_1,\cdots,a_n$，你可以进行以下操作无限次：如果$a_i+a_{i+1}$是奇数，则可以交换$a_i,a_{i+1}$.问能否把数组变成有序的。</p>
<p>相当于奇数和偶数之间可以交换，但是奇偶相同的两个不能交换。所以可以单独检查奇数是否有序，偶数是否有序，这就是充要条件。证明：如果奇偶都有序，可以通过冒泡的方法达到要求。</p>
<p>C.给定一个排列$p(n\le10^5)$生成的无向图，若$p_i,p_j$构成逆序对，则有边$(i,j)$。求该无向图的连通分量数。</p>
<p>只考虑从前往后连边，$p_i$连出的边为满足$j\in [i,n]$中$p_j&lt;p_i$的所有$(i,j)$。记其中最大的$j$为$jma$，$[i,jma]$中还没和$i$相连的一定是大于$p_i$的，所以也大于$p_{jma}$，所以会和$jma$相连，所以整个线段都是连通的。这样相当于对每个位置$i$，找到其最右边且$p_i&gt;p_j$的$j$。直接暴力肯定不行，可以考虑往空的数组里把1,2,…,n按顺序放到原来的位置，维护一个$r$。最后把这些线段合并。（可能写的有点丑）</p>
<p>D.有一个$n\times m$的棋盘和$2\times 2$的刷子，一次染色，可以把以$(i,j)$为左上角的$2\times 2$正方形区域内的格子染成颜色$c$。如果一个格子被多次染色，它的颜色为最后一次被覆盖后的颜色。给最后的染色结果，判断能否存在一种方案能得到该结果，如果有，输出方案。</p>
<p>最后一次染色一定会导致有$2\times 2$的正方形颜色相同，所以可以倒着染，所以每个格子的颜色为第一次被染色的结果。容易想到BFS，先找到$2\times 2$的正方形颜色相同的，$vis$标记为1，然后去检查包含$vis=1$的点周围4个$2\times 2$的正方形的颜色是否相同，如果相同，就可以继续标$vis$为1，加入输出方案。最后检查是不是所有点都被染过。注意检查$2\times 2$正方形颜色相同时，至少要有一个点的$vis$为0，不然相当于白染，会T。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 200110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line">vector&lt;tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;ans;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> dx[] = &#123; <span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span> &#125;, dy[] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> col[<span class="number">1005</span>][<span class="number">1005</span>], vis[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ckbound</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt;= <span class="number">1</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; y &lt; m &amp;&amp; vis[x][y] == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ckgd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;pa&gt;ok;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">ckbound</span>(x, y))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (col[x + i][y + j])ok.<span class="built_in">push_back</span>(<span class="built_in">mapa</span>(x + i, y + j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ok.<span class="built_in">empty</span>())<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ok.<span class="built_in">size</span>() - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (col[ok[i].first][ok[i].second] != col[ok[i + <span class="number">1</span>].first][ok[i + <span class="number">1</span>].second])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> col[ok[<span class="number">0</span>].first][ok[<span class="number">0</span>].second];</span><br><span class="line">&#125;</span><br><span class="line">queue&lt;pa&gt;q;<span class="comment">//存可以染色的点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ux = q.<span class="built_in">front</span>().first, uy = q.<span class="built_in">front</span>().second;q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="built_in">ckgd</span>(ux, uy);</span><br><span class="line">        <span class="keyword">if</span> (!res)<span class="keyword">continue</span>;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(&#123; ux,uy,res &#125;);</span><br><span class="line">        col[ux][uy] = col[ux + <span class="number">1</span>][uy] = col[ux][uy + <span class="number">1</span>] = col[ux + <span class="number">1</span>][uy + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">-1</span>; i &lt;= <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">-1</span>; j &lt;= <span class="number">1</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> res = <span class="built_in">ckgd</span>(ux + i, uy + j);</span><br><span class="line">                <span class="keyword">if</span> (res)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//ans.push_back(&#123; ux + i,uy + j,res &#125;);</span></span><br><span class="line">                    <span class="comment">//vis[ux + i][uy + j] = 1;</span></span><br><span class="line">                    q.<span class="built_in">push</span>(<span class="built_in">mapa</span>(ux + i, uy + j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;col[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">ckgd</span>(i, j))</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">mapa</span>(i, j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bfs</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            <span class="keyword">if</span> (col[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>); <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : ans)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, get&lt;<span class="number">0</span>&gt;(i), get&lt;<span class="number">1</span>&gt;(i), get&lt;<span class="number">2</span>&gt;(i));</span><br><span class="line">        <span class="comment">//col[get&lt;0&gt;(i)][get&lt;1&gt;(i)]=col[get&lt;0&gt;(i)+1][get&lt;1&gt;(i)]= col[get&lt;0&gt;(i)][get&lt;1&gt;(i)+1]=col[get&lt;0&gt;(i)+1][get&lt;1&gt;(i)+1]= get&lt;2&gt;(i);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>E.$n$个位置，每个位置的初始权值$a_i=0$,颜色为1.要维护三种操作：</p>
<p>1.将$[l,r]$的颜色染为$c(c\le n)$.</p>
<p>2.将所有当前颜色为$c$的点权值加上$x$.</p>
<p>3.询问$a_i$的值。</p>
<p>先不考虑操作一。</p>
<p>根据操作二，由于我们不可能找到所有含某种颜色的点来实际加，所以要给每种颜色维护一个懒加标记$lazyc[col]$，询问时回答$a[i]+lazyc[col[i]]$即可。</p>
<p>如果操作一的区间染色变成了单点染色，加入我们把$a_i$的颜色从$c’$变成了$c$，换了之后$c’$就找不到了，所以现在就要把$lazyc[c’]$的值加给$a[i].$又由于回答始终是$a[i]+lazyc[]$,所以要抵消掉新加上的$lazyc[c]$。即上述过程为：$a[i]+=lazyc[c’],col[i]=c,a[i]-=lazyc[c]$.</p>
<p>如果是区间染色，可以用线段树的懒标记维护。维护一个懒染色标记和懒惰加标记。询问时将两者下放。但是注意懒标记要多下放一层。因为区间染色会被覆盖，但是实际上值加的可能是前一个颜色的，不多下放一层的话很可能搞错。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls o&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs o&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r; ll lazyadd, lazycol;</span><br><span class="line">&#125;tr[MAXN * <span class="number">4</span>];</span><br><span class="line">ll lazyc[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[o].l = l; tr[o].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[o].lazycol = <span class="number">1</span>; <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(ls, l, mid); <span class="built_in">build</span>(rs, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[o].lazycol)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[ls].lazyadd += tr[o].lazyadd;</span><br><span class="line">        tr[rs].lazyadd+=tr[o].lazyadd; tr[o].lazyadd = <span class="number">0</span>;</span><br><span class="line">        tr[ls].lazycol = tr[rs].lazycol = tr[o].lazycol;</span><br><span class="line">        tr[o].lazycol = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> c)</span><span class="comment">//区间染色</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o &gt;= MAXN * <span class="number">4</span>)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (tr[o].l &gt;= l &amp;&amp; tr[o].r &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tr[o].lazycol)tr[o].lazyadd += lazyc[tr[o].lazycol] - lazyc[c];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">update</span>(ls, l, mid, c); <span class="built_in">update</span>(rs, mid + <span class="number">1</span>, r, c);</span><br><span class="line">        &#125;</span><br><span class="line">        tr[o].lazycol = c;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (tr[o].l + tr[o].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">pushdown</span>(o);</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid)<span class="built_in">update</span>(ls, l, r, c);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid)<span class="built_in">update</span>(rs, l, r, c);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">update</span>(ls, l, mid, c);</span><br><span class="line">        <span class="built_in">update</span>(rs, mid + <span class="number">1</span>, r, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushup</span>(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span><span class="comment">//实际上只能问单点，懒得改了</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r)<span class="keyword">return</span> <span class="number">1e18</span>;</span><br><span class="line">    <span class="keyword">if</span> (tr[o].l == tr[o].r)</span><br><span class="line">        <span class="keyword">return</span> tr[o].lazyadd + lazyc[tr[o].lazycol];</span><br><span class="line">    <span class="keyword">int</span> mid = (tr[o].l + tr[o].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">pushdown</span>(o);</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid)<span class="keyword">return</span> <span class="built_in">query</span>(ls, l, r);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid)<span class="keyword">return</span> <span class="built_in">query</span>(rs, l, r);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">query</span>(ls, l, mid), <span class="built_in">query</span>(rs, mid + <span class="number">1</span>, r));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">char</span> op[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r, c, x; <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, op);</span><br><span class="line">        <span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;c);</span><br><span class="line">            <span class="built_in">update</span>(<span class="number">1</span>, l, r, c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;c, &amp;x);</span><br><span class="line">            lazyc[c] += x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> i; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">query</span>(<span class="number">1</span>, i, i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多 练</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>vp</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 773 (Div. 2)A-E</title>
    <url>/2022/03/26/CF1642/</url>
    <content><![CDATA[<p><a href="">题目链接</a></p>
<p>2022.03.17</p>
<p>D赛中先是看错题了以为是细节题没写出来，然后才发现加的两个数要连着。。</p>
<p>2022.03.28迟来的E</p>
<span id="more"></span>
<p>A.给三角形的三个顶点的坐标，如果一个点存在至少一个$x$轴上的点，它们的连线不穿过三角形的内部区域，则这个点是好的。求所有不是好的点组成的曲线的长度。</p>
<p>可以发现只有当有一条边与$x$轴平行，且被完全遮挡才行（用$y$的绝对值判，因为没考虑这个WA了一次）</p>
<p>B.给一个数组$a$，若将其分为$k$组（不必连续），每个组的贡献为该组内不同数的个数，总贡献为每个组贡献的和。对于每个$k\in[1,n]$，求最小总贡献。</p>
<p>可以发现答案是单调的，当$k\le $所有$n$个数的种类数$cnt$时，答案都是$cnt$；当$k&gt;cnt$时，可以多分出一组。所以答案为$max(cnt,k).$</p>
<p>C.给一个大小为$n$的数组$a$，你要添加一些数，并将其重排为$b_{2i-1}*x=b_{2i}$。求待添加数的最小个数。</p>
<p>排个序贪心完事。</p>
<p>D.给一个大小为$n(\le 2000)$的数组$a$，在一次操作内，你可以在数组的任意位置插入两个连续且相同的数$c$。操作次数最多为$2n^2$次。操作完成后，你要给出对新数组的一个划分方式，把数组划分为若干段不重合且长度为偶数的线段，假设第$j$条线段长度为$2k$，对每段线段要满足$x_i=x_{i+k}$恒成立。要求给出操作过程和划分方式，或说明无解。</p>
<p>当有数出现次数为奇数的时候肯定无解，因为我们无法把他消去。否则一定能够造出解。</p>
<p>从前往后考虑，当前数$a_i$，找到其后面第一个$a_j=a_i$的数，考虑这段$a_ia_{i+1}…a_{j-1}a_j$：我们在$a_{j-1}$后插入一段回文串$a_{i}a_{i+1}…a_{j-1}a_{j-1}…a_{i+1}a_{i}$，然后就可以把前面的$a_i…a_{j-1}a_i…a_{j-1}$消掉，把$a_i$和$a_j$放在一起，长度可以减2.一直重复做就行。</p>
<p>E.有$n$个人到医院看病，构成一个队列，每个人可能有病也可能没病。要确定某个人是否得病。有两种操作，第一种是$t=0$给一个区间$[l,r]$和$x(x=0,1)$，如果$x$为0，则$[l,r]$上都没病；否则$[l,r]$上存在有病的，但不知道具体位置。第二种是$t=1$，根据之前时刻得信息推断某个人$j$是否得病。如果不能确定，输出N/A。</p>
<p>(参考了一些网上的代码)</p>
<p>要把一个人判成没病很简单，只需要存在$x=0,[l,r]$把它覆盖过就行。因此维护一个set表示可能有病的人的集合$s$，不在集合$s$中的一定没病，每次执行$t=0,x=0,[l,r]$时，就把集合$s$中$[l,r]$的元素删掉。</p>
<p>关键是怎么判断有病。</p>
<p>如果知道了一个区间内有人有病，而除了询问的位置，其余人都没病，询问的位置一定有病。如[3,8]存在有病，然后假如又知道[4,5]没病，[7,8]没病，则5一定有病。然后如果$t=0,x=1,[l’,r’]\subseteq [l,r]$，则$[l,r]$的这个信息其实是无用的。所以用map维护pair表示区间。因为map默认按pair排序，所以如果当前$[l,r]$包含了之前的某个区间，则跳过；然后检查$[l,r]$的前一个区间是否把$[l,r]$包含了，如果是则去掉前一个区间。</p>
<p>在考虑$t=1$询问不是No的情况，故$j$在$s$中。找到$j$前、后不能确定没病的人的位置$l,r$，我们想在map中找到一个区间$[l_1,r_1]$，使得$l&lt; l_1\le r_1&lt; r$.如果上式成立，则$j$鉴定为有病，否则N/A。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 300110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;ll,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls o&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs o&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line">set&lt;<span class="keyword">int</span>&gt;s; map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;has;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, q; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">    s.<span class="built_in">clear</span>(); has.<span class="built_in">clear</span>();<span class="comment">//有病的区间</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n+<span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s.<span class="built_in">insert</span>(i);<span class="comment">//在集合中可能有病，不在一定没病</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> l, r, x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;x);</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">auto</span> it = s.<span class="built_in">lower_bound</span>(l);</span><br><span class="line">                <span class="keyword">while</span> (*it &lt;= r)</span><br><span class="line">                    it = s.<span class="built_in">erase</span>(it);<span class="comment">//要避免使用it++</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">auto</span> it = has.<span class="built_in">lower_bound</span>(l);</span><br><span class="line">                <span class="keyword">if</span> (it != has.<span class="built_in">end</span>() &amp;&amp; it-&gt;second &lt;= r)</span><br><span class="line">                    <span class="keyword">continue</span>;<span class="comment">//当前区间包含了已有的区间，当前区间没用</span></span><br><span class="line">                <span class="comment">//缩小区间</span></span><br><span class="line">                has[l] = r;</span><br><span class="line">                <span class="comment">//前一个区间是否包含[l,r]，如果包含，删除前一个区间</span></span><br><span class="line">                it = has.<span class="built_in">find</span>(l);</span><br><span class="line">                <span class="keyword">if</span> (it != has.<span class="built_in">begin</span>() &amp;&amp; <span class="built_in">prev</span>(it)-&gt;second &gt;= r)</span><br><span class="line">                    has.<span class="built_in">erase</span>(<span class="built_in">prev</span>(it));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> id; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;id);</span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">find</span>(id) == s.<span class="built_in">end</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//关键是区分yes和N/A</span></span><br><span class="line">                <span class="keyword">int</span> l = *<span class="built_in">prev</span>(s.<span class="built_in">find</span>(id)), r = *<span class="built_in">next</span>(s.<span class="built_in">find</span>(id));<span class="comment">//前后一个不能区分的</span></span><br><span class="line">                <span class="keyword">auto</span> it = has.<span class="built_in">upper_bound</span>(l);<span class="comment">//严格大于</span></span><br><span class="line">                <span class="keyword">if</span> (it != has.<span class="built_in">end</span>() &amp;&amp; it-&gt;first &lt;= id &amp;&amp; it-&gt;second &lt; r)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);<span class="comment">//该区间唯一包含一个不能确定的人</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;N/A\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="built_in">slv</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多 练</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vp</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 777 (Div. 2) A-D</title>
    <url>/2022/03/19/CF1647/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1647">题目链接</a></p>
<p>2022.03.11</p>
<p>手速恰分，D大讨论思路混乱不如写爆搜</p>
<p>好怪啊，为什么昨天的是CF1651,今天的是CF1647</p>
<span id="more"></span>
<p>A.构造一个最大的十进制数，数位之和为$n$且相邻两位不同。</p>
<p>因为数位和固定，所以肯定用1和2交替构造换大位数。如果是$1212\cdots$，要求$n\mod 3\neq 2$，如果是$2121\cdots$，要求$n \mod 3\neq 1$.发现当$n=3k+1$时取前者，否则后者。</p>
<p>B.不想写题意了，直接写解答，检查每个$2\times2$有没有小拐弯即可。</p>
<p>C.有一个$n\times m$的棋盘，初始时值全为0，一次操作，你可以选择一个左上角值为0的矩形区域，将这片区域棋盘染色，即从左上角出发填数，使得任意相邻两个格的值不同。染色会覆盖之前的结果。现在给最后的结果，求是否存在一种染色方式序列能得到该结果，如果能，输出方案。</p>
<p>只要$(1,1)$位置不为0，总可以构造。从最后一行开始，考虑$2\times 1$的矩形块，如果该格为1，则选择上一行和这一行构成的小矩形块染，否则不染；这样第$2$到第$n$行都可以满足。第一行也可以，只需把行变为列倒着考虑。</p>
<p>D.给数$x,d(2\le x,d\le 10^9)$，判断是否存在一种拆数方式，使得$x$被表示称不少于2个正整数之积，且每个正整数都是$d$的倍数且不是$d^2$的倍数。</p>
<p>设$x=d^k·div$,$div$不能被$d$整除。如下分类讨论。</p>
<p>若$k\le 1$，无解。以下情况$k\ge 2$。</p>
<p>若$div$为合数，则可以拆$div$，有解。以下情况$div$为质数或1。</p>
<p>若$div$为质数且$d$也为质数，只有一种方案，无解。以下情况$div$为质数或1，且$d$为合数。</p>
<ul>
<li>
<p>若$k\ge 4$，可以考虑拆一个$d=pq$，即$x=\underbrace{(d·div)·(d)\cdots(d)}<em>{k}=(d·div)·(pd)·(qd)\times\underbrace{\cdots(d)}</em>{k-3}$.</p>
</li>
<li>
<p>否则，$k=3$.</p>
<p>如果$d$里含有与$div$互质的因子$p$，则可以拆部分$d$.有解。</p>
<p>否则，$d=div^u$.若$u\ge 3$，有解，否则$u=2$无解。</p>
</li>
</ul>
<p>综上，当$k=3$时可以只判断$d=div^2$是否成立。</p>
]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>讨论</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 724 (Div. 2)A-E,F待补</title>
    <url>/2022/04/01/CF1536/</url>
    <content><![CDATA[<p><a href="https://codeforces.ml/contest/1536">题目链接</a></p>
<p>2022.03.18，D题写炸了</p>
<span id="more"></span>
<p>A.给定一个大小为$n$的数组$a$，$|a_i|\le 100,n\le100,a_i$互不相同。我们称一个数组$b$是好的当且仅当其中每个数互不相同，且对于任意$i\neq j$，$|b_i-b_j|$在$b$中出现过。能否构造一个大小不超过300的数组$b$，使得$a$中每个数都在$b$中出现，且$b$是好的。</p>
<p>脑子抽了，不知道自己写的啥。如果$a$有负数且$n&gt;1$一定无解，因为可以先用最大值和这个负数做差得到绝对值，然后一直做，发现最大值会越来越大。</p>
<p>否则一定有解，$b=[0,1,\cdots,mx]$。$mx$为$a$中的最大值。又因为$a_i\le 100$，所以满足要求。当时脑抽了不知道写的什么东西。</p>
<p>B.给一个由小写字母构成的字符串$s,|s|\le1000$，求：不属于$s$的所有子串构成的集合中字典序最小的字符串。</p>
<p>我的评价是，DFS瞎搞。答案的长度应该不会太大，所以暴力找长为1的所有串是否出现，长为2的字符串是否出现。。。找到就停止。</p>
<p>标程貌似也是这么干的，可以证明答案长度不超过3.</p>
<p>C.给一串由$D,K$构成的字符串$s$。对于每个前缀串$pre_i=s_1s_2\cdots s_i$，求出最多能把$pre_i$不遗漏地划分为多少份不相交的子串，使得每个子串的$D,K$数量之比相同。假如一子串有$a$个$D$,$b$个$K$,另一子串有$c$个$D$,$d$个$K$.若$ad=bc$则这两个串的$D,K$数量之比相同。</p>
<p>先找有没有什么必要条件。很容易发现，当前缀固定了，比率也就确定了。因为$\frac{a}{c}=\frac{b}{d}\Rightarrow\frac{a+c}{b+d}$。划分比率就等于整段的比率，这个很好维护，设其为$p/q,\gcd(p,q)=1$。又发现如果前面有相同的比率，就可以直接转移。所以直接套一个二维map.</p>
<p>D.定义数组$a:[a_1,a_2,\cdots,a_{2k-1}]$产生数组$b:[b_1,b_2,\cdots,b_k]$由以下方式产生：对于每个$i$，$b_i$为$[a_1,a_2,\cdots,a_{2i-1}]$的中位数。现在给出$b$数组，问存不存在$a$数组能通过上述方式得到$b$。</p>
<p>相当于每次可以增加两个数调节当前的中位数。那么$b_i$相对于前一个$b_{i-1}$，最多只能变化一个位置，即$b_{i-1}$和$b_i$之间不能有别的数。用set维护。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 300110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;ll,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls o&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs o&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> b[MAXN];</span><br><span class="line">set&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n); s.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(b[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mi = <span class="built_in">min</span>(b[i - <span class="number">1</span>], b[i]), mx = <span class="built_in">max</span>(b[i - <span class="number">1</span>], b[i]);</span><br><span class="line">        <span class="keyword">if</span> (mx == mi)<span class="keyword">continue</span>;</span><br><span class="line">        s.<span class="built_in">insert</span>(b[i]);</span><br><span class="line">        <span class="keyword">if</span> (*s.<span class="built_in">upper_bound</span>(mi)!=mx)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;No&quot;</span>); <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;_);</span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多 练</span></span><br></pre></td></tr></table></figure>
<p>E.给你一个$n\times m$的网格$(n,m\le 2000)$，由&quot;#“和&quot;0&quot;构成。你可以在”#&quot;上填写非负整数，但要满足以下要求：</p>
<p>1.两个相邻格子数值之差的绝对值不超过1；</p>
<p>2.如果一个格子的数不为0，则至少有一个相邻格子的数比它小1.</p>
<p>求填的方案数，对$998244353$取模。</p>
<p>挺好的一道结论题，就是评分虚高了。可以证明，当网格中所有的0填好之后，剩下的位置要填的数也确定了，是到0的最小曼哈顿距离$d$。</p>
<p>首先，填的数肯定不能大于$d$，不然取一条路径，每移动一次最多变1，不满足要求。</p>
<p>然后填的数也不能小于$d$，否则其周围有一个点填$d-1$，如果它也不满足要求，其周围又有$d-2$……一直下去，就会在长为$d$的路径内走到0，不满足$d$最小。</p>
<p>所以只用考虑填0的方案数，显然每个格子可以填也可以不填，数出&quot;#&quot;个数$cnt$,答案为$2^{cnt}-(cnt==nm).$因为至少要有1个0.</p>
<p>因为E太好写了，所以留个F的坑</p>
]]></content>
      <categories>
        <category>vp</category>
      </categories>
      <tags>
        <tag>STL</tag>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 776 (Div. 3)A-E</title>
    <url>/2022/03/11/CF1650/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1650">题目链接</a></p>
<p>2022.03.08 今天打div3</p>
<p>感觉没啥好写的。。。先占个位</p>
<span id="more"></span>
]]></content>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 775 (Div. 2, based on Moscow Open Olympiad in Informatics)A-E</title>
    <url>/2022/03/11/CF1649/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1649">题目链接</a></p>
<p>2022.03.06</p>
<p>D没做出来呜呜</p>
<span id="more"></span>
<p>A.B.太水了懒得写题解了</p>
<p>C.$n\times m$的网格上，每个点有颜色$c_{ij}$，求所有具有相同颜色点对之间曼哈顿距离的和。$n\times m\le 10^5,c_{ij}\le10^5$.</p>
<p>对于某种颜色，$x$和$y$分量是独立的，可以分别计算。以x为例，将其排序，一通化简，$\sum_{i=1}^{size}\sum_{j=i+1}^{size}x_j-x_i=\sum_{i=1}^{size}(2i-1-size)x_i$.</p>
<p>D.给定长为$n$的数组$a$，$a$中每个元素$\le C$，满不满足如下条件：对于数组中的两个数$x\ge y,\lfloor\frac{x}{y}\rfloor$也在数组$a$中。多测，$\sum n,\sum C\le 10^6$.</p>
<p>刚开始想到的就是整除分块，对每个$i$，暴力枚举$\frac{a[i]}{y}$的值，这个值只有$O(\sqrt{a[i]})$个，然后对于每个$\frac{a[i]}{y}$,可以知道$y$的取值范围$[yl,yr]$。检查$\frac{a[i]}{y}$在原数组中是否出现，如果出现了，那么也要存在$yl\le a[j]\le yr$.如果不存在，那么也要不存在$yl\le a[j]\le yr$.检查的方法是排序+二分，复杂度$O(n\sqrt{n}\log n)$，T第5个点。</p>
<p>然后我用权值前缀和把$\log$优化掉，加上去重优化一点常数，再加上快读，变成T第7个点了，因为还是$O(n\sqrt{n})$啊啊啊啊啊</p>
<p>后来才发现不用对每个$a[i]$枚举这个sb因数，枚举倍数就好了，这样复杂度就是$O(n\ln n)$.具体就是对于每个$a[i]$，枚举$\lfloor\frac{x}{a[i]}\rfloor$。像上面的方法检查是否有矛盾。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> a[MAXN], n, c;</span><br><span class="line"><span class="keyword">int</span> dp[MAXN], cnt[MAXN], sum[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span><span class="comment">//[l,r]</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum[r] &gt; sum[l - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">        res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>(); c = <span class="built_in">read</span>(); <span class="keyword">int</span> ok = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)a[i] = <span class="built_in">read</span>(), cnt[a[i]]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + cnt[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!cnt[i])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j * i &lt;= c; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> r = <span class="built_in">min</span>(c, j * i + i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (sum[r] - sum[i * j<span class="number">-1</span>] &gt; <span class="number">0</span> &amp;&amp; cnt[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ok = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ok)<span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;_);</span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">///printf(&quot;\n&quot;); fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>E.给两串字符串s,t且字符集大小很大，s可以重排，t固定。求将s重排的方案数使得$s$的字典序严格小于$t$的字典序，两种方案不同当两种方案中s的某一位不同。取模998244353。</p>
<p>不关心$s$具体是啥，只关心每种数有多少个。设数$i$有$cnt[i]$个。</p>
<p>按位考虑，即考虑到第$i$位$s[i]\le t[i],s[j]=t[j] (j&lt;i)$的情况。此时后面的位可以任意排，是多重全排列。第$i$位可以取一个$[1,t[i]-1]$的值$j$，取出来后后面多重全排列对应的可用$cnt[j]$减少1，即方案数<br>
$$<br>
\sum_{j=1}^{t[i]-1}\frac{(n-i)!}{\prod_{k\neq j}(cnt[k]!)·(cnt[j]-1)!}=\sum_{j=1}^{t[i]-1}\frac{(n-i)!}{\prod_{k}(cnt[k]!)}·cnt[j]=\frac{(n-i)!}{\prod_{k}(cnt[k]!)}\sum_{j=1}^{t[i]-1}cnt[j].<br>
$$<br>
需要求前缀和和单点修改，于是采用树状数组维护$cnt$。</p>
<p>处理完改为贡献后考虑计算下一位，前提是$s[i]=t[i]$。所以会用掉一个$t[i]$.所以上式的分母暴力维护。如果没有可用的数了怎么办，那就直接break，因为这位已经取不到等号了。</p>
<p>然后还有一些细节，就是$n,m$一般是不等的，我们枚举到$\min(n,m)$位，把答案记上。还有一种情况就是$n&lt;m$，然后枚举结束了，前$n$位都是相等的，但此时也满足条件，因为$t$比$s$长，所以要+1.+1之后别忘了取模。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 200110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> cnta[MAXN], b[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></span><br><span class="line">    ll bit[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> n = MAXN - <span class="number">5</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, ll k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += i &amp; (-i))</span><br><span class="line">            bit[i] += k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll res = <span class="number">0</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i -= i &amp; (-i))</span><br><span class="line">            res += bit[i];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;t;</span><br><span class="line">ll fac[MAXN], finv[MAXN];</span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x, ll n = MOD - <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res *= x; res %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>; x *= x; x %= MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll n, ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span> || k&lt;<span class="number">0</span> || k&gt;n)   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (((fac[n] % MOD) * finv[k]) % MOD) * finv[n - k] % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>; finv[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAXN; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * i; fac[i] %= MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    finv[MAXN - <span class="number">1</span>] = <span class="built_in">ksm</span>(fac[MAXN - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = MAXN - <span class="number">2</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        finv[i] = finv[i + <span class="number">1</span>] * <span class="number">1LL</span> * (i + <span class="number">1</span>);</span><br><span class="line">        finv[i] %= MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n, m; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;u);</span><br><span class="line">        cnta[u]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>; ll INV = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAXN; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        INV *= finv[cnta[i]], INV %= MOD;</span><br><span class="line">        t.<span class="built_in">add</span>(i, cnta[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> end = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">min</span>(m,n); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//[1,b[i]-1]</span></span><br><span class="line">        ans += t.<span class="built_in">sum</span>(b[i] - <span class="number">1</span>) % MOD * fac[n - i] % MOD * INV % MOD;</span><br><span class="line">        <span class="comment">//printf(&quot;%lld %lld\n&quot;, t.sum(b[i] - 1),ans);</span></span><br><span class="line">        ans %= MOD; </span><br><span class="line">        <span class="comment">//printf(&quot;%lld\n&quot;, t.sum(b[i])-t.sum(b[i] - 1));</span></span><br><span class="line">        ll cntbi = (t.<span class="built_in">sum</span>(b[i]) - t.<span class="built_in">sum</span>(b[i] - <span class="number">1</span>) + MOD) % MOD;</span><br><span class="line">        INV *= cntbi; INV %= MOD;</span><br><span class="line">        <span class="keyword">if</span> (cntbi)</span><br><span class="line">            t.<span class="built_in">add</span>(b[i], <span class="number">-1</span>);<span class="comment">//b[i]</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        end = i;</span><br><span class="line">    &#125;</span><br><span class="line">    ans += (m &gt; n) &amp;&amp; (end == n); ans %= MOD;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数论</category>
        <category>组合数学</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
        <tag>计数</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 124 A-D</title>
    <url>/2022/03/19/CF1651/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1651">题目链接</a></p>
<p>2022.03.10</p>
<p>小掉20分，而前天vp刚写过BFS，D差一点比赛的时候调出来，比完交了一发WA1就睡了，第二天发现是调试输出没删干净，令人感慨</p>
<span id="more"></span>
<p>A.有$2^n$个人$(n\le 30)$比赛，1和2匹配，3和4匹配，以此类推。每轮筛掉一半人。假如$x$和$y$匹配，胜者由下决定：若$x+y$为奇数，$\min(x,y)$胜，否则$\max(x,y)$胜。</p>
<p>模拟一下发现答案就是$2^n-1$.</p>
<p>B.给定数组长度$n$，是否能构造一个数组$a$使得无论怎么进行一次操作，数组所有元素的和不会减少，且$1\le a_i\le 10^9$。一次操作为：选择$i,j$,令$a_i=a_j=|a_i-a_j|$.</p>
<p>差值$d=2|a_i-a_j|-a_i-a_j\ge 0$恒成立。$\Rightarrow2(|a_i-a_j|)\ge a_i+a_j$</p>
<p>两边平方：$(a_i-3a_j)(3a_i-a_j)\ge 0$.</p>
<p>设$a_i\ge a_j$,则$a_j\le a_i\le3a_j$.所以排序后相邻两项大的数必须大于等于小的数的3倍。可以构造$a_i=3^{i-1}$。然后检查$n$够不够放就行。</p>
<p>C.有两排电脑，长度为$n$，其中坐标$(1,i)$和$(1,i+1)$的相连，$(2,i)$和$(2,i+1)$相连$(1\le i\le n-1)$。你需要加边，$(1,i)$和$(2,j)$之间连边的代价为$|a_i-b_j|$，使得对于任何一台电脑，如果删掉该电脑连的所有边之后，剩下的电脑依然相连，求最小代价。</p>
<p>条件等价于每个点的度数大于等于2.刚开始时中间的点都满足条件所以不用管，只用管$(1,1),(1,n),(2,1),(2,n)$4个点。因此最多连4条边出来，怎么小怎么连。但也可能一条边就连了上面提到的两个点，我的建议是按边数分类讨论取$min$。</p>
<p>D.二维坐标平面上有$n$个点，坐标$(x_i,y_i)$。对于每个点，输出离它曼哈顿距离最小的且不属于这$n$个点之中的点的坐标。如果有多个最小的，输出任意一个。$(n\le 2\times 10^5,1\le x_i,y_i\le 2\times 10^5)$</p>
<p>先考虑暴力能不能做，如果一个点被围了很多圈就GG，但是可以利用相邻点之间的答案来转移，所以BFS。开始时把所有周围有空的点加入队列，然后向内BFS。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 200110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line">map&lt;pa, <span class="keyword">int</span>&gt;dp; <span class="keyword">int</span> n;</span><br><span class="line">map&lt;pa, pa&gt;ans;</span><br><span class="line">pa p[MAXN];</span><br><span class="line"><span class="keyword">int</span> dx[] = &#123; <span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span> &#125;, dy[] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> nx = p[i].first + dx[k], ny = p[i].second + dy[k];</span><br><span class="line">            <span class="keyword">if</span> (dp.<span class="built_in">find</span>(<span class="built_in">mapa</span>(nx, ny)) == dp.<span class="built_in">end</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123; p[i].first,p[i].second,<span class="number">1</span>,nx,ny&#125;);</span><br><span class="line">                dp[<span class="built_in">mapa</span>(p[i].first, p[i].second)] = <span class="number">1</span>; </span><br><span class="line">                ans[<span class="built_in">mapa</span>(p[i].first, p[i].second)] = <span class="built_in">mapa</span>(nx, ny); <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">int</span> x = get&lt;<span class="number">0</span>&gt;(u), y = get&lt;<span class="number">1</span>&gt;(u), lstx = get&lt;<span class="number">3</span>&gt;(u), lsty = get&lt;<span class="number">4</span>&gt;(u);</span><br><span class="line">        <span class="comment">//printf(&quot;%d %d %d %d %d\n&quot;, x, y, get&lt;2&gt;(u), lstx, lsty);</span></span><br><span class="line">        dp[<span class="built_in">mapa</span>(get&lt;<span class="number">0</span>&gt;(u), get&lt;<span class="number">1</span>&gt;(u))] = get&lt;<span class="number">2</span>&gt;(u);</span><br><span class="line">        ans[<span class="built_in">mapa</span>(x, y)] = <span class="built_in">mapa</span>(lstx, lsty);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> nx = x + dx[k], ny = y + dy[k];</span><br><span class="line">            <span class="keyword">if</span> (dp.<span class="built_in">find</span>(<span class="built_in">mapa</span>(nx, ny)) != dp.<span class="built_in">end</span>() &amp;&amp; dp[<span class="built_in">mapa</span>(nx, ny)] &gt; get&lt;<span class="number">2</span>&gt;(u) + <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[<span class="built_in">mapa</span>(nx, ny)] = get&lt;<span class="number">2</span>&gt;(u) + <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123; nx, ny, get&lt;<span class="number">2</span>&gt;(u) + <span class="number">1</span>, lstx, lsty &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;p[i].first, &amp;p[i].second);</span><br><span class="line">        dp[p[i]] = <span class="number">1e6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//sort(p + 1, p + n + 1);</span></span><br><span class="line">    <span class="built_in">bfs</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, ans[p[i]].first,ans[p[i]].second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>BFS</tag>
        <tag>贪心</tag>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 778 (Div. 1 + Div. 2, based on Technocup 2022 Final Round)E,D待补</title>
    <url>/2022/04/24/CF1654/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1654">题目链接</a></p>
<p>我是傻逼。。。都一个月了还没补题，题解也鸽了，也不能每天vp了。。</p>
<span id="more"></span>
<p>E. Arithmetic Operations</p>
<p>给数组$a_1,a_2,\cdots,a_n$，求至少要修改多少个数才能把$a$变成等差数列。$1\le a_i\le 10^5$.</p>
<p>分两种情况：</p>
<p>第一种公差$-\sqrt{n}\le d\le\sqrt{n}$，一次枚举，开一个桶数组cnt维护截距$a_i-d*(i-1)+U$,$U$保证数组下标不会为负（因为这题有点卡常）。答案就是$n$减去cnt最大值。</p>
<p>第二种情况：$|d|&gt;\sqrt{n}$.如果是这种情况，固定起点，发现在$\sqrt{n}$项之后$a_i$必然会超出$[1,n]$的范围，即必然会被修改。所以只用枚举$\sqrt{n}$长度以内的数，开桶维护即可。总复杂度$O(n\sqrt{n})$。</p>
]]></content>
      <tags>
        <tag>根号分治</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 383 Div2 A-E</title>
    <url>/2022/02/28/CF742/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/742">题目链接</a></p>
<p>时间：2022.02.28</p>
<p>比较水的一场，希望能每日vp1次Div2或ABC()</p>
<p>井号打不出来什么毛病。。。。。我放弃了。。。（题号是742但是名字不是）</p>
<span id="more"></span>
<p>A.求$1378^n$,分类讨论即可，注意n=0特判。</p>
<p>B.给定a[1…n]和$x$,求$(i,j)$满足$1\le i&lt;j\le n,a_i \oplus a_j=x$.维护一个桶即可。</p>
<p>C.给定p[1…n],求最小正整数t，使得对于任意$1\le i\le n$,都有$\underbrace{p(…p(p(i)))}_{2*t个}=i$.或说明无解。</p>
<p>若p[1…n]不是$1,…,n$的一个排列则存在一个数迭代后回不到自身，无解；否则路径为若干个互不相交的环。如果只存在长度为奇数的环则答案为所有环长度的lcm；如果还存在长度为偶数的环，则答案为lcm/2.</p>
<p>D.有一堆物品，重量$w[i]$美丽值$b[i]$，m对物品$(x_i,y_i)$互为friends. friends具有传递性。现要求选出一些物品，使其美丽值之和最大，并且重量不超过W。而且满足对于一个friends分量要么全选，要么至多选择其中一个物品。</p>
<p>分组背包+并查集套就完了。</p>
<p>E.有n对情侣坐在大小为2n的环上，有两种食物1和2，一对情侣不能吃相同食物，相邻三个人中要有两人的食物不同，求构造方式或说明无解。</p>
<p>二分图方面还是比较好想到的，邻居的构造是没想到。。。</p>
<p>每对情侣之间连边，然后邻居两两连边,即$2i$和$2i-1$连。这样得到的图一定是二分图并且环的大小一定是偶数，因为从一对情侣出发，其两端各延伸至邻居，大小一次改变了2.通过此构造保证一个点相邻两点一定有一个不同的。</p>
<p>E</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 500110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;G[MAXN]; <span class="keyword">int</span> val[MAXN];</span><br><span class="line"><span class="keyword">int</span> a[MAXN], b[MAXN];</span><br><span class="line"><span class="keyword">int</span> n, cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : G[st])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!val[it])</span><br><span class="line">        &#123;</span><br><span class="line">            val[it] = cnt % <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            cnt ^= <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(it);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        a[i] = u; b[i] = v;</span><br><span class="line">        G[u].<span class="built_in">push_back</span>(v); G[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        G[<span class="number">2</span> * i].<span class="built_in">push_back</span>(<span class="number">2</span> * i - <span class="number">1</span>);</span><br><span class="line">        G[<span class="number">2</span> * i - <span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">2</span> * i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!val[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, val[a[i]], val[b[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vp</category>
      </categories>
      <tags>
        <tag>背包</tag>
        <tag>二分图染色</tag>
      </tags>
  </entry>
  <entry>
    <title>CF597C Subsequences</title>
    <url>/2022/01/11/CF597C/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/597/problem/C">题目链接</a></p>
<p>求长度恰好为$k+1$的上升子序列个数（$n\le 10^5,0\le k\le10$,a[i]互不相同，保证答案不超过8e18)。</p>
<span id="more"></span>
<p>为表示方便先将k++。</p>
<p>设dp[[i][j]]：以第i个元素结尾，长度为j的递增子序列的方案数</p>
<p>转移：</p>
<p>$dp[i][j]=\sum\limits_{u=1,dp[u][j-1]&lt;a[i]}^{i-1}dp[u][j-1].$</p>
<p>即对所有当前小于a[i]的dp[][j-1]求和，可以用树状数组完成，用11个树状数组维护dp[j]，最后答案是$\sum\limits_{i=1}^n$dp[i][k].</p>
<p>复杂度$O(n\log n)$（BIT记得开ll,没改干净WA了好多发)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x, ll n = MOD - <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x %= MOD; ll res = <span class="number">1</span>; <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)res *= x;</span><br><span class="line">        res %= MOD; x *= x; x %= MOD; n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % MOD;</span><br><span class="line">&#125;</span><br><span class="line">ll a[MAXN], dp[MAXN][<span class="number">15</span>], n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></span><br><span class="line">    ll bit[MAXN &lt;&lt; <span class="number">1</span>];<span class="comment">//nt</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, ll k)</span><span class="comment">//nt</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += i &amp; (-i))</span><br><span class="line">            bit[i] += k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll res = <span class="number">0</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i -= i &amp; (-i))</span><br><span class="line">            res += bit[i];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;t[<span class="number">15</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k; <span class="built_in">scanf</span>(<span class="string">&quot;%lld%d&quot;</span>, &amp;n, &amp;k); k++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j] = (j == <span class="number">1</span> ? <span class="number">1</span> : t[j - <span class="number">1</span>].<span class="built_in">sum</span>(a[i] - <span class="number">1</span>));<span class="comment">//比a[i]小dp[j-1]求和</span></span><br><span class="line">            t[j].<span class="built_in">add</span>(a[i], dp[i][j]);<span class="comment">//更新BIT</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)ans += dp[i][k];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>; <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);<span class="comment">//fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces上的几道启发式合并入门</title>
    <url>/2022/02/27/dsu-on-tree/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/600/problem/E">CF600E Lomsat gelral</a></p>
<p>给定一棵以1为根的有根树，每个点上有权值$c[i]$,对于每个$i$，求以$i$为根的子树上，权值出现次数最多的权值之和，注意可能有多种权值出现次数相同。$(1\le n\le 100000,1\le c[i]\le n)$</p>
<p><a href="https://codeforces.com/contest/570/problem/D">CF570D Tree Requests</a></p>
<p>给定一棵以1为根的有根树，每个点上有字母<code>a</code>到<code>z</code>,有$m$次询问，需回答以$v_i$为根的子树上深度为$h_i$的所有节点上的字母重排后能否构成回文串。根的深度为1.$(1\le n,m\le 5\times 10^5)$</p>
<p><a href="https://codeforces.com/contest/208/problem/E">CF208E Blood Cousins</a></p>
<p>给定一个森林，定义：如果节点$u$的$p$级祖先等于节点$v$的$p$级祖先，则$v$是$u$的$p$级表亲。$m$组询问，询问$v_i$的$p_i$表亲个数。$(1\le n,m\le 10^5,1\le v_i,p_i\le n)$</p>
<p><a href="https://codeforces.com/contest/246/problem/E">CF246E Blood Cousins Return</a></p>
<p>给定一个森林，点上带有字符串（长度不超过20），$m$次询问，需回答从$v_i$向下的$k_i$层的儿子中有多少种不同的字符串。$1\le n,m\le10^5.$</p>
<span id="more"></span>
<p>原理：</p>
<p>先考虑暴力，对于每个点为根的子树，用一个全局cnt数组维护每个权值出现的次数，遍历子树记录cnt的值，如果加之前cnt为0则答案+=1，然后再遍历一遍子树清空。这样做的复杂度是$O(n^2)$的，瓶颈在于清空cnt数组。</p>
<p>注意到如果从下往上递归的话，假设当前点为$x$，在这之前$x$的所有儿子的答案都已经计算完毕，在算$x$的答案时，之前最后一次算儿子时的cnt可以不清空留给$x$继续使用，只要每次最后再走重儿子就可以保证复杂度降为$O(n\log n).$</p>
<p>复杂度的证明：考虑所有轻边暴力的过程，由于从一个点到根的轻边数量不超过$O(\log n)$条，故每个点被暴力递归的次数不超过$O(\log n)$次，总的时间复杂度为$O(n\log n)$，实际上上界较松。</p>
<p>第一道题，维护一个sum和最大出现次数mx，合并儿子时更新sum和mx，更改cnt，清除时将sum和mx置零，更改cnt.</p>
<p>第二道题有多组询问，考虑将询问按节点离线，然后做启发式合并，维护全局数组cnt[dep][26],回答时将同一节点的所有询问一并回答。（离线写炸了，太弱智了）</p>
<p>第三道题，借鉴第二道题的思路，先将询问离线，但是注意到回答的都是以xxx为根的形式，所以要对询问进行预处理，找到令$v_i$变成$v_i$的$p$级祖先再询问$v_i$的$p$级儿子个数，找$p$级祖先可以用倍增$O(n\log n)$预处理$O(\log n)$回答，问题不大。</p>
<p>第四道题也差不多，但是我用字符串到int的umap和cnt维护写挂了，直接set就过了，找不到原因。。。。但是字符串要多一个$\log$应该是逃不掉的。。</p>
<p>无脑粘代码（Blog不是你的粘贴板）</p>
<p>CF600E</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 400110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> dep[MAXN], sz[MAXN], fa[MAXN], son[MAXN];</span><br><span class="line"><span class="keyword">int</span> w[MAXN], n, cnt[MAXN];<span class="comment">//每种颜色次数</span></span><br><span class="line">ll ans[MAXN], sum, mx;<span class="comment">//之和，tmp和，tmp最大出现次数</span></span><br><span class="line"><span class="keyword">int</span> vi;<span class="comment">//已经处理过的重儿子</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt, to;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAXN &lt;&lt; <span class="number">1</span>], ecnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++ecnt].nxt = head[from];</span><br><span class="line">    e[ecnt].to = to;</span><br><span class="line">    head[from] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> d)</span><span class="comment">//现在处理u，得到u的答案</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt[w[u]] += d;</span><br><span class="line">    <span class="keyword">if</span> (cnt[w[u]] &gt;= mx)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cnt[w[u]] &gt; mx)sum = <span class="number">0</span>;</span><br><span class="line">        sum += w[u]; mx = cnt[w[u]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u] || v == vi)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">cal</span>(v, d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz[u] = <span class="number">1</span>; <span class="keyword">int</span> maxsize = <span class="number">-1</span>;</span><br><span class="line">    dep[u] = dep[f] + <span class="number">1</span>; fa[u] = f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == f)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        <span class="keyword">if</span> (sz[v] &gt; maxsize)</span><br><span class="line">            son[u] = v, maxsize = sz[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dsu</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> keep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u] || v == son[u])<span class="keyword">continue</span>;<span class="comment">//先走轻儿子</span></span><br><span class="line">        <span class="built_in">dsu</span>(v, <span class="number">0</span>);<span class="comment">//清空</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (son[u])</span><br><span class="line">        <span class="built_in">dsu</span>(son[u], <span class="number">1</span>);<span class="comment">//保留重儿子信息</span></span><br><span class="line">    vi = son[u];<span class="comment">//标记当前层重儿子</span></span><br><span class="line">    <span class="built_in">cal</span>(u, <span class="number">1</span>);</span><br><span class="line">    vi = <span class="number">0</span>;</span><br><span class="line">    ans[u] = sum;</span><br><span class="line">    <span class="keyword">if</span> (!keep)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cal</span>(u, <span class="number">-1</span>); mx = sum = <span class="number">0</span>;<span class="comment">//清除</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="built_in">addedge</span>(u, v); <span class="built_in">addedge</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dsu</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CF570D</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 500110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> dep[MAXN], sz[MAXN], fa[MAXN], son[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,ans[MAXN], cnt[MAXN][<span class="number">28</span>];<span class="comment">//cnt[i][j]:当前的第i层颜色j的个数</span></span><br><span class="line"><span class="keyword">char</span> ch[MAXN];</span><br><span class="line"><span class="keyword">int</span> vi;<span class="comment">//已经处理过的重儿子</span></span><br><span class="line">vector&lt;pa&gt;qry[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ck</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (h &lt;= dep[u])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cnt[h][i] % <span class="number">2</span>)res++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res &lt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt, to;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAXN &lt;&lt; <span class="number">1</span>], ecnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++ecnt].nxt = head[from];</span><br><span class="line">    e[ecnt].to = to;</span><br><span class="line">    head[from] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> d)</span><span class="comment">//现在利用保留的重儿子暴力处理u的所有轻儿子，得到u的答案</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt[dep[u]][ch[u] - <span class="string">&#x27;a&#x27;</span>] += d;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u] || v == vi)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">cal</span>(v, d);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz[u] = <span class="number">1</span>; <span class="keyword">int</span> maxsize = <span class="number">-1</span>;</span><br><span class="line">    dep[u] = dep[f] + <span class="number">1</span>; fa[u] = f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == f)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        <span class="keyword">if</span> (sz[v] &gt; maxsize)</span><br><span class="line">            son[u] = v, maxsize = sz[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dsu</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> keep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u] || v == son[u])<span class="keyword">continue</span>;<span class="comment">//先走轻儿子</span></span><br><span class="line">        <span class="built_in">dsu</span>(v, <span class="number">0</span>);<span class="comment">//清空</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (son[u])</span><br><span class="line">        <span class="built_in">dsu</span>(son[u], <span class="number">1</span>);<span class="comment">//保留重儿子信息</span></span><br><span class="line">    vi = son[u];<span class="comment">//标记当前层重儿子</span></span><br><span class="line">    <span class="built_in">cal</span>(u, <span class="number">1</span>);</span><br><span class="line">    vi = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//printf(&quot;u:%d %d %d %d\n&quot;, u, dep[u], ch[u] - &#x27;a&#x27;, d);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; qry[u].<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> id = qry[u][i].first, h = qry[u][i].second;</span><br><span class="line">        ans[id] = <span class="built_in">ck</span>(u, h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!keep)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cal</span>(u, <span class="number">-1</span>);<span class="comment">//清除</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(ans));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;u);</span><br><span class="line">        <span class="built_in">addedge</span>(u, i+<span class="number">1</span>); <span class="built_in">addedge</span>(i+<span class="number">1</span>, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ch + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v, h; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;v, &amp;h);</span><br><span class="line">        qry[v].<span class="built_in">push_back</span>(<span class="built_in">mapa</span>(i, h));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dsu</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ans[i])<span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CF208E</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 500110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> dep[MAXN], sz[MAXN], fa[MAXN][<span class="number">22</span>], son[MAXN], rt[MAXN], rtot;</span><br><span class="line"><span class="keyword">int</span> n,ans[MAXN], cnt[MAXN];<span class="comment">//cnt[i]:当前的第i层的儿子数</span></span><br><span class="line"><span class="keyword">int</span> vi;<span class="comment">//已经处理过的重儿子</span></span><br><span class="line">vector&lt;pa&gt;qry[MAXN];<span class="comment">//qry[v]:id p</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt, to;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAXN &lt;&lt; <span class="number">1</span>], ecnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++ecnt].nxt = head[from];</span><br><span class="line">    e[ecnt].to = to;</span><br><span class="line">    head[from] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> d)</span><span class="comment">//现在利用保留的重儿子暴力处理u的所有轻儿子，得到u的答案</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt[dep[u]] += d;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u][<span class="number">0</span>] || v == vi)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">cal</span>(v, d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz[u] = <span class="number">1</span>; <span class="keyword">int</span> maxsize = <span class="number">-1</span>;</span><br><span class="line">    dep[u] = dep[f] + <span class="number">1</span>;</span><br><span class="line">    fa[u][<span class="number">0</span>] = f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];<span class="comment">//倍增祖先</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == f)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        <span class="keyword">if</span> (sz[v] &gt; maxsize)</span><br><span class="line">            son[u] = v, maxsize = sz[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dsu</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> keep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u][<span class="number">0</span>] || v == son[u])<span class="keyword">continue</span>;<span class="comment">//先走轻儿子</span></span><br><span class="line">        <span class="built_in">dsu</span>(v, <span class="number">0</span>);<span class="comment">//清空</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (son[u])</span><br><span class="line">        <span class="built_in">dsu</span>(son[u], <span class="number">1</span>);<span class="comment">//保留重儿子信息</span></span><br><span class="line">    vi = son[u];<span class="comment">//标记当前层重儿子</span></span><br><span class="line">    <span class="built_in">cal</span>(u, <span class="number">1</span>);</span><br><span class="line">    vi = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//printf(&quot;u:%d %d %d %d\n&quot;, u, dep[u], ch[u] - &#x27;a&#x27;, d);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; qry[u].<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> id = qry[u][i].first, p = qry[u][i].second;</span><br><span class="line">        ans[id] = cnt[p] - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!keep)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cal</span>(u, <span class="number">-1</span>);<span class="comment">//清除</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="comment">//memset(ans, -1, sizeof(ans));</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;u);</span><br><span class="line">        <span class="keyword">if</span> (u)</span><br><span class="line">            <span class="built_in">addedge</span>(u, i), <span class="built_in">addedge</span>(i, u);</span><br><span class="line">        <span class="keyword">else</span> rt[++rtot] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= rtot; i++)</span><br><span class="line">        <span class="built_in">dfs</span>(rt[i], <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v, p; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;v, &amp;p);</span><br><span class="line">        <span class="keyword">int</span> d = dep[v];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((p &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">                v = fa[v][i];</span><br><span class="line">        &#125;</span><br><span class="line">        qry[v].<span class="built_in">push_back</span>(<span class="built_in">mapa</span>(i, d));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=rtot;i++)</span><br><span class="line">    <span class="built_in">dsu</span>(rt[i], <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CF246E</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 500110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> dep[MAXN], sz[MAXN],fa[MAXN], son[MAXN], rt[MAXN], rtot;</span><br><span class="line"><span class="keyword">int</span> a[MAXN];</span><br><span class="line"><span class="keyword">int</span> n, ans[MAXN]; set&lt;<span class="keyword">int</span>&gt;num[MAXN];</span><br><span class="line">unordered_map&lt;string, <span class="keyword">int</span>&gt;dit; <span class="keyword">int</span> dtot;</span><br><span class="line"><span class="keyword">int</span> vi;<span class="comment">//已经处理过的重儿子</span></span><br><span class="line">vector&lt;pa&gt;qry[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt, to;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAXN &lt;&lt; <span class="number">1</span>], ecnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++ecnt].nxt = head[from];</span><br><span class="line">    e[ecnt].to = to;</span><br><span class="line">    head[from] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> d)</span><span class="comment">//现在利用保留的重儿子暴力处理u的所有轻儿子，得到u的答案</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d == <span class="number">1</span>)num[dep[u]].<span class="built_in">insert</span>(a[u]);</span><br><span class="line">    <span class="keyword">if</span> (d == <span class="number">-1</span>)num[dep[u]].<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u] || v == vi)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">cal</span>(v, d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz[u] = <span class="number">1</span>; <span class="keyword">int</span> maxsize = <span class="number">-1</span>;</span><br><span class="line">    dep[u] = dep[f] + <span class="number">1</span>;</span><br><span class="line">    fa[u] = f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == f)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        <span class="keyword">if</span> (sz[v] &gt; maxsize)</span><br><span class="line">            son[u] = v, maxsize = sz[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dsu</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> keep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u] || v == son[u])<span class="keyword">continue</span>;<span class="comment">//先走轻儿子</span></span><br><span class="line">        <span class="built_in">dsu</span>(v, <span class="number">0</span>);<span class="comment">//清空</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (son[u])</span><br><span class="line">        <span class="built_in">dsu</span>(son[u], <span class="number">1</span>);<span class="comment">//保留重儿子信息</span></span><br><span class="line">    vi = son[u];<span class="comment">//标记当前层重儿子</span></span><br><span class="line">    <span class="built_in">cal</span>(u, <span class="number">1</span>);</span><br><span class="line">    vi = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; qry[u].<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> id = qry[u][i].first, k = qry[u][i].second;</span><br><span class="line">        ans[id] = num[k].<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!keep)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cal</span>(u, <span class="number">-1</span>);<span class="comment">//清除</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string s; <span class="keyword">int</span> u; cin &gt;&gt; s; cin &gt;&gt; u;</span><br><span class="line">        <span class="keyword">int</span> col;</span><br><span class="line">        <span class="keyword">auto</span> it = dit.<span class="built_in">find</span>(s);</span><br><span class="line">        <span class="keyword">if</span> (it != dit.<span class="built_in">end</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            col = (*it).second;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            col = ++dtot; dit[s] = dtot;</span><br><span class="line">        &#125;</span><br><span class="line">        a[i] = col;</span><br><span class="line">        <span class="keyword">if</span> (u)</span><br><span class="line">            <span class="built_in">addedge</span>(u, i), <span class="built_in">addedge</span>(i, u);</span><br><span class="line">        <span class="keyword">else</span> rt[++rtot] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= rtot; i++)</span><br><span class="line">        <span class="built_in">dfs</span>(rt[i], <span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v, k; cin &gt;&gt; v &gt;&gt; k;</span><br><span class="line">        qry[v].<span class="built_in">push_back</span>(<span class="built_in">mapa</span>(i, dep[v] + k));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=rtot;i++)</span><br><span class="line">    <span class="built_in">dsu</span>(rt[i], <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>启发式合并</tag>
        <tag>离线</tag>
      </tags>
  </entry>
  <entry>
    <title>树链剖分模板题</title>
    <url>/2022/02/15/luogu3384/</url>
    <content><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3384">题目链接</a></p>
<p>对$n$个点组成的树，根给定，实现以下操作：</p>
<ol>
<li>将树上$x$到$y$的最短路径上的点权加上$z$；</li>
<li>求$x$到$y$的最短路径上的点权之和；</li>
<li>将以$x$为根节点的子树内的所有点权加上$z$；</li>
<li>求以$x$为根的子树点权之和。</li>
</ol>
<span id="more"></span>
<p>首先有dfs序这玩意，可以把树上点的标号放到数组里，并且一棵子树内的dfs序是连续的，对于操作3和4，可以用线段树维护区间加。但是对于操作1和2，x到y的路径上dfs序不一定是连续的。用树链剖分可以把这段不连续的dfs序较好地分割成一段段连续的dfs序（个人理解）。</p>
<h4 id="几个概念">几个概念</h4>
<p><strong>重</strong>（zhong）<strong>儿子</strong>：一个节点的子节点中，sz最大的那个（如果有相同就随意选一个，只能有一个）；<strong>轻儿子</strong>：非重儿子的子节点；<strong>重边</strong>：一个点到它的重儿子的边；<strong>轻边</strong>：一个点到它的轻儿子的边；<strong>重链</strong>：由重边连结形成的链。<strong>链顶</strong>：一条重链中深度最小的节点。</p>
<p>引理1：除了根节点，任何一个节点的父节点都在一条重链上。</p>
<p>证明：父节点有儿子，就一定有重儿子，就在重链上。</p>
<p>从根节点出发dfs，并且先搜重儿子，这样得到的dfs序在一条重链中是连续的，这样链和子树都转换成了序列区间，然后就可以套娃了（一般是套线段树）。</p>
<p>引理2：一条链可以被拆分成不超过$O(\log n)$条重链。</p>
<p>证明：只需证从一个点到根的路径上有不超过$O(\log n)$条重链，由引理1，路径上重链和轻边交错（即轻边连接两条重链），即证不超过$O(\log n)$条轻边。每当走过一条轻边$&lt;u,f&gt;$，$f$的重儿子$sz$一定比$u$大，或者说$sz[fa[u]]&gt;sz[u]*2$。维护一条链的复杂度：$O(\log ^2n)$(线段树维护一个log,log条重链).</p>
<p>因此总复杂度$O(m\log^2n)$.</p>
<h4 id="具体实现">具体实现</h4>
<p>做两遍dfs，第一次dfs把sz,dep,fa,son（重儿子）处理出来，第二次dfs先搜重儿子，再搜轻儿子，把节点所处的链顶top[x]、dfs序dfn、用于线段树维护的dfna处理出来。</p>
<p>对于路径的操作，只要$x$与$y$不在一条重链，就让其中一个往上跳到top，然后跳一次fa，并且是让top深度较大的对应的点往上跳，否则会往上跳过头。直到$x$和$y$跳到一条重链。跳的过程中由于都是在重链上跳，所以dfs序都是连续的，边跳边区修。最后跳到同一条链时再区修一次。区查同理，跳一次查一次。</p>
<p>code</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 400110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> dep[MAXN], sz[MAXN], fa[MAXN], son[MAXN], top[MAXN], dfn[MAXN], dfncnt;</span><br><span class="line">ll w[MAXN],dfna[MAXN];<span class="comment">//线段树维护dfna</span></span><br><span class="line"><span class="keyword">int</span> n, m, r, p;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt, to;</span><br><span class="line">&#125;e[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAXN &lt;&lt; <span class="number">1</span>], ecnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++ecnt].nxt = head[from];</span><br><span class="line">    e[ecnt].to = to;</span><br><span class="line">    head[from] = ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r; ll sum, lazy;</span><br><span class="line">&#125;tr[MAXN * <span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[o].sum = tr[o &lt;&lt; <span class="number">1</span>].sum + tr[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">    <span class="comment">//tr[o].sum %= MOD;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> o, ll val)</span><span class="comment">//单节点加val</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[o].lazy += val; tr[o].lazy %= p;</span><br><span class="line">    tr[o].sum += <span class="number">1LL</span> * (tr[o].r - tr[o].l + <span class="number">1</span>) * val;</span><br><span class="line">    tr[o].sum %= p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//printf(&quot;%d %d\n&quot;, l, r);</span></span><br><span class="line">    tr[o].l = l, tr[o].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[o].sum = dfna[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(o &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">add</span>(o &lt;&lt; <span class="number">1</span>, tr[o].lazy);</span><br><span class="line">    <span class="built_in">add</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, tr[o].lazy);</span><br><span class="line">    tr[o].lazy = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, ll val)</span><span class="comment">//区间加法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[o].l == l &amp;&amp; tr[o].r == r)<span class="built_in">add</span>(o, val);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(o);</span><br><span class="line">        <span class="keyword">int</span> mid = (tr[o].l + tr[o].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (r &lt;= mid)<span class="built_in">update</span>(o &lt;&lt; <span class="number">1</span>, l, r, val);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid)<span class="built_in">update</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, val);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">update</span>(o &lt;&lt; <span class="number">1</span>, l, mid, val);</span><br><span class="line">            <span class="built_in">update</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushup</span>(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qry</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[o].l == l &amp;&amp; tr[o].r == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tr[o].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(o);</span><br><span class="line">    <span class="keyword">int</span> mid = (tr[o].l + tr[o].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">qry</span>(o &lt;&lt; <span class="number">1</span>, l, r, L, R);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">qry</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, L, R);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">return</span></span> (<span class="built_in">qry</span>(o &lt;&lt; <span class="number">1</span>, l, mid, L, R) + <span class="built_in">qry</span>(o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R)) % p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz[u] = <span class="number">1</span>; <span class="keyword">int</span> maxsize = <span class="number">-1</span>;</span><br><span class="line">    dep[u] = dep[f] + <span class="number">1</span>; fa[u] = f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == f)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        <span class="keyword">if</span> (sz[v] &gt; maxsize)</span><br><span class="line">            son[u] = v, maxsize = sz[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[u] = ++dfncnt; dfna[dfncnt] = w[u];</span><br><span class="line">    top[u] = tp;</span><br><span class="line">    <span class="keyword">if</span> (!son[u])<span class="keyword">return</span>;<span class="comment">//没儿子</span></span><br><span class="line">    <span class="built_in">dfs2</span>(son[u], tp);<span class="comment">//重儿子</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == son[u] || v == fa[u])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pathadd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    z %= p;</span><br><span class="line">    <span class="keyword">while</span> (top[x] != top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[x]] &lt; dep[top[y]])</span><br><span class="line">            <span class="built_in">swap</span>(x, y);</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">1</span>, dfn[top[x]], dfn[x], z);</span><br><span class="line">        x = fa[top[x]];<span class="comment">//top深度大的往上跳</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &lt; dep[y])<span class="built_in">swap</span>(x, y);<span class="comment">//同一条链</span></span><br><span class="line">    <span class="built_in">update</span>(<span class="number">1</span>, dfn[y], dfn[x], z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">pathqry</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (top[x] != top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[x]] &lt; dep[top[y]])</span><br><span class="line">            <span class="built_in">swap</span>(x, y);</span><br><span class="line">        res += <span class="built_in">qry</span>(<span class="number">1</span>, dfn[top[x]], dfn[x], <span class="number">1</span>, n); res %= p;</span><br><span class="line">        x = fa[top[x]];<span class="comment">//top深度大的往上跳</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &lt; dep[y])<span class="built_in">swap</span>(x, y);<span class="comment">//同一条链,x-&gt;y</span></span><br><span class="line">    res += <span class="built_in">qry</span>(<span class="number">1</span>, dfn[y], dfn[x], <span class="number">1</span>, n); res %= p;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;r, &amp;p);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;w[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="built_in">add</span>(u, v); <span class="built_in">add</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(r, r); <span class="built_in">dfs2</span>(r, r);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> op, x, y, z; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)<span class="comment">//路径加</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line">            <span class="built_in">pathadd</span>(x, y, z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>)<span class="comment">//路径查</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">pathqry</span>(x, y));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>)<span class="comment">//子树加</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;z);</span><br><span class="line">            <span class="built_in">update</span>(<span class="number">1</span>, dfn[x], dfn[x] + sz[x] - <span class="number">1</span>, z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>)<span class="comment">//子树查</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">qry</span>(<span class="number">1</span>, dfn[x], dfn[x] + sz[x] - <span class="number">1</span>, <span class="number">1</span>, n));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;<span class="comment">//scanf(&quot;%d&quot;, &amp;_);//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//printf(&quot;\n&quot;); //fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeCraft-20 (Div. 2) D,记得看E和F！</title>
    <url>/2022/07/01/CF1316D/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1316">题目链接</a></p>
<p>2022.03.23，A-C的就不写了，写写补了的D</p>
<span id="more"></span>
<p>D Nash Matrix</p>
<p>题意：$n\times n$的网格，格子上可以填字母$U,D,L,R,X$。$U,D,L,R$表示上下左右移动一格，$X$表示在这停止。现给出$n\times n$每个格子按照上述行走方式最终到达的点的位置（如果无法停止则为(-1,-1)），求一种构造方案或说明无解。</p>
<p>​	如果一个格子能无限走下去，它四周如果都是有限步结束的话，就一定不合法，否则其周围存在一个也是无限步的，把它们连成环就行。如果一个格子终点是他自己，这个格子肯定填X。</p>
<p>​	从终点倒着向四周dfs，如果到达的格子终点相等就去搜。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 200010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> dx[] = &#123; <span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span> &#125;, dy[] = &#123; <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span> &#125;, n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;to[<span class="number">1919</span>][<span class="number">1919</span>];</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">1919</span>][<span class="number">1919</span>], vis[<span class="number">1919</span>][<span class="number">1919</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ck</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= n &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; y &lt;= n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> tox, <span class="keyword">int</span> toy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (to[x][y].x == tox &amp;&amp; to[x][y].y == toy)vis[x][y] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> nx = x + dx[k], ny = y + dy[k];</span><br><span class="line">        <span class="keyword">if</span> (ans[nx][ny] == <span class="number">-1</span>&amp;&amp;tox==to[nx][ny].x&amp;&amp;toy==to[nx][ny].y)</span><br><span class="line">        &#123;</span><br><span class="line">            ans[nx][ny] = k ^ <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(nx, ny, tox, toy);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(ans));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;to[i][j].x, &amp;to[i][j].y);</span><br><span class="line">            <span class="keyword">if</span> (to[i][j].x == <span class="number">-1</span>)ans[i][j] = <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(to[i][j].x==i&amp;&amp;to[i][j].y==j)ans[i][j] = <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (to[i][j].x==<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> p = <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">ck</span>(i + dx[k], j + dy[k]))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (to[i + dx[k]][j + dy[k]].x == to[i + dx[k]][j + dy[k]].y &amp;&amp; to[i + dx[k]][j + dy[k]].y == <span class="number">-1</span>)</span><br><span class="line">                            p = k;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ans[i][j] = p;</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;INVALID&quot;</span>); <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                vis[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i == to[i][j].x &amp;&amp; j == to[i][j].y)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(i, j, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">if</span> (!vis[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;INVALID&quot;</span>); <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> ch[] = &#123; <span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;X&#x27;</span> &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;VALID\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ch[ans[i][j]]);</span><br><span class="line">        <span class="keyword">if</span>(i!=n)<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="comment">//printf(&quot;\n&quot;); fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多 练</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vp</category>
      </categories>
      <tags>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 93 (Rated for Div. 2) D,E</title>
    <url>/2022/07/01/CF1398/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1398">题目链接</a></p>
<p>2022.03.21</p>
<p>最近有空了重新写写之前的vp题解（</p>
<span id="more"></span>
<p>D. Colored Rectangles</p>
<p>题意：有三种颜色的木棍对，颜色$R$的长度为$r_1,r_2,\cdots,r_R$，颜色$G$的长度$g_1,g_2,\cdots,g_G$，颜色$B$的$b_1,\cdots,b_B$ ，求用不同颜色的木棍对组成矩形面积和的最大值。$R,G,B\le 200,1\le r_i,g_i,b_i\le 2000$。</p>
<p>​	数据范围一眼DP，然后由调整法可知，当选两种不同颜色的木棍对时，一定是先选剩下里面最长的。定义$dp[i][j][k]$表示选三种颜色的各$i,j,k$对时的答案，$O(RGB)$暴力转移即可。</p>
<p>E. Two Types of Spells</p>
<p>题意：有两种类型的法术，第一种(fire)直接造成伤害，第二种(lightning)造成伤害的同时，使下一个法术（无论什么类型）的伤害加倍。现在$n$个操作：学会/忘记一种类型为$t_i$，伤害为$|d_i|$的法术（$d_i$的正负决定了是学还是忘），每次操作后输出当前可造成的最大伤害。</p>
<p>​	有个很明显的贪心方向，就是尽可能使翻倍伤害大的。但是如果最后用翻倍的话是浪费的，当全为lightning法术的时候必须浪费掉，为了减小浪费，把伤害最小的放在最后，此时答案要减去这个最小伤害。</p>
<p>​	接下来就是考虑怎么实现了（本fw自己写总写出一堆bug），我们维护两个叫big和small的set，一个是翻倍伤害的，一个是不翻倍伤害的。然后在两个set中讨论转移元素。由之前的贪心知，<strong>small的最大元素一定不超过big的最小元素</strong>。然后再维护学会的fire集合，以及lightning法术的个数tot。假设当前读到d：</p>
<p>​	1、学会法术：如果是fire类型的就维护fire，否则tot++。如果small里的最大元素比d大，就插到small里面，否则插到big里面，加上翻倍的贡献。<strong>最后还要再调整big,small和答案。</strong></p>
<p>​	2、忘记法术：维护fire和tot。如果-d小于等于small的最大元素（逆过程），直接在small里删，否则在big里删，去掉贡献。<strong>最后还要再调整big,small和答案。</strong></p>
<p>​	3、维护big，small和答案：big的中元素个数应等于tot。在之前增删的过程中可能会使集合大小出现偏差，所以现在修正。如果big集合的大小小于tot，就在small里找最大元素移过来，加上翻倍的贡献；如果big集合的大小大于tot，就把big里最小的移到small里面，减去贡献。</p>
<p>​	之前维护的fire有什么用：当最后一个法术是fire类型的时候才不会浪费。即如果有翻倍，最后一个必须是fire类型的，否则要减去big里面的最小值。</p>
<p>D（写的有点丑：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 300110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line">ll dp[<span class="number">222</span>][<span class="number">222</span>][<span class="number">222</span>];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;r, g, b;</span><br><span class="line">map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;mp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    r.<span class="built_in">clear</span>(); g.<span class="built_in">clear</span>(); b.<span class="built_in">clear</span>(); mp.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">int</span> R, G, B; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;R, &amp;G, &amp;B);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= R; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;u);</span><br><span class="line">        mp[u]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : mp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= it.second; i++)</span><br><span class="line">            r.<span class="built_in">push_back</span>(it.first);</span><br><span class="line">    &#125;</span><br><span class="line">    mp.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= G; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;u);</span><br><span class="line">        mp[u]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : mp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= it.second; i++)</span><br><span class="line">            g.<span class="built_in">push_back</span>(it.first);</span><br><span class="line">    &#125;</span><br><span class="line">    mp.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= B; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;u);</span><br><span class="line">        mp[u]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : mp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= it.second; i++)</span><br><span class="line">            b.<span class="built_in">push_back</span>(it.first);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(r.<span class="built_in">begin</span>(), r.<span class="built_in">end</span>(), greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    <span class="built_in">sort</span>(g.<span class="built_in">begin</span>(), g.<span class="built_in">end</span>(), greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    <span class="built_in">sort</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>(), greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= r.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j =<span class="number">0</span>; j &lt;= g.<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= b.<span class="built_in">size</span>(); k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= <span class="number">1</span> &amp;&amp; k &gt;= <span class="number">1</span>)</span><br><span class="line">                    dp[i][j][k] = <span class="built_in">max</span>(dp[i][j][k], dp[i][j - <span class="number">1</span>][k - <span class="number">1</span>] + g[j - <span class="number">1</span>] * b[k - <span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &amp;&amp; k &gt;= <span class="number">1</span>)</span><br><span class="line">                    dp[i][j][k] = <span class="built_in">max</span>(dp[i][j][k], dp[i - <span class="number">1</span>][j][k - <span class="number">1</span>] + r[i - <span class="number">1</span>] * b[k - <span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &amp;&amp; j &gt;= <span class="number">1</span>)</span><br><span class="line">                    dp[i][j][k] = <span class="built_in">max</span>(dp[i][j][k], dp[i - <span class="number">1</span>][j - <span class="number">1</span>][k] + r[i - <span class="number">1</span>] * g[j - <span class="number">1</span>]);</span><br><span class="line">                <span class="comment">//printf(&quot;%d %d %d %lld\n&quot;, i, j, k, dp[i][j][k]);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= r.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= g.<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= b.<span class="built_in">size</span>(); k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//printf(&quot;%lld &quot;, dp[i][j][k]);</span></span><br><span class="line">                ans = <span class="built_in">max</span>(ans, dp[i][j][k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//printf(&quot;\n\n&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//printf(&quot;%lld&quot;, dp[0][1][1]);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>E</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 300110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cahr char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line">set&lt;<span class="keyword">int</span>&gt;big, small;<span class="comment">//前tot大的数</span></span><br><span class="line">set&lt;<span class="keyword">int</span>&gt;fire;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;<span class="comment">//加倍的数量</span></span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tp, d; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;tp, &amp;d);</span><br><span class="line">        ans += d;</span><br><span class="line">        <span class="keyword">if</span> (d &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (tp == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                tot++;<span class="comment">//最后再调整set，先不管</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                fire.<span class="built_in">insert</span>(d);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (small.<span class="built_in">size</span>() &amp;&amp; *small.<span class="built_in">rbegin</span>() &gt; d)</span><br><span class="line">            &#123;</span><br><span class="line">                small.<span class="built_in">insert</span>(d);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ans += d;<span class="comment">//暴击</span></span><br><span class="line">                big.<span class="built_in">insert</span>(d);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (tp == <span class="number">1</span>)tot--;</span><br><span class="line">            <span class="keyword">else</span> fire.<span class="built_in">erase</span>(-d);</span><br><span class="line">            <span class="keyword">if</span> (small.<span class="built_in">size</span>() &amp;&amp; -d&lt;=*small.<span class="built_in">rbegin</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                small.<span class="built_in">erase</span>(-d);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ans += d;</span><br><span class="line">                big.<span class="built_in">erase</span>(-d);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (big.<span class="built_in">size</span>() &lt; tot)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += *small.<span class="built_in">rbegin</span>();</span><br><span class="line">            big.<span class="built_in">insert</span>(*small.<span class="built_in">rbegin</span>());</span><br><span class="line">            small.<span class="built_in">erase</span>(*small.<span class="built_in">rbegin</span>());<span class="comment">//把small里面最大的移到big</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (big.<span class="built_in">size</span>() &gt; tot)</span><br><span class="line">        &#123;</span><br><span class="line">            ans -= *big.<span class="built_in">begin</span>();</span><br><span class="line">            small.<span class="built_in">insert</span>(*big.<span class="built_in">begin</span>());<span class="comment">//把big里面最小的移回small</span></span><br><span class="line">            big.<span class="built_in">erase</span>(*big.<span class="built_in">begin</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        ll trueans = ans;</span><br><span class="line">        <span class="keyword">if</span> (big.<span class="built_in">size</span>())<span class="comment">//如果有翻倍，最后一个必须是fire类型的</span></span><br><span class="line">        &#123;</span><br><span class="line">            trueans += <span class="built_in">min</span>((fire.<span class="built_in">size</span>()?*fire.<span class="built_in">rbegin</span>():<span class="number">0</span>) - *big.<span class="built_in">begin</span>(),<span class="number">0</span>);<span class="comment">//如果相等，差为0，不变，否则要减</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, trueans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;_);</span></span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多 练</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vp</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>模拟</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 720 (Div. 2)A-D</title>
    <url>/2022/03/19/CF1521/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1521">题目链接</a></p>
<p>2022.03.13</p>
<p>整场都是构造。交互没想出来，验证了我是fw</p>
<p>2022.03.21补D</p>
<span id="more"></span>
<p>A.给两个$A,B(\le 10^6)$，构造$x,y,z$满足$x+y=z$，$x,y,z$互不相同，且只有一个能被$AB$整除，另外两个只能被$A$整除，或说明无解。</p>
<p>如果$B=1$无解，因为$A=AB$.否则可以$A·1+A·(2B-1)=2AB$。</p>
<p>B.定义一个数组是好的当$\gcd(a_{i-1},a_i)=1$对$2\le i\le n$成立。你可以进行不超过$n$次操作，一次操作选择$i\neq j$和$x,y$满足$\min(a_i,a_j)=\min(x,y)$，把$a_i$换成$x$，把$a_j$换成$y$。求一种方案。初始$a_i\le 10^9.x,y\le2\times 10^9,n\le 200000$.</p>
<p>换的要求是小的值保留，大的可以换成任意不比小值小的数。可以考虑把大的换成大质数1000000007。把偶数位换了就行。</p>
<p>C.交互题，要猜一个长为$n$的排列，有两种询问方式。格式为<code>? t i j x </code>。若$t=1$，程序返回$\max(\min(x,p_i),\min(x+1,p_j))$。若$t=2$，返回$\min(\max(x,p_i),\max(x+1,p_j))$。询问次数$\frac{3n}{2}+30,1\le x\le n-1,i\neq j,1\le i,j\le n$。</p>
<p>给的东西有点多，而且式子套max和min。先固定$x=1/n$,看看能不能消掉一些。</p>
<ol>
<li>$t=1,x=1:ans=\max(\min(1,p_i),\min(2,p_j))=\min(2,p_j).$</li>
<li>$t=1,x=n-1:ans=\max(\min(n-1,p_i),\min(n,p_j))=\max(\min(n-1,p_i),p_j).$</li>
<li>$t=2,x=1:ans=\min(\max(1,p_i),\max(2,p_j))=\min(p_i,\max(2,p_j)).$</li>
<li>$t=2,x=n-1:ans=\min(\max(n-1,p_i),\max(n,p_j))=\max(n-1,p_j).$</li>
</ol>
<p>如果只用1和4是肯定不行的，因为它们只有一个功能，就是用$n-1$次询问找到一个最值，那剩下的还要确定其他数就不够用了，先排除，也提示我们最值可能有用。</p>
<p>假如我们找到了最值$n=p_j$，$t=1,x=1,p_j=n:ans=\max(\min(1,p_i),\min(2,n))=p_i$，直接得到了一个点的值！如果找到了最值，可以用$n-1$次把剩下的点全都问出来，但次数只剩大概$\frac{n}{2}+30$次找最值了。</p>
<p>假如找最大值，利用第2点。2个2个地问。</p>
<p>如果$p_i\neq n,p_j\neq n:ans&lt;n-1$。</p>
<p>如果$p_j=n:ans=n$，反之也成立，此时找到了最值。</p>
<p>如果$p_i=n:ans=\max(n-1,p_j)= n-1$，因为$n$被用了所以$p_j\neq n$。反之，如果$ans=n-1$，不一定$p_i=n$。还可能是$p_i=n-1$.此时交换$i,j$询问即可确定。因为最多只有一个$n-1$，所以交换后问不到最值得情况最多只有1次，够的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 300110</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXAN MAXN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mapa make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls o&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs o&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sit std::set<span class="meta-string">&lt;std::pair&lt;int,int&gt;</span> &gt;::iterator</span></span><br><span class="line"><span class="keyword">int</span> n, a[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;? %d %d %d %d\n&quot;</span>, t, i, j, x); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    <span class="keyword">int</span> res; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;res); <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> posn = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="built_in">ask</span>(<span class="number">1</span>, i, i + <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (tmp == n)</span><br><span class="line">        &#123;</span><br><span class="line">            posn = i + <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tmp == n - <span class="number">1</span>)<span class="comment">//最多两次</span></span><br><span class="line">        &#123;</span><br><span class="line">            tmp = <span class="built_in">ask</span>(<span class="number">1</span>, i + <span class="number">1</span>, i, n - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (tmp == n)</span><br><span class="line">            &#123;</span><br><span class="line">                posn = i; <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (posn == <span class="number">-1</span>)posn = n;</span><br><span class="line">    a[posn] = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == posn)<span class="keyword">continue</span>;</span><br><span class="line">        a[i] = <span class="built_in">ask</span>(<span class="number">2</span>, i, posn, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;! &quot;</span>); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]); <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span></span><br><span class="line">    <span class="keyword">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;_);</span><br><span class="line">    <span class="comment">//cin &gt;&gt; _;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">slv</span>();</span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">//printf(&quot;\n&quot;); fflush(stdout);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多 练</span></span><br></pre></td></tr></table></figure>
<p>D.给一棵树，一次操作你可以删一条边，再在任意节点之间加一条边。求把树变为链的最小操作次数。$n\le 10^5.$</p>
<p>删边和加边是互不影响的，所以先删完再加。加边必须要求是链，所以删边的结果必须是变成若干条链。加边次数就是被分成链的数量，要控制被分得的链数最小。</p>
<p>考虑节点$v$：其度数必然要删到不大于2。有一种贪心方法是，如果$v$有连向父亲节点的边，优先删这条边，然后删掉$v$与儿子中的边直到其度数不大于2。可以这样理解，节点$v$删的边的数量肯定是确定的，如果优先删连向父亲的边，可以使父亲的度数减少，可能会减少要删的边的数量。</p>
<p>然后知道这样做，写起来也很别扭，调了好久。一是删边，用邻接表存图删边的时候找反向边比较麻烦，所以用链式前向星取异或的方法找。每条边加个标记表示有没有被删，递归的时候，要先递归到底再删，不能先删儿子再递归（删了边就进不了儿子了）。删完之后要把链连起来，所以再dfs一遍把端点找到。还有就是清空的时候要记得清空删除标记。。。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;time.h&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;unordered_map&gt;</span><br><span class="line">#include &lt;bitset&gt;</span><br><span class="line">#include &lt;tuple&gt;</span><br><span class="line">#define MAXN 300110</span><br><span class="line">#define MXAN MAXN</span><br><span class="line">#define MOD 1000000007</span><br><span class="line">#define mapa make_pair</span><br><span class="line">#define ll long long</span><br><span class="line">#define cahr char</span><br><span class="line">#define pa pair&lt;int,int&gt;</span><br><span class="line">#define eps 1e-8</span><br><span class="line">using namespace std;</span><br><span class="line">#define Sit std::set&lt;std::pair&lt;int,int&gt; &gt;::iterator</span><br><span class="line">int n, deg[MAXN], faid[MAXN];</span><br><span class="line">struct Node</span><br><span class="line">&#123;</span><br><span class="line">    int nxt, to, del;</span><br><span class="line">&#125;e[MAXN &lt;&lt; 1];</span><br><span class="line">int head[MAXN], ecnt = 1;</span><br><span class="line">void add(int from, int to)</span><br><span class="line">&#123;</span><br><span class="line">    e[++ecnt].nxt = head[from];</span><br><span class="line">    e[ecnt].to = to;</span><br><span class="line">    head[from] = ecnt;</span><br><span class="line">    deg[from]++;</span><br><span class="line">    e[ecnt].del = 0;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;pa&gt;del, ad; vector&lt;int&gt;link;</span><br><span class="line">void getfa(int u, int f)</span><br><span class="line">&#123;</span><br><span class="line">    for (int i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        int v = e[i].to;</span><br><span class="line">        if (v == f)</span><br><span class="line">        &#123;</span><br><span class="line">            faid[u] = i;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        getfa(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void dfs(int u, int f)</span><br><span class="line">&#123;</span><br><span class="line">    for (int i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        int v = e[i].to;</span><br><span class="line">        if (v!=f)dfs(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    if (deg[u] &gt; 2 &amp;&amp; e[faid[u]].del == 0&amp;&amp;e[faid[u]^1].del==0 &amp;&amp; f)//断uf</span><br><span class="line">    &#123;</span><br><span class="line">     //   printf(&quot;del:%d %d\n&quot;, u, f);</span><br><span class="line">        del.push_back(mapa(u, f));</span><br><span class="line">        deg[u]--; deg[f]--;</span><br><span class="line">        e[faid[u]].del = e[faid[u] ^ 1].del = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        int v = e[i].to;</span><br><span class="line">        if (v == f)continue;</span><br><span class="line">        if (deg[u] &gt; 2&amp;&amp;e[i].del==0)</span><br><span class="line">        &#123;</span><br><span class="line">       //     printf(&quot;del:%d %d\n&quot;, u, v);</span><br><span class="line">            del.push_back(mapa(u, v));</span><br><span class="line">            deg[u]--; deg[v]--;</span><br><span class="line">            e[i].del = e[i ^ 1].del = 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void dfs2(int u, int f)</span><br><span class="line">&#123;</span><br><span class="line">    //printf(&quot;~%d %d\n&quot;, u, deg[u]);</span><br><span class="line">    if (deg[u] == 1)</span><br><span class="line">        link.push_back(u), deg[u] = 99;</span><br><span class="line">    else if (deg[u] &lt;= 0)</span><br><span class="line">    &#123;</span><br><span class="line">        link.push_back(u); link.push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = head[u]; i; i = e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        int v = e[i].to;</span><br><span class="line">        if (v == f || e[i].del)continue;</span><br><span class="line">        dfs2(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void slv()</span><br><span class="line">&#123;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;n); del.clear(); ad.clear(); link.clear(); ecnt = 1;</span><br><span class="line">    for (int i = 1; i &lt;= n; i++)head[i] = deg[i] = 0;</span><br><span class="line">    for (int i = 1; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int u, v; scanf(&quot;%d%d&quot;, &amp;u, &amp;v);</span><br><span class="line">        add(u, v); add(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    getfa(1, 0); dfs(1, 0);</span><br><span class="line">    for (int i = 1; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if (deg[i] &lt;= 1)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs2(i, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 1; i &lt; link.size()-1; i+=2)</span><br><span class="line">    &#123;</span><br><span class="line">        ad.push_back(mapa(link[i], link[i + 1]));</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;, del.size());</span><br><span class="line">    for (int i = 0; i &lt; del.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%d %d %d %d\n&quot;, del[i].first, del[i].second, ad[i].first, ad[i].second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    //ios::sync_with_stdio(false);cin.tie(0); cout.tie(0);</span><br><span class="line">    int _ = 1;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;_);</span><br><span class="line">    //cin &gt;&gt; _;</span><br><span class="line">#ifdef LOCAL</span><br><span class="line">    freopen(&quot;in.in&quot;, &quot;r&quot;, stdin);</span><br><span class="line">    freopen(&quot;out.out&quot;, &quot;w&quot;, stdout);</span><br><span class="line">#endif</span><br><span class="line">    for (int i = 1; i &lt;= _; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        slv();</span><br><span class="line">        //cout &lt;&lt; endl;</span><br><span class="line">        //printf(&quot;\n&quot;); fflush(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">//多 练</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vp</category>
      </categories>
      <tags>
        <tag>交互</tag>
        <tag>树</tag>
        <tag>构造</tag>
      </tags>
  </entry>
</search>
